<!DOCTYPE article
PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN" "JATS-archivearticle1-3-mathml3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3"><?properties open_access?><processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats"><restricted-by>pmc</restricted-by></processing-meta><front><journal-meta><journal-id journal-id-type="nlm-ta">STAR Protoc</journal-id><journal-id journal-id-type="iso-abbrev">STAR Protoc</journal-id><journal-title-group><journal-title>STAR Protocols</journal-title></journal-title-group><issn pub-type="epub">2666-1667</issn><publisher><publisher-name>Elsevier</publisher-name></publisher></journal-meta>
<article-meta><article-id pub-id-type="pmid">39823233</article-id><article-id pub-id-type="pmc">PMC11786766</article-id><article-id pub-id-type="pii">S2666-1667(24)00738-X</article-id><article-id pub-id-type="doi">10.1016/j.xpro.2024.103573</article-id><article-id pub-id-type="publisher-id">103573</article-id><article-categories><subj-group subj-group-type="heading"><subject>Protocol</subject></subj-group></article-categories><title-group><article-title>Protocol to infer off-target effects of drugs on cellular signaling using interactome-based deep learning</article-title></title-group><contrib-group><contrib contrib-type="author" id="au1"><name><surname>Meimetis</surname><given-names>Nikolaos</given-names></name><xref rid="aff1" ref-type="aff">1</xref><xref rid="fn1" ref-type="fn">3</xref></contrib><contrib contrib-type="author" id="au2"><name><surname>Lauffenburger</surname><given-names>Douglas A.</given-names></name><xref rid="aff1" ref-type="aff">1</xref></contrib><contrib contrib-type="author" id="au3"><name><surname>Nilsson</surname><given-names>Avlant</given-names></name><email>avlant.nilsson@ki.se</email><xref rid="aff2" ref-type="aff">2</xref><xref rid="fn2" ref-type="fn">4</xref><xref rid="cor1" ref-type="corresp">&#x02217;</xref></contrib><aff id="aff1"><label>1</label>Department of Biological Engineering, Massachusetts Institute of Technology, Cambridge, MA 02139, USA</aff><aff id="aff2"><label>2</label>Department of Cell and Molecular Biology, SciLifeLab, Karolinska Institutet, 171 77 Stockholm, Sweden</aff></contrib-group><author-notes><corresp id="cor1"><label>&#x02217;</label>Corresponding author <email>avlant.nilsson@ki.se</email></corresp><fn id="fn1"><label>3</label><p id="ntpara0010">Technical contact</p></fn><fn id="fn2"><label>4</label><p id="ntpara0015">Lead contact</p></fn></author-notes><pub-date pub-type="pmc-release"><day>16</day><month>1</month><year>2025</year></pub-date><!-- PMC Release delay is 0 months and 0 days and was based on <pub-date
						pub-type="epub">.--><pub-date pub-type="collection"><day>21</day><month>3</month><year>2025</year></pub-date><pub-date pub-type="epub"><day>16</day><month>1</month><year>2025</year></pub-date><volume>6</volume><issue>1</issue><elocation-id>103573</elocation-id><permissions><copyright-statement>&#x000a9; 2024 The Author(s)</copyright-statement><copyright-year>2024</copyright-year><license><ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).</license-p></license></permissions><abstract id="abs0010"><title>Summary</title><p>Drugs that target specific proteins often have off-target effects. We present a protocol using artificial neural networks to model cellular transcriptional responses to drugs, aiming to understand their mechanisms of action. We detail steps for predicting transcriptional activities, inferring drug-target interactions, and explaining the off-target mechanism of action. As a case study, we analyze the off-target effects of lestaurtinib on FOXM1 in the A375 cell line.</p><p>For complete details on the use and execution of this protocol, please refer to Meimetis et&#x000a0;al.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p></abstract><abstract abstract-type="graphical" id="abs0015"><title>Graphical abstract</title><fig id="undfig1" position="anchor"><graphic xlink:href="fx1"/></fig></abstract><abstract abstract-type="author-highlights" id="abs0020"><title>Highlights</title><p><list list-type="simple" id="ulist0010"><list-item id="u0010"><label>&#x02022;</label><p id="p0010">This protocol preprocesses gene expression data for deep learning modeling</p></list-item><list-item id="u0015"><label>&#x02022;</label><p id="p0015">Trains a model to predict drug-induced transcription factor activity on cell lines</p></list-item><list-item id="u0020"><label>&#x02022;</label><p id="p0020">Infers drug-target interactions that explain the transcriptomics data</p></list-item><list-item id="u0025"><label>&#x02022;</label><p id="p0025">Extracts and visualizes the mechanism of action of drugs&#x02019; off-target effects</p></list-item></list></p></abstract><abstract abstract-type="editor-highlights" id="abs0025"><p>Publisher&#x02019;s note: Undertaking any experimental protocol requires adherence to local institutional guidelines for laboratory safety and ethics.</p></abstract><abstract abstract-type="teaser" id="abs0030"><p>Drugs that target specific proteins often have off-target effects. We present a protocol using artificial neural networks to model cellular transcriptional responses to drugs, aiming to understand their mechanisms of action. We detail steps for predicting transcriptional activities, inferring drug-target interactions, and explaining the off-target mechanism of action. As a case study, we analyze the off-target effects of lestaurtinib on FOXM1 in the A375 cell line.</p></abstract><kwd-group id="kwrds0010"><title>Subject areas</title><kwd>bioinformatics</kwd><kwd>health sciences</kwd><kwd>gene expression</kwd><kwd>systems biology</kwd></kwd-group></article-meta></front><body><sec id="sec1"><title>Before you begin</title><p id="p0030">This section includes the software installation as well as the collection of pre-compiled data used in this study to train and utilize a DT-LEMBAS model.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p><p id="p0035">DT-LEMBAS is an interactome-based artificial neural network model that takes as input log-transformed drug concentrations and predicts the induced activity of multiple transcription factors. DT-LEMBAS consists of two components: a drug layer that transforms input drugs to signaling perturbations on available target nodes (for a pre-defined drug-target space), and a signaling module (termed LEMBAS<xref rid="bib2" ref-type="bibr"><sup>2</sup></xref>), defined as a recurrent neural network and constraint to an existing prior knowledge signaling network (PKN), which takes the signaling input and propagates it in the intracellular network to predict transcription factor activity. Empirically, in our case studies and data<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref><sup>,</sup><xref rid="bib2" ref-type="bibr"><sup>2</sup></xref> we observed that at least &#x0223c;120 conditions are needed when training a predictive model using &#x0223c;100 TFs, and a Prior Knowledge Network (PKN) of &#x0223c;12 thousand interactions.</p><sec id="sec1.1"><title>Hardware requirement</title><p id="p0040">Simple simulations using one model were performed on a Dell XPS 17 laptop with an Intel i9-11900h @4.9 GHz with 8 cores (16 logic processors) and 32 GB RAM. For convenience, ensemble training of multiple models and cross-validation was carried out on a single-threaded computer cluster (Intel Xeon CPU @ 2.60 GHz) that allowed job scheduling (using Slurm) with 16 parallel jobs. For extracting inferred drug-target interactions from the model for the specific linear drug module used in this study only the CPU version of PyTorch<xref rid="bib3" ref-type="bibr"><sup>3</sup></xref> is required, and this results in an execution time of &#x0223c;3&#x000a0;min per model. For the purpose of generalization to custom-built drug-interaction modules, we have also implemented a version based on integrated gradients using the Captum library.<xref rid="bib4" ref-type="bibr"><sup>4</sup></xref> This analysis uses the GPU version of PyTorch, requiring an execution time of &#x0223c;3.8&#x000a0;min per model for our case study. This method yields equivalent results as the CPU version but can be applied to custom-developed, non-linear drug modules (e.g., instead of using weight matrices one could use conventional feedforward neural networks with non-linear activation functions), with some minor tuning. Specifically, the step evaluating drug-target interactions can take any PyTorch model and generate a score for each output (e.g., target protein) with respect to the input (e.g., drug).</p></sec><sec id="sec1.2"><title>Software installation</title><p id="p0045">
<disp-quote id="disp0010"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;30&#x000a0;min</bold></p></disp-quote>
</p><p id="p0050">For this case study, as well as the associated publication and its results, all models were expressed in and trained using the PyTorch framework<xref rid="bib3" ref-type="bibr"><sup>3</sup></xref> (versions 1.10.2&#x000a0;&#x00026; 1.12) in Python (version 3.6.13&#x000a0;&#x00026; 3.8.8). Pre-processing and statistical analysis of the results were done in the R programming language (version 4.1.2). Visualization of results was done mainly using ggplot2<xref rid="bib5" ref-type="bibr"><sup>5</sup></xref> and Cytoscape.<xref rid="bib6" ref-type="bibr"><sup>6</sup></xref> For more information about the library versions used in the original study, visit the corresponding GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0010">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link>.</p><p id="p0055">The installation commands have been verified to work in Unix-based, macOS (with the exception of the GPU functionalities), and Windows operating systems. More information is available in the steps below.<list list-type="simple" id="olist0010"><list-item id="o0010"><label>1.</label><p id="p0060">Clone the code repository from <ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0015">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link></p></list-item></list><boxed-text id="dtbox1"><p id="p0065">&#x0003e; git clone<ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling.git" id="intref0020">https://github.com/Lauffenburger-Lab/DrugsANNSignaling.git</ext-link>.</p></boxed-text><list list-type="simple" id="olist0015"><list-item id="o0015"><label>2.</label><p id="p0070">Install Anaconda on your personal computer (for cluster installation follow your cluster&#x02019;s admin instructions).<list list-type="simple" id="olist0020"><list-item id="o0020"><label>a.</label><p id="p0075">Download Anaconda from <ext-link ext-link-type="uri" xlink:href="https://repo.anaconda.com/archive" id="intref0025">https://repo.anaconda.com/archive</ext-link>.</p></list-item><list-item id="o0025"><label>b.</label><p id="p0080">Install the Anaconda Navigator following the default settings.</p></list-item><list-item id="o0030"><label>c.</label><p id="p0085">Launch the Anaconda Navigator and open the terminal <bold>or</bold> directly open the Anaconda Powershell Prompt <bold>or</bold> (for Unix-based systems) open your command line.</p></list-item><list-item id="o0035"><label>d.</label><p id="p0090">Direct with &#x0201c;cd&#x0201d; commands to the folder you want to run your case study (the cloned GitHub folder)</p></list-item></list></p></list-item><list-item id="o0040"><label>3.</label><p id="p0095">Create a conda environment and activate it to install Python DT-LEMBAS dependencies.</p></list-item></list><boxed-text id="dtbox2"><p id="p0100">&#x0003e; conda create -n DTLembas</p><p id="p0105">&#x0003e; conda activate DTLembas</p></boxed-text><list list-type="simple" id="olist0025"><list-item id="o0045"><label>4.</label><p id="p0110">Install Python libraries.</p></list-item></list><boxed-text id="dtbox3"><p id="p0115">&#x0003e; conda activate DTLembas</p><p id="p0120">&#x0003e; conda install -c conda-forge rdkit # It will also install numpy, pandas, and matplotlib</p><p id="p0125">&#x0003e; conda install -c conda-forge scikit-learn #it will also install scipy</p><p id="p0130">&#x0003e; pip install networkx</p></boxed-text><disp-quote id="disp0015"><p><bold><italic>Note:</italic></bold> Installing rdkit will also install numpy, pandas, and matplotlib, while scikit-learn will also install scipy.</p></disp-quote><list list-type="simple" id="olist0030"><list-item id="o0050"><label>5.</label><p id="p0135">Install PyTorch framework (select the GPU option if GPU and CPU are both available in your operating system. macOS is not compatible with the GPU version).<boxed-text id="dtbox4"><p id="p0140">&#x0003e; conda activate DTLembas</p></boxed-text><list list-type="simple" id="olist0035"><list-item id="o0055"><label>a.</label><p id="p0145">GPU+CPU version for CUDA 11.8 (for more information see <ext-link ext-link-type="uri" xlink:href="https://pytorch.org/get-started/locally/" id="intref0030">https://pytorch.org/get-started/locally/</ext-link>).<boxed-text id="dtbox5"><p id="p0150">&#x0003e; conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia</p></boxed-text></p></list-item><list-item id="o0060"><label>b.</label><p id="p0160">CPU-only version (for more information see <ext-link ext-link-type="uri" xlink:href="https://pytorch.org/get-started/locally/" id="intref0035">https://pytorch.org/get-started/locally/</ext-link>).<boxed-text id="dtbox7"><p id="p0165">&#x0003e; conda install pytorch torchvision torchaudio -c pytorch</p></boxed-text></p></list-item></list></p></list-item><list-item id="o0065"><label>6.</label><p id="p0175">Install Captum for feature importance calculation:</p></list-item></list><boxed-text id="dtbox9"><p id="p0180">&#x0003e; conda install captum -c pytorch</p></boxed-text><list list-type="simple" id="olist0045"><list-item id="o0070"><label>7.</label><p id="p0185">Install R and R-studio.<list list-type="simple" id="olist0050"><list-item id="o0075"><label>a.</label><p id="p0190">Download R from <ext-link ext-link-type="uri" xlink:href="https://cloud.r-project.org" id="intref0040">https://cloud.r-project.org</ext-link> and install it.</p></list-item><list-item id="o0080"><label>b.</label><p id="p0195">Download R-studio from <ext-link ext-link-type="uri" xlink:href="https://posit.co/download/rstudio-desktop" id="intref0045">https://posit.co/download/rstudio-desktop</ext-link> and install it.</p></list-item></list></p></list-item><list-item id="o0085"><label>8.</label><p id="p0200">Install necessary R packages (Inside R or RStudio terminal run the following commands).</p></list-item></list><boxed-text id="dtbox10"><p id="p0205">&#x0003e;if(!require(("BiocManager", quietly&#x000a0;= TRUE)){&#x000a0;&#x0003e;&#x000a0;install.packages("BiocManager") # If not already installed &#x0003e;} &#x0003e;&#x000a0;BiocManager::install(c("cmapR","rhdf5","dorothea","org.Hs.eg.db","hgu133a.db"))</p><p id="p0210">&#x0003e;if(!require(("tidyverse", quietly&#x000a0;= TRUE)){&#x000a0;&#x0003e;&#x000a0;install.packages("tidyverse") # If not already installed &#x0003e;}</p><p id="p0215">&#x0003e;if(!require(("ggplot2", quietly&#x000a0;= TRUE)){&#x000a0;&#x0003e;&#x000a0;install.packages("ggplot2") # If not already installed &#x0003e;}</p><p id="p0220">&#x0003e; install.packages("ggrepel")</p><p id="p0225">&#x0003e; install.packages("ggpubr")</p><p id="p0230">&#x0003e; install.packages("doRNG")</p><p id="p0235">&#x0003e; install.packages("doFuture")</p></boxed-text><disp-quote id="disp0020"><p><bold><italic>Note:</italic></bold> For using R in computer clusters, cluster-specific commands may be required. However, there is a convenient alternative of creating an R conda environment using anaconda or miniconda. <bold>A lot of the dependencies, such as tidyverse and ggplot2, are automatically installed this way.</bold> Below we show how to create the R environment and install the remaining dependencies:</p></disp-quote><boxed-text id="dtbox11"><p id="p0240">&#x0003e; conda create -n DTLembas_r_env</p><p id="p0245">&#x0003e; conda activate DTLembas_r_env</p><p id="p0250">&#x0003e; conda install -c r r-essentials</p><p id="p0255">&#x0003e; conda install r-BiocManager</p><p id="p0260">&#x0003e; conda install conda-forge::r-ggrepel</p><p id="p0265">&#x0003e; conda install r-ggpubr</p><p id="p0270">&#x0003e; conda install r-doRNG</p><p id="p0275">&#x0003e; conda install r-doFuture</p><p id="p0280">&#x0003e; R() # to open R to install Bioconductor packages and GitHub repos</p><p id="p0285">&#x0003e; BiocManager::install(c("cmapR","rhdf5","dorothea","org.Hs.eg.db","hgu133a.db"))</p></boxed-text><list list-type="simple" id="olist0055"><list-item id="o0090"><label>9.</label><p id="p0290">Install the latest version of Cytoscape to visualize the inferred mechanism of action networks here: <ext-link ext-link-type="uri" xlink:href="https://cytoscape.org" id="intref0050">https://cytoscape.org</ext-link>.</p></list-item><list-item id="o0095"><label>10.</label><p id="p0295">Optionally, download the yFiles Layout Algorithms for Cytoscape here: <ext-link ext-link-type="uri" xlink:href="https://www.yworks.com/products/yfiles-layout-algorithms-for-cytoscape" id="intref0055">https://www.yworks.com/products/yfiles-layout-algorithms-for-cytoscape</ext-link>.</p></list-item><list-item id="o0100"><label>11.</label><p id="p0300">Open the Cytoscape app and select `Apps&#x0003e;App&#x0003e;Install Apps From File Store` in the main menu bar.</p></list-item><list-item id="o0105"><label>12.</label><p id="p0305">Select the file you downloaded for the yFiles Layout Algorithms.</p></list-item></list><disp-quote id="disp0025"><p><bold><italic>Note:</italic></bold> These layout options are useful for visualization and especially for our case studies for selecting the yFiles Organic Layout and yFiles Remove Overlaps (which removes overlaps between edges).</p></disp-quote></p></sec><sec id="sec1.3"><title>File types and formats</title><p id="p0310">The whole tutorial utilized three file types: i) CSV, ii) TSV, and iii) RDS. The RDS file format is a unique data type where R objects and variables of any kind can be saved into. For converting from and to RDS format you may use the RDS_to_CSV_TSV.R and CSV_TSV_to_RDS.R, respectively, in the preprocessing folder. It is also possible to load and save RDS files in Python (look at the <bold>CSV_TSV_to_RDS.py</bold> example in the preprocessing folder) by using the `pyreadr` package (<ext-link ext-link-type="uri" xlink:href="https://ofajardo.github.io/pyreadr/_build/html/index.html" id="intref0060">https://ofajardo.github.io/pyreadr/_build/html/index.html</ext-link>).</p><p id="p0315">The identifiers used for individual drugs follow the Simplified Molecular Input Line Entry System (SMILES) format. SMILES is a sequence of letters describing the 2D structure of a drug. Wherever a commercial drug name is used, this is only included for interpretability, as a unique chemical structure (SMILES) can have multiple commercial names.</p><p id="p0320">The genes in this tutorial are annotated using gene names of the NCBI standard. Before you begin it is important to annotate your transcriptomic data with these gene names, as these are also used when inferring transcription factors&#x02019; activities.</p><p id="p0325">For training the model, three main input files are required. Firstly, a PKN saved in TSV format with columns: source (i.e., the source node in a protein-protein interaction), target (i.e., the target node in a protein-protein interaction), direction, stimulation, inhibition, sources and references. Secondly, the input log-transformed drug concentrations are the main input of the whole model (the drug layer and the signaling module together), saved in a TSV file in matrix format (<inline-formula><mml:math id="M1" altimg="si1.gif"><mml:mrow><mml:mi>s</mml:mi><mml:mi>a</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mrow><mml:mo>(</mml:mo><mml:mi>N</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mspace width="0.25em"/><mml:mi>x</mml:mi><mml:mspace width="0.25em"/><mml:mi>d</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mrow><mml:mo>(</mml:mo><mml:mi>D</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>), where the rows are named with any condition identifier and columns are named with the SMILES of the drugs. Finally, the predicted output of the model is saved in a TSV file in matrix format (<inline-formula><mml:math id="M2" altimg="si2.gif"><mml:mrow><mml:mi>N</mml:mi><mml:mspace width="0.25em"/><mml:mi>x</mml:mi><mml:mspace width="0.25em"/><mml:mi>T</mml:mi><mml:mi>F</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mrow><mml:mo>(</mml:mo><mml:mi>T</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>), where rows have the same names as the input file, and the columns have the names of the TFs whose activity is going to be predicted.</p></sec><sec id="sec1.4"><title>Data collection</title><p id="p0330">
<disp-quote id="disp0030"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;30 s</bold></p></disp-quote>
</p><p id="p0335">All the data required for this tutorial are automatically downloaded during the software installation when cloning the GitHub repository with the following command.<boxed-text id="dtbox12"><p id="p0340">&#x0003e; git clone<ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling.git" id="intref0065">https://github.com/Lauffenburger-Lab/DrugsANNSignaling.git</ext-link>.</p></boxed-text></p><p id="p0345">For users with their own data, this tutorial is designed to be flexible. You may substitute your own transcriptomic and drug-target interaction data for the analysis, provided it follows the same format as the file used in this tutorial (see Step 1). This allows for customized case studies and specific data exploration relevant to your research. Note that for your transcriptomic data, you need to annotate them with the corresponding gene symbols, in order to match the gene symbols (NCBI standard) of the prior knowledge regulatory network that is used.</p><p id="p0350">For completing the tutorial using our preprocessed data, is provided in the preprocessing/preprocessed_data folder. It contains drug-target interaction, in the <bold><italic>L1000_lvl3_A375-drugs_targets.tsv</italic></bold> file, located in the TrainingValidationData folder; the input conditions for the model, i.e., the doses of the drugs tested in the experiment, in the <bold><italic>L1000_lvl3_A375-conditions_drugs.tsv</italic></bold> file, located in the TrainingValidationData folder; and the transcription factor activities of input conditions used to train the model, in the <bold><italic>TrimmedFinal_l1000_allgenes_lvl3_tfs.tsv</italic></bold> file, located in the TF_activities folder.</p></sec></sec><sec id="sec2"><title>Key resources table</title><p id="p0355">
<table-wrap position="float" id="undtbl1"><table frame="hsides" rules="groups"><thead><tr><th>REAGENT or RESOURCE</th><th>SOURCE</th><th>IDENTIFIER</th></tr></thead><tbody><tr><td colspan="3"><bold>Deposited data</bold></td></tr><tr><td colspan="3"><hr/></td></tr><tr><td>L1000 Connectivity Map perturbational profiles from Broad Institute LINCS Center for Transcriptomics LINCS Pilot Phase I</td><td><ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE92742" id="intref0075">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE92742</ext-link></td><td><ext-link ext-link-type="NCBI:geo" xlink:href="GSE92742" id="intref0080">GSE92742</ext-link></td></tr><tr><td>Broad Institute Repurposing Hub</td><td><ext-link ext-link-type="uri" xlink:href="https://repo-hub.broadinstitute.org/repurposing#download-data" id="intref0085">https://repo-hub.broadinstitute.org/repurposing#download-data</ext-link></td><td>Drug information: version 3/24/2020</td></tr><tr><td>Pre-processed and pre-compiled data</td><td><ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0090">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link></td><td><ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0095">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link></td></tr><tr><td>Pre-processed and pre-compiled data</td><td><ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.14057135" id="intref0100">https://doi.org/10.5281/zenodo.14057135</ext-link></td><td><ext-link ext-link-type="doi" xlink:href="10.5281/zenodo.14057135" id="intref0105">https://doi.org/10.5281/zenodo.14057135</ext-link></td></tr><tr><td>Trained cell line-specific ensembles of 50 models</td><td><ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.14057298" id="intref0110">https://doi.org/10.5281/zenodo.14057298</ext-link></td><td><ext-link ext-link-type="doi" xlink:href="10.5281/zenodo.14057298" id="intref0115">https://doi.org/10.5281/zenodo.14057298</ext-link></td></tr><tr><td colspan="3"><hr/></td></tr><tr><td colspan="3"><bold>Software and algorithms</bold></td></tr><tr><td colspan="3"><hr/></td></tr><tr><td>R programming language v.4.1.2</td><td>R Core Team and the R Foundation for Statistical Computing</td><td><ext-link ext-link-type="uri" xlink:href="https://www.r-project.org" id="intref0120">https://www.r-project.org</ext-link></td></tr><tr><td>Python programming language v.3.8.8</td><td>Python Software Foundation</td><td><ext-link ext-link-type="uri" xlink:href="https://www.python.org" id="intref0125">https://www.python.org</ext-link></td></tr><tr><td>PyTorch framework (versions 1.10.2&#x000a0;&#x00026; 1.12)</td><td>Linux Foundation umbrella</td><td><ext-link ext-link-type="uri" xlink:href="https://pytorch.org" id="intref0130">https://pytorch.org</ext-link></td></tr><tr><td>Cytoscape v.3.10.3</td><td>Cytoscape Team</td><td><ext-link ext-link-type="uri" xlink:href="https://cytoscape.org" id="intref0135">https://cytoscape.org</ext-link></td></tr><tr><td>Machine learning and downstream analysis algorithms for this protocol</td><td><ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0140">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link></td><td><ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0145">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link></td></tr></tbody></table></table-wrap>
</p></sec><sec id="sec3"><title>Step-by-step method details</title><p id="p0360">Here, we describe step-by-step methods for training interactome-based deep learning models to simulate cellular transcriptional responses to drugs. This aims to infer off-target effects and to understand their downstream signaling activities. This protocol is divided into 7 steps: 1) retrieving pre-compiled drug-target interactions (DTIs) or using your own with the same file formats, 2) inferring transcription factor (TF) activity from gene expression data (using the DoRothEA regulon<xref rid="bib7" ref-type="bibr"><sup>7</sup></xref> together with the VIPER algorithm<xref rid="bib8" ref-type="bibr"><sup>8</sup></xref>), and pre-processing and filtering TFs and samples, 3) constructing a prior knowledge network (PKN) to act as a scaffold for the deep learning model, 4) train cell line-specific models, 5) extracting the inferred DTIs from the model, 6) estimating off-target effects of drugs on specific TFs and selecting a sample of interest, and 7) ultimately extract the mechanism of action (MoA) of a drug&#x02019;s off-target effect on a TF, in the form of a smaller signaling network.</p><p id="p0365">As an example of these steps, we use transcriptomic data from the L1000 dataset<xref rid="bib9" ref-type="bibr"><sup>9</sup></xref> to train an ensemble of 50 models simulating drug-induced transcriptional responses on the A375 cancer cell line. Then, after extracting learned DTIs, we build a signaling network explaining Lestaurtinib&#x02019;s off-target effects on the FOXM1 transcription factor. All steps can also be found in the GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0150">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link>.</p><p id="p0370">There are several files that are generated and used in the protocol. Here we describe the most important ones that are required for training a model and using it for a case study. &#x0201c;<bold><italic>DrugsIn&#x0201d;</italic></bold> is the input file (X)&#x000a0;of the model in .tsv format, containing the input drug concentrations, with samples in the rows and the available drugs in the columns. This is manually curated by the user. <bold><italic>&#x0201c;TargetsIn&#x0201d;</italic></bold> is a .tsv file containing prior knowledge of drug-target interactions with drugs in the rows and targets in the columns. This is generated in <bold>Step 1</bold>. <bold><italic>&#x0201c;TFsOut&#x0201d;</italic></bold> is the output file (Y)&#x000a0;of the model in .tsv file format, containing output TF activities. This is generated in <bold>Step 2</bold>. <bold><italic>&#x0201c;PKN&#x0201d;</italic></bold> is the prior knowledge signaling network which will be used as a scaffold for the neural network model. This is generated in <bold>Step 3</bold>, or you can provide a manually curated one. <bold><italic>&#x0201c;PknAnnotation&#x0201d;</italic></bold> is the Annotation file for the PKN, generated in <bold>Step 3</bold>, or you can provide a manually curated one. <bold><italic>&#x0201c;ChemicalSims&#x0201d;</italic></bold> is a .csv file containing chemical similarities between drugs in a matrix format. This is generated in <bold>Step 4</bold>.</p><sec id="sec3.1"><title>Retrieve drug-target interactions</title><p id="p0375">
<disp-quote id="disp0035"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0003c;30 s</bold></p></disp-quote>
</p><p id="p0380">Generally, for your own study, you need to:<list list-type="simple" id="olist0060"><list-item id="o0110"><label>1.</label><p id="p0385">Retrieve drug-target interactions from a database, e.g., DrugBank,<xref rid="bib10" ref-type="bibr"><sup>10</sup></xref> Broad&#x02019;s Institute Repurposing Hub.<xref rid="bib11" ref-type="bibr"><sup>11</sup></xref></p></list-item><list-item id="o0115"><label>2.</label><p id="p0390">Select the drugs that you use in your study.</p></list-item><list-item id="o0120"><label>3.</label><p id="p0395">Find which drugs&#x02019; targets that overlap with your prior knowledge network.</p></list-item><list-item id="o0125"><label>4.</label><p id="p0400">Use this to construct a DTI matrix, where rows are drugs and columns are targets.</p><p id="p0405">In this example tutorial<list list-type="simple" id="olist0070"><list-item id="o0130"><label>a.</label><p id="p0410">In the GitHub repository:<list list-type="simple" id="olist0075"><list-item id="o0135"><label>i.</label><p id="p0415">Go to the preprocessing/preprocessed_data/TrainingValidationData folder.</p></list-item><list-item id="o0140"><label>ii.</label><p id="p0420">Find the &#x0201c;<bold><italic>L1000_lvl3_allcells-drugs_targets_A375.tsv</italic></bold>&#x0201d; file that contains the available DTIs for the case study of using the approach for training models for the A375 cell line. You will need this file in the subsequent steps.<disp-quote id="disp0040"><p><bold><italic>Note:</italic></bold> You may use your own drug-target space, but make sure that the data are saved in the same format (i.e. binary matrix in a TSV file with drugs&#x02019; SMILES set as the names of the rows and targets&#x02019; UniProt IDs set as the names of the columns), namely: 1) a .tsv file, 2) the names of the rows are saved and are the available drugs, 3) the names of the columns are saved and are the names of the available targets.</p></disp-quote></p></list-item></list></p></list-item></list></p></list-item></list></p></sec><sec id="sec3.2"><title>Infer transcription factor activity</title><p id="p0425">
<disp-quote id="disp0045"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: 2&#x02013;30&#x000a0;min</bold></p></disp-quote>
</p><p id="p0430">This step is not necessary when using pre-compiled data from the original publication.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref> The TF activities are already inferred and pre-compiled in the &#x0201c;<bold><italic>TrimmedFinal_l1000_allgenes_lvl3_tfs.tsv</italic></bold>&#x0201d; file in the preprocessing/ preprocessed_data/ TrainingValidationData folder. Here, it is described how to infer TF activities from gene expression data, in case a user wants to use their own transcriptomic dataset or augment the data already available in the L1000 dataset, which was used in this study.<disp-quote id="disp0050"><p><bold><italic>Note:</italic></bold> The timing of this step is proportional to the number of samples you use. For example, for &#x0223c;10 000 samples with &#x0223c;10k genes measured it takes &#x0223c;2&#x000a0;min but for the &#x0223c;164 000 samples used from the level 3 data of the L1000 dataset it takes &#x0223c;32&#x000a0;min.</p></disp-quote></p><p id="p0435">A schematic explanation of the information flow for the algorithms of &#x0201c;<bold><italic>inferTFactivityCaseStudy.R&#x0201d;</italic></bold> (used to infer TF activity) is available in <xref rid="fig1" ref-type="fig">Figure&#x000a0;1</xref>A.<list list-type="simple" id="olist0080"><list-item id="o0145"><label>5.</label><p id="p0440">Open Rstudio (or a terminal where you can execute R scripts) and make sure the working directory is the preprocessing folder.<list list-type="simple" id="olist0085"><list-item id="o0150"><label>a.</label><p id="p0445">You can click on the preprocessing.Rproj file and this will start RStudio in the appropriate folder.</p></list-item><list-item id="o0155"><label>b.</label><p id="p0450">&#x0003e; getwd() can show the current working directory.</p></list-item><list-item id="o0160"><label>c.</label><p id="p0455">&#x0003e; setwd(dir) can change the current working directory to `dir`, which is the folder path of your choice.</p></list-item></list></p></list-item><list-item id="o0165"><label>6.</label><p id="p0460">Go to the `terminal` (not the console) section of RStudio and run the command:</p></list-item></list><boxed-text id="dtbox13"><p id="p0465">&#x0003e; Rscript inferTFactivityCaseStudy.R [inputGene] [outputTFsAct]</p></boxed-text><disp-quote id="disp0055"><p><bold><italic>Note: [inputGene]</italic></bold> is a file saved in .rds format containing the gene expression (you can&#x000a0;convert your CSV or TSV files using the CSV_TSV_to_RDS.R script located in the preprocessing folder), with gene names (as gene symbols) being at the rows and sample&#x000a0;names&#x000a0;at&#x000a0;the&#x000a0;columns. For the case of the L1000 dataset, you can use as input the following path:&#x000a0;'<bold><italic>preprocessed_data/l1000_all_genes_lvl3_drugs_with_targets_exemplar.rds</italic></bold>'. <bold><italic>[outputTFsAct]</italic></bold> is the file where the inferred TF activities will be saved in .rds format. The TF names are in the columns and sample names are now in the rows.</p></disp-quote><disp-quote id="disp0060"><p><bold><italic>Note:</italic></bold> The &#x02018;inputGeneExpr&#x02019; is the variable in the script that takes the value of the [inputGene] argument, and it contains the gene expression saved in .rds format in this case study. In case you have saved your gene expression in a different format use the appropriate command to read the file in line 13 (or you may convert your CSV or TSV files using the CSV_TSV_to_RDS.R script located in the preprocessing folder). Additionally, you may run everything line by line in RStudio but then you need to specify the input and output files in lines 10&#x02013;11.</p></disp-quote><disp-quote id="disp0065"><p><bold><italic>Note:</italic></bold> VIPER<xref rid="bib8" ref-type="bibr"><sup>8</sup></xref> which is used to infer transcription factors (TFs) activities outputs a normalized enrichment score (following a normal-like distribution) describing the activity of the TFs. Our framework requires TF activity to be within a range of zero to one, thus a sigmoid transformation is applied: TF_activities &#x0003c;- 1/(1+exp(-TF_activities)).</p></disp-quote><disp-quote id="disp0070"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> In case you get a memory error, see <xref rid="sec6.1" ref-type="sec">Troubleshooting 1</xref>.</p></disp-quote><disp-quote id="disp0075"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> The genes should be annotated with gene symbols (using the NCBI standard) throughout the whole tutorial and analysis.</p></disp-quote><fig id="fig1"><label>Figure&#x000a0;1</label><caption><p>Schematic description of the information flow of the algorithms used to (<bold>A)</bold> infer transcription factor activity from gene expression data, and (<bold>B)</bold> filter out conditions where the correlation between replicates is not higher than random</p></caption><graphic xlink:href="gr1"/></fig></p></sec><sec id="sec3.3"><title>Data filtering</title><p id="p0470">
<disp-quote id="disp0080"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;1&#x000a0;h for the L1000 dataset</bold></p></disp-quote>
</p><p id="p0475">This step is optional, but in case you want to filter the data to only keep high-quality samples and TFs, we created a process (<xref rid="fig1" ref-type="fig">Figure&#x000a0;1</xref>B) for filtering out samples based on poor correlation between technical replicates within the sample. To determine if the correlation between replicates is statistically significant, we build a null distribution of random correlations between TF activity profiles. More details on this process are discussed in the original publication by Meimetis et&#x000a0;al.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref><list list-type="simple" id="olist0090"><list-item id="o0170"><label>7.</label><p id="p0480">Open Rstudio (or a terminal where you can execute R scripts) and make sure the working directory is the preprocessing folder.</p></list-item><list-item id="o0175"><label>8.</label><p id="p0485">Go to the `terminal` (not the console) section of RStudio and run the command:</p></list-item></list><boxed-text id="dtbox14"><p id="p0490">&#x0003e;RscriptPreprocessTFactivityCaseStudy.R[inputTFsAct][preprocessedOutput]</p></boxed-text><disp-quote id="disp0085"><p><bold><italic>Note: [inputTFsAct]</italic></bold> is the file where the inferred TF activities are saved in .rds format. The TF names are in the columns and the sample names at the rows. <bold><italic>[preprocessedOutput]</italic></bold> is the file where the preprocessed and filtered TF activities will be saved in. tsv format. The TF names are in the columns and sample names are in the rows.</p></disp-quote><disp-quote id="disp0090"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> The whole script uses specific identifiers and data structures of the L1000 dataset, especially lines 20&#x02013;37. For example, it calculates the correlation between replicates and aggregates them by assuming that each replicate is identified by a unique `inst_id`, while each condition consisting of multiple replicates is identified by a unique `sig_id`. These are identifiers unique to the L1000 and they are called and used by the functions. Other L1000-specific variables are also called in this script. Several core ideas from this optional preprocessing step could in principle be applied to other datasets, such as comparisons of intra-condition correlations with null distributions, but in general, preprocessing is dependent on the structure and design choices of the researchers that generated the dataset. Always what is required is some kind of sample ID (e.g. `inst_id` in the L1000) and condition ID (e.g. `sig_id` in the L1000).</p></disp-quote><disp-quote id="disp0095"><p><bold><italic>Note:</italic></bold> We suggest running preprocessing in a computer cluster, otherwise you might get a memory error (see <xref rid="sec6.1" ref-type="sec">Troubleshooting 1</xref>) or it will take a lot of time without enough computing power.</p></disp-quote></p></sec><sec id="sec3.4"><title>Extract a prior knowledge signaling network</title><p id="p0495">
<disp-quote id="disp0100"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;5&#x000a0;min</bold></p></disp-quote>
</p><p id="p0500">In this step, you will generate prior knowledge networks (PKNs) that will serve as the scaffolds for your model. We provide scripts for extracting a network from the OmniPath<xref rid="bib12" ref-type="bibr"><sup>12</sup></xref> resource, but you may use your own network following the same syntax. Starting with ligand-receptor interactions, you will extract, curate (<xref rid="fig2" ref-type="fig">Figure&#x000a0;2</xref>), and trim (<xref rid="fig3" ref-type="fig">Figure&#x000a0;3</xref>) the networks, then similarly you will curate and trim a prior knowledge signaling network of signaling. <bold>If you want to use the same networks as Meimetis</bold> et&#x000a0;al. <bold>used in their study</bold><xref rid="bib1" ref-type="bibr"><bold><sup>1</sup></bold></xref><bold>, you may skip this step and use the files that have already been generated in GitHub</bold>.<list list-type="simple" id="olist0095"><list-item id="o0180"><label>9.</label><p id="p0505">Visit the web page of OmniPath and retrieve the latest version (in the tutorial this is already retrieved and saved in the data folder): <ext-link ext-link-type="uri" xlink:href="https://archive.omnipathdb.org" id="intref0155">https://archive.omnipathdb.org</ext-link>. In this tutorial this is saved as omnipath_webservice_interactions__recent.tsv in the data folder.</p></list-item><list-item id="o0185"><label>10.</label><p id="p0510">Open a terminal where you can run Python scripts and navigate to the preprocessing folder.</p></list-item><list-item id="o0190"><label>11.</label><p id="p0515">Extract Ligand-Receptor interactions from OmniPath<xref rid="bib12" ref-type="bibr"><sup>12</sup></xref> and automatically save the result:</p></list-item></list><boxed-text id="dtbox15"><p id="p0520">&#x0003e; python ./extractRL.py --RLFull file1.tsv --RL file2.tsv --species 9606 --WholePKN file3.tsv--add_curation file4.tsv --remove_curation file5.tsv --edit_curation file6.tsv</p></boxed-text><disp-quote id="disp0105"><p><bold><italic><underline>Note:</underline></italic></bold> &#x0201c;species&#x0201d; denotes the species id, with default&#x000a0;= 9606, which is the id for human interactions. &#x0201c;RLFull&#x0201d; denotes all receptor-ligand interactions in. tsv format (default&#x000a0;= preprocessed_data/PKN/RLFull.tsv). &#x0201c;add_curation&#x0201d; are the interactions to manually add (default&#x000a0;= preprocessed_data/RL/add.tsv).&#x0201c;remove_curation&#x0201d; are the interactions to manually remove (default&#x000a0;= preprocessed_data/RL/remove.tsv). &#x0201c;edit_curation&#x0201d; are the interactions to manually edit (default&#x000a0;= preprocessed_data/RL/edit.tsv). &#x0201c;RL&#x0201d; are the receptors-ligands in .tsv format filtered (default&#x000a0;= preprocessed_data/PKN/RL.tsv). &#x0201c;WholePKN&#x0201d; denotes the whole retrieved prior knowledge network of signaling that is used to construct the PKN that will be used in the model (default&#x000a0;= ../data/omnipath_webservice_interactions__recent.tsv).</p></disp-quote><disp-quote id="disp0110"><p><bold><italic>Note:</italic></bold> You can keep all the default arguments and manually edit the add.tsv, remove.tsv, and edit.tsv files (which are initially empty) <bold>in the RL folder</bold> to curate some receptor-ligand interactions.</p></disp-quote><disp-quote id="disp0115"><p><bold><italic>Note:</italic></bold> In line 24 we keep interactions only from specific sources in the OmniPath database.<xref rid="bib12" ref-type="bibr"><sup>12</sup></xref> If you want to change that you need to modify these lines.</p></disp-quote><list list-type="simple" id="olist0100"><list-item id="o0195"><label>12.</label><p id="p0525">Extract the raw network from OmniPath<xref rid="bib12" ref-type="bibr"><sup>12</sup></xref> and automatically save the result:</p></list-item></list><boxed-text id="dtbox16"><p id="p0530">&#x0003e; python ./extractPKN.py --species_id file1.tsv --add_curation file2.tsv --remove_curation file3.tsv --edit_curation file4.tsv --pknFull file5.tsv --pknUniprot file6.tsv --RLinteractions file7.tsv --WholePKN file8.tsv</p></boxed-text><disp-quote id="disp0120"><p><bold><italic>Note:</italic></bold> &#x0201c;species_id&#x0201d; denotes the species id, with default&#x000a0;= 9606, which is the id for human interactions. &#x0201c;add_curation&#x0201d; are the interactions to manually add (default&#x000a0;= preprocessed_data/PKN/add.tsv).&#x0201c;remove_curation&#x0201d; are the interactions to manually remove (default&#x000a0;= preprocessed_data/PKN/remove.tsv). &#x0201c;edit_curation&#x0201d; are the interactions to manually edit (default&#x000a0;= preprocessed_data/PKN/edit.tsv). &#x0201c;RLinteractions&#x0201d; are the receptors-ligands in .tsv format filtered (default&#x000a0;= preprocessed_data/PKN/RL.tsv). &#x0201c;pknFull&#x0201d; are all the kept interactions before trimming in .tsv format (default&#x000a0;= preprocessed_data/PKN/pknFull.tsv). &#x0201c;pknUniprot&#x0201d; are all the kept interactions with UniProt IDs in .tsv format (default&#x000a0;= preprocessed_data/PKN/pkn.tsv). &#x0201c;WholePKN&#x0201d; is the whole retrieved prior knowledge network of signaling that is used to construct the PKN that will be used in the model (default&#x000a0;= ../data/omnipath_webservice_interactions__recent.tsv).</p></disp-quote><disp-quote id="disp0125"><p><bold><italic>Note:</italic></bold> You can keep all the default arguments and manually change the add.tsv, remove.tsv, and edit.tsv files (which are initially empty) <bold>in the PKN folder</bold> to curate some interactions.</p></disp-quote><disp-quote id="disp0130"><p><bold><italic>Note:</italic></bold> In line 39 we keep interactions only from specific sources in the OmniPath database.<xref rid="bib12" ref-type="bibr"><sup>12</sup></xref> If you want to change that you need to modify these lines.</p></disp-quote><list list-type="simple" id="olist0105"><list-item id="o0200"><label>13.</label><p id="p0535">Keep TFs, drugs, and targets that can be connected to the PKN, and save parts of the PKN to forcefully keep even after trimming (<xref rid="fig3" ref-type="fig">Figure&#x000a0;3</xref>A):</p></list-item></list><boxed-text id="dtbox17"><p id="p0540">&#x0003e; python ./ConnectData2PKN.py --pknPath pnkFile.tsv --DTIpath DTIFile.tsv --Tfpath input1.tsv --targetedTFs output1.tsv --forced2keep output2.tsv --outTrimmedTFs output3.tsv --outTrimmedDTIs output4.tsv</p></boxed-text><disp-quote id="disp0135"><p><bold><italic>Note:</italic></bold> &#x0201c;pknPath&#x0201d; is the untrimmed PKN file in .tsv format (default&#x000a0;= preprocessed_data/PKN/pkn.tsv). &#x0201c;DTIpath&#x0201d; is the untrimmed drug-target interactions in long format saved in .tsv format (default&#x000a0;= preprocessed_data/PKN/L1000_lvl3_DT.tsv). &#x0201c;TFpath&#x0201d; is the untrimmed TF activity file in .tsv format. &#x0201c;targetedTFs&#x0201d; is the path to save TFs that are directly targeted by a drug in .tsv format. &#x0201c;forced2keep&#x0201d; is the path to save PKN parts forcefully kept because they contain targeted TFs. &#x0201c;outTrimmedTFs&#x0201d; is the path to re-save TF activities, trimmed to include only TFs in the PKN. &#x0201c;outTrimmedDTIs&#x0201d; is the path to re-save DTIs, trimmed to include only drugs with targets in the PKN.</p></disp-quote><list list-type="simple" id="olist0110"><list-item id="o0205"><label>14.</label><p id="p0545">Reduce the network to contain only interactions from specific sources, trim disconnected parts and dead-ends, keep drug/targets and TFs that are in the network, and automatically save the result (<xref rid="fig3" ref-type="fig">Figure&#x000a0;3</xref>B):</p></list-item></list><boxed-text id="dtbox18"><p id="p0550">&#x0003e; python ./trimPKN.py --coreSources s1 s2 s3 s4 --pknUniprot file1.tsv --RLinteractions file2.tsv --DTIpath file3.tsv --TFpath file4.tsv --targetedTFs file5.tsv --forced2keep file6.tsv --TrimmedTFpath outFile1.tsv --FinalPKN outFile2.tsv --FinalPKNAnnotation outFile3.tsv</p></boxed-text><disp-quote id="disp0140"><p><bold><italic>Note:</italic></bold> &#x0201c;pknUniprot&#x0201d; are all the kept interactions with Uniprot ids in .tsv format (default&#x000a0;= preprocessed_data/PKN/pkn.tsv). &#x0201c;RLinteractions&#x0201d; are the receptors-ligands in .tsv format filtered (default&#x000a0;= preprocessed_data/PKN/RL.tsv).&#x0201c;DTIpath&#x0201d; are the trimmed drug-target interactions in long format saved in .tsv format (default&#x000a0;= preprocessed_data/PKN/L1000_lvl3_DT.tsv). &#x0201c;targetedTFs&#x0201d; is the path to load TFs that are directly targeted by a drug in .tsv format (default&#x000a0;= preprocessed_data/TF_activities/tfs_targetd_alls_genes_lvl3.tsv). &#x0201c;forced2keep&#x0201d; is the path to load PKN parts to forcefully keep because it contains targeted TFs (default&#x000a0;= preprocessed_data/PKN/L1000_latest_Add_lvl3.tsv). &#x0201c;TFpath&#x0201d; are the input TF activities to be finally trimmed. &#x0201c;TrimmedTFpath&#x0201d; is the final trimmed TF activity file in .tsv format. &#x0201c;FinalPKN&#x0201d; is the final, trimmed PKN file in .tsv format. &#x0201c;FinalPKNAnnotation&#x0201d; is the final, trimmed annotation file for the PKN in .tsv format.</p></disp-quote><disp-quote id="disp0145"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> The drug-target interaction files used here are not the files used to train the model. That file needs to be in long format (not matrix format) and has been modified to include control conditions (such as DMSO, PBS, etc.). You may use the script located inside the preprocessing folder (MatrixLongFormatConversion.py) to convert your drug-target interaction file from matrix to long format, and vice versa.</p></disp-quote><fig id="fig2"><label>Figure&#x000a0;2</label><caption><p>Schematic description of the information flow of the algorithms used to extract a prior knowledge network (PKN) and receptor-ligand interactions</p></caption><graphic xlink:href="gr2"/></fig><fig id="fig3"><label>Figure&#x000a0;3</label><caption><p>Schematic description of the information flow of the algorithms used to generate and trim the (<bold>A)</bold> prior drug-target interactions and (<bold>B)</bold> the final PKN, that will be used as the scaffold for the signaling part of the modeling</p></caption><graphic xlink:href="gr3"/></fig><fig id="fig4"><label>Figure&#x000a0;4</label><caption><p>The calculated activity of the TFs compared with the predicted off-target effects alongside a confidence score from derived from the ensemble performance in training for each TF</p><p>Each point corresponds to a specific drug-TF pair.</p></caption><graphic xlink:href="gr4"/></fig></p></sec><sec id="sec3.5"><title>Train cell-line-specific models</title><p id="p0555">
<disp-quote id="disp0150"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;6.5&#x000a0;h per model</bold></p></disp-quote>
</p><p id="p0560">In this step, you will train models to predict the TF activity of drug perturbations in a specific cell line, utilizing in the process the chemical similarity between drugs and their known targets, in a pre-defined drug-target space (pseudo-code in <xref rid="tbl1" ref-type="table">Table&#x000a0;1</xref>).<disp-quote id="disp0155"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> Before beginning it is essential to calculate all chemical similarities and have obtained all necessary input files, either manually or via the previous steps, 5&#x02013;6 files:</p></disp-quote><table-wrap position="float" id="tbl1"><label>Table&#x000a0;1</label><caption><p>Pseudo-code for training a DT-LEMBAS model corresponding to the DTLembasTrainOneCaseStudy.py script</p></caption><table frame="hsides" rules="groups"><tbody><tr><td><bold>Input:</bold><break/>&#x027a2; <inline-formula><mml:math id="M3" altimg="si4.gif"><mml:mrow><mml:msub><mml:mi mathvariant="bold-italic">X</mml:mi><mml:mi mathvariant="bold-italic">i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, [bs x d] matrix for bs samples (same as the batch size bs) and d available drugs with each drug&#x02019;s concentration for a given sample.<break/>&#x027a2; <inline-formula><mml:math id="M4" altimg="si5.gif"><mml:mrow><mml:mi mathvariant="bold-italic">d</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">u</mml:mi><mml:mi mathvariant="bold-italic">g</mml:mi><mml:mi mathvariant="bold-italic">L</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi></mml:mrow></mml:math></inline-formula>, the layer of DT-LEMBAS that generates perturbation signal on potential targets, given drugs&#x02019; concentrations.<break/>&#x027a2; <inline-formula><mml:math id="M5" altimg="si6.gif"><mml:mrow><mml:mi mathvariant="bold-italic">L</mml:mi><mml:mi mathvariant="bold-italic">E</mml:mi><mml:mi mathvariant="bold-italic">M</mml:mi><mml:mi mathvariant="bold-italic">B</mml:mi><mml:mi mathvariant="bold-italic">A</mml:mi><mml:mi mathvariant="bold-italic">S</mml:mi></mml:mrow></mml:math></inline-formula>, the signaling layer of DT-LEMBAS that takes as input a signal matrix<inline-formula><mml:math id="M6" altimg="si7.gif"><mml:mrow><mml:msub><mml:msub><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mrow><mml:mi mathvariant="bold-italic">i</mml:mi><mml:mi mathvariant="bold-italic">n</mml:mi></mml:mrow></mml:msub><mml:mi mathvariant="bold-italic">i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>[bs x t], where t is the number of available targets, and predicts the activity of signaling nodes (<inline-formula><mml:math id="M7" altimg="si8.gif"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mi mathvariant="bold-italic">f</mml:mi><mml:mi mathvariant="bold-italic">u</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi></mml:mrow><mml:mi mathvariant="bold-italic">i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>) and transcription factors (<inline-formula><mml:math id="M8" altimg="si9.gif"><mml:mrow><mml:msub><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mi mathvariant="bold-italic">i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>).<break/><bold>Output:</bold><break/>&#x027a2; <inline-formula><mml:math id="M9" altimg="si8.gif"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mi mathvariant="bold-italic">f</mml:mi><mml:mi mathvariant="bold-italic">u</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi></mml:mrow><mml:mi mathvariant="bold-italic">i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, [bs x n] matrix for bs samples (same as the batch size bs) and n dimensions for the number of signaling nodes, containing the activity of signaling nodes.<break/>&#x027a2; <inline-formula><mml:math id="M10" altimg="si9.gif"><mml:mrow><mml:msub><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mi mathvariant="bold-italic">i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, [bs x m] matrix for bs samples and m TFs containing the predicted TF activity.<break/>&#x027a2; <inline-formula><mml:math id="M11" altimg="si10.gif"><mml:mrow><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi></mml:mrow></mml:math></inline-formula>, the value of the objective function used to train the model.<break/>&#x027a2; Updated weights for all parts of the model.<break/><bold>for</bold> epochs <bold>steps:</bold><break/>&#x000a0;<bold>for</bold> batches <bold>steps:</bold><break/>&#x000a0;<inline-formula><mml:math id="M12" altimg="si11.gif"><mml:mrow><mml:mi mathvariant="bold-italic">X</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mspace width="0.25em"/><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo></mml:mrow></mml:math></inline-formula>get data for the current batch<break/><inline-formula><mml:math id="M13" altimg="si12.gif"><mml:mrow><mml:msub><mml:mrow><mml:mspace width="0.25em"/><mml:mi>Y</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="0.25em"/><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mspace width="0.25em"/><mml:mi>d</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi><mml:mi>L</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi mathvariant="bold-italic">X</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><italic># calculate perturbation signal</italic><break/><inline-formula><mml:math id="M14" altimg="si13.gif"><mml:mrow><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="0.25em"/><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mspace width="0.25em"/><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mspace width="0.25em"/><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>l</mml:mi><mml:mi>y</mml:mi><mml:mspace width="0.25em"/><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="0.25em"/><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mspace width="0.25em"/><mml:mi>a</mml:mi><mml:mspace width="0.25em"/><mml:mi>v</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mspace width="0.25em"/><mml:mi>w</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mspace width="0.25em"/><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.25em"/><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>z</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.25em"/><mml:mi>o</mml:mi><mml:mi>f</mml:mi><mml:mspace width="0.25em"/><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>l</mml:mi><mml:mspace width="0.25em"/><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>n</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mspace width="0.25em"/><mml:mi>n</mml:mi><mml:mi>o</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M15" altimg="si14.gif"><mml:mrow><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="0.25em"/><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">+</mml:mo><mml:msub><mml:mi>&#x003bb;</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mi>o</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02217;</mml:mo><mml:mi>N</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M16" altimg="si15.gif"><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mi mathvariant="bold-italic">f</mml:mi><mml:mi mathvariant="bold-italic">u</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi mathvariant="bold-italic">L</mml:mi><mml:mi mathvariant="bold-italic">E</mml:mi><mml:mi mathvariant="bold-italic">M</mml:mi><mml:mi mathvariant="bold-italic">B</mml:mi><mml:mi mathvariant="bold-italic">A</mml:mi><mml:mi mathvariant="bold-italic">S</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mrow><mml:mi mathvariant="bold-italic">i</mml:mi><mml:mi mathvariant="bold-italic">n</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><inline-formula><mml:math id="M17" altimg="si16.gif"><mml:mrow><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>m</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mi>Y</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M18" altimg="si17.gif"><mml:mrow><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>r</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">+</mml:mo><mml:mi>S</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>n</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mspace width="0.25em"/><mml:mi>R</mml:mi><mml:mi>e</mml:mi><mml:mi>g</mml:mi><mml:mi>u</mml:mi><mml:mi>l</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>i</mml:mi><mml:mi>z</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">+</mml:mo><mml:mi>D</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi><mml:mspace width="0.25em"/><mml:mi>L</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mspace width="0.25em"/><mml:mi>R</mml:mi><mml:mi>e</mml:mi><mml:mi>g</mml:mi><mml:mi>u</mml:mi><mml:mi>l</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>i</mml:mi><mml:mi>z</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M19" altimg="si18.gif"><mml:mrow><mml:mi mathvariant="bold-italic">c</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">c</mml:mi><mml:mi mathvariant="bold-italic">u</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">t</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mspace width="0.25em"/><mml:mi mathvariant="bold-italic">g</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">d</mml:mi><mml:mi mathvariant="bold-italic">i</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">n</mml:mi><mml:mi mathvariant="bold-italic">t</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mspace width="0.25em"/><mml:mi mathvariant="bold-italic">w</mml:mi><mml:mi mathvariant="bold-italic">i</mml:mi><mml:mi mathvariant="bold-italic">t</mml:mi><mml:mi mathvariant="bold-italic">h</mml:mi><mml:mspace width="0.25em"/><mml:mi mathvariant="bold-italic">b</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">c</mml:mi><mml:mi mathvariant="bold-italic">k</mml:mi><mml:mi mathvariant="bold-italic">p</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">p</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">g</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">t</mml:mi><mml:mi mathvariant="bold-italic">i</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">n</mml:mi></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M20" altimg="si19.gif"><mml:mrow><mml:mi mathvariant="bold-italic">u</mml:mi><mml:mi mathvariant="bold-italic">p</mml:mi><mml:mi mathvariant="bold-italic">d</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">t</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mspace width="0.25em"/><mml:mi mathvariant="bold-italic">w</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">i</mml:mi><mml:mi mathvariant="bold-italic">g</mml:mi><mml:mi mathvariant="bold-italic">h</mml:mi><mml:mi mathvariant="bold-italic">t</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi></mml:mrow></mml:math></inline-formula></td></tr></tbody></table><table-wrap-foot><fn><p>For a detailed description of the regularization terms, refer to the Meimetis et&#x000a0;al. publication.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p></fn></table-wrap-foot></table-wrap></p><p id="p0565">&#x000a0;DrugsIn: A .tsv file containing the input drug concentration, with samples in the rows and the pre-defined drugs in the columns.</p><p id="p0570">&#x000a0;TargetsIn: A .tsv file containing prior knowledge of drug-target interactions with drugs in the rows and targets in the columns</p><p id="p0575">&#x000a0;TFsOut: A .tsv file containing output TF activities, with samples in the rows and TFs in the columns</p><p id="p0580">&#x000a0;ChemicalSims: A .csv file containing chemical similarities between drugs in a matrix format with the smiles of the drugs being the columns&#x02019; and rows&#x02019; names. This file should be located in the ChemicalSims folder in the preprocessing folder of the GitHub repository, and instructions on creating are given below.</p><p id="p0585">&#x000a0;PKN: The prior knowledge signaling network which will be used as a scaffold for the neural network model. This should have been generated in the previous steps, or you can provide a manually curated one.</p><p id="p0590">&#x000a0;PknAnnotation: Annotation file for the PKN, also generated in the previous step.</p><p id="p0595">To calculate chemical similarities:<list list-type="simple" id="olist0115"><list-item id="o0210"><label>15.</label><p id="p0600">Open a terminal where you can run Python and go to the ChemicalSims folder in the preprocessing folder of the GitHub repository.</p></list-item><list-item id="o0215"><label>16.</label><p id="p0605">Create a .csv file with one column named &#x02018;smiles&#x02019; containing the SMILES of the drugs for which you want to calculate pairwise chemical similarities and save it in the ChemicalSims folder.</p></list-item><list-item id="o0220"><label>17.</label><p id="p0610">Run python ./<bold>smiles_similarity_ecfp4.py</bold> and follow the instructions that will be presented on your screen.</p></list-item></list></p><p id="p0615">If all the requirements are satisfied you are ready to train a model.<list list-type="simple" id="olist0120"><list-item id="o0225"><label>18.</label><p id="p0620">Open a terminal where you can run Python and go to the learning folder of the GitHub repository.</p></list-item><list-item id="o0230"><label>19.</label><p id="p0625">Run the command:</p></list-item></list><boxed-text id="dtbox19"><p id="p0630">&#x0003e;python ./ DTLembasTrainOneCaseStudy.py --DrugsIn file1 --TargetsIn file2 --TFsOut file3 --ChemicalSims file4 --PKN file5 --PknAnnotation file6 --res_dir folder --outPattern modelCellLineX --no 1</p></boxed-text><disp-quote id="disp0160"><p><bold><italic>Note:</italic></bold> The <bold><italic>&#x0201c;DrugsIn&#x0201d;</italic></bold>, <bold><italic>&#x0201c;TargetsIn&#x0201d;</italic></bold>, <bold><italic>&#x0201c;TFsOut&#x0201d;</italic></bold>, <bold><italic>&#x0201c;ChemicalSims&#x0201d;</italic></bold>, <bold><italic>&#x0201c;PKN&#x0201d;</italic></bold>, and <bold><italic>&#x0201c;PknAnnotation&#x0201d;</italic></bold> arguments have been explained above.<bold><italic>&#x0201c;res_dir&#x0201d;</italic></bold> should be a folder path to save trained models and output some figures of the training performance, loss, and other model diagnostics. <bold><italic>&#x0201c;outPattern&#x0201d;</italic></bold> is the pattern/name (without the file extension and model number) that will be used when saving multiple models and figures for this specific case study. <bold><italic>&#x0201c;no&#x0201d;</italic></bold> is an integer number serving as an identifier to denote which one of the multiple models of the ensemble is currently being trained.</p></disp-quote><list list-type="simple" id="olist0125"><list-item id="o0235"><label>20.</label><p id="p0635">After training <bold>at least 20 models (we have run 50 for 33 cell lines)</bold>, to later use as an ensemble of neural networks to make predictions, run the command:</p></list-item></list><boxed-text id="dtbox20"><p id="p0640"><bold>&#x0003e;python ./CellLineSpecificEvalEnsembleALL.py, with the correct arguments</bold> (these arguments correspond to file paths and parameters such as the number of models in the ensemble) to evaluate how well the model fits the training data. The performance is stored in <bold><italic>[CellPrefix]_trainPerformance_perTF.csv</italic></bold> at a designated results&#x02019; directory.</p></boxed-text><disp-quote id="disp0165"><p><bold><italic>Note:</italic></bold> There is another argument available which is --<bold><italic>model_type</italic></bold> and the default value is 4. This was used to test a couple of different variations of the drug module in the original study.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref> The best one that was further used was denoted as model_type 4, and thus it is suggested to keep this always with the default value.</p></disp-quote><disp-quote id="disp0170"><p><bold><italic>Note:</italic></bold> Well-fitted TFs with a high chance of generalization correspond to the top 25% of TFs in terms of performance (more than &#x0223c;0.4 Pearson correlation across models and cell lines) and poorly-fitted TFs whose predictions should not be trusted correspond to less than &#x0223c;0.2 correlation in training.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p></disp-quote><disp-quote id="disp0175"><p><bold><italic>Note:</italic></bold> Our approach requires training an ensemble of multiple models. The training script can be submitted as a batch job using a job scheduler (<bold>e.g. using Slurm</bold>) to a single-threaded computer cluster of CPU nodes, enabling this way the parallelized training of multiple models. To achieve this, the user needs to create a shell script containing commands involved in executing the job. For example, a script named <bold>train.sh</bold> be created with the following lines inside of it (comments inside the parentheses should be deleted):</p></disp-quote><boxed-text id="dtbox21"><p id="p0645">#!/bin/bash</p><p id="p0650">#SBATCH -N 1 (number of nodes to use)</p><p id="p0655">#SBATCH -n 16 (number of CPUs per node to use)</p><p id="p0660">#SBATCH --mail-type=ALL (sent email notifications regarding the job)</p><p id="p0665">#SBATCH --mail-user=user@mit.edu (email for notification to be sent to)</p><p id="p0670">#SBATCH --array=0-49 (array of jobs submitted, equal the number of models)</p><p id="p0675">#############################################</p><p id="p0680"># Load module</p><p id="p0685">module load miniconda3/v4</p><p id="p0690">source /home/software/conda/miniconda3/bin/condainit</p><p id="p0695">conda activate ann</p><p id="p0700">python3 ./DTLembasTrainOneCaseStudy.py --DrugsIn &#x02032;../data/L1000_lvl3_A375-conditions_drugs.tsv&#x02032;--TargetsIn &#x02032;../data/L1000_lvl3_ A375-drugs_targets.tsv&#x02032; --TFsOut &#x02032;../data/TrimmedFinal_l1000_allgenes_lvl3_tfs.tsv&#x02032; --ChemicalSims &#x02032;../preprocessing/preprocessed_data/ChemicalSims/lvl3_similarities_ A375.csv&#x02032; --res_dir &#x02032;case_study&#x02032; --outPattern "l1000_latest_model_modeltype4_ A375_case_study" --model_type 4 --no $SLURM_ARRAY_TASK_ID</p></boxed-text></p><p id="p0705">Then to submit the jobs, a user can run:<boxed-text id="dtbox22"><p id="p0710">&#x0003e; sbatch train.sh</p></boxed-text></p></sec><sec id="sec3.6"><title>Extract inferred drug-target interactions</title><p id="p0715">
<disp-quote id="disp0180"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;4&#x000a0;min per model</bold></p></disp-quote>
</p><p id="p0720">In this step, you will extract the inferred DTIs that can explain the TF activity output, that the model learned through training (pseudo-code in <xref rid="tbl2" ref-type="table">Table&#x000a0;2</xref>).<list list-type="simple" id="olist0130"><list-item id="o0240"><label>21.</label><p id="p0725">Navigate to the MoA folder of the GitHub repository and open a terminal where you can run Python.</p></list-item><list-item id="o0245"><label>22.</label><p id="p0730">Run the following command to extract drug-target interaction scores (using integrated gradients<xref rid="bib4" ref-type="bibr"><sup>4</sup></xref>):</p></list-item></list><boxed-text id="dtbox23"><p id="p0735">&#x0003e; python ./inferEnsembleScoreCaseStudy.py --ensembles_path foler1 --inputPattern modelCellLineX --numberOfModels 50 --drugInputFile file1 --drugTargetsFile file2 --TFOutFile file3 --drugSimilarityFile file4 --interactionsPath folder2 --Y_ALL_path folder3/Y_ALL.pt --Y_ALL_masked_path folder3/Y_ALL_masked.pt --ig_n_steps 10</p></boxed-text><disp-quote id="disp0185"><p><bold><italic>Note: &#x0201c;ensembles_path&#x0201d;</italic></bold> should be the path to the ensemble of saved models. <bold><italic>&#x0201c;inputPattern&#x0201d;</italic></bold> The pattern/name (without the file extension and model number) that was used when saving multiple models for this specific case study. <bold><italic>&#x0201c;numberOfModels&#x0201d;</italic></bold> is the number of models that were trained in the ensemble (default&#x000a0;= 50). <bold><italic>&#x0201c;drugInputFile&#x0201d;</italic></bold> is the same .tsv file that was used for training the models, containing the input drug concentration, with samples in the rows and the pre-defined drugs in the columns. <bold><italic>&#x0201c;drugTargetsFile&#x0201d;</italic></bold> is the same .tsv file that was used for training the models, containing prior knowledge of drug-target interactions with drugs in the rows and targets in the columns. <bold><italic>&#x0201c;TFOutFile&#x0201d;</italic></bold> is the same .tsv file that was used for training the models, containing output TF activities, with samples in the rows and TFs in the columns. <bold><italic>&#x0201c;drugSimilarityFile&#x0201d;</italic></bold> is the same .csv file that was used for training the models, containing chemical similarities between drugs in a matrix format with the smiles of the drugs being the columns&#x02019; and rows&#x02019; names. <bold><italic>&#x0201c;interactionsPath&#x0201d;</italic></bold> should be the path of the folder to save .csv files containing drug-target interaction scores for every model. <bold><italic>&#x0201c;Y_ALL_path&#x0201d;</italic></bold> is the full path and filename, to save a .pt (pytorch tensor) file, containing predicted values of training data by the models. It has dimensions [numberOfModels , # samples, # TFs] . <bold><italic>&#x0201c;Y_ALL_masked_path&#x0201d;</italic></bold> is the full path and filename, to save a .pt (pytorch tensor) file, containing predicted values of training data when masking out potential interactions based on their integrated gradient score and specified threshold to binarize interactions. The dimensions of this tensor are [numberOfModels, # thresholds, # samples, # TFs]. <bold><italic>&#x0201c;ig_n_steps&#x0201d;</italic></bold> is the number of points to be used in the integral when using the integrated gradients approach (default&#x000a0;= 10, <bold>should not be less than 10</bold>).</p></disp-quote><disp-quote id="disp0190"><p><bold><italic>Note:</italic></bold> The score thresholds tested are 50 and range from 10<sup>-3.5</sup> to 10<sup>3.5</sup> in a logarithmic space. These same thresholds are used again in the next step of extracting drug-target interactions. If you experience issues with the speed of this process, or perhaps you want higher granularity in the calculated error later check <xref rid="sec6.3" ref-type="sec">Troubleshooting 2</xref>.</p></disp-quote><list list-type="simple" id="olist0135"><list-item id="o0250"><label>23.</label><p id="p0740">Run the following command to ultimately extract binary drug-target interaction and the threshold for inferring them <bold>for each drug,</bold> which corresponds to an average error increase of 25% in predicting TF activity for each drug:</p></list-item></list><boxed-text id="dtbox24"><p id="p0745">&#x0003e; python ./InferDTICaseStudy.py --ensembles_path foler1 --inputPattern modelCellLineX --numberOfModels 50 --drugInputFile file1 --drugTargetsFile file2 --TFOutFile file3 --drugSimilarityFile file4 --Y_ALL_path folder3/Y_ALL.pt --Y_ALL_masked_path folder3/Y_ALL_masked.pt --interactionsPath folder2 --error_threshold 0.25</p></boxed-text><disp-quote id="disp0195"><p><bold><italic>Note:</italic></bold> All the arguments with the same name as before have already been explained, and you can use the same again.</p></disp-quote><disp-quote id="disp0200"><p><bold><italic>Note:</italic> &#x0201c;--<italic>error_threshold</italic></bold>&#x0201d;: The maximum allowable average error increase across all TFs when masking out interactions, which leads to identifying the appropriate interaction score threshold for each drug.</p></disp-quote><disp-quote id="disp0205"><p><bold><italic>Note:</italic></bold> This script saves the thresholds to consider interactions for each drug and all inferred binary interactions in the folder of ensembles_path.</p></disp-quote><disp-quote id="disp0210"><p><bold><italic>Note:</italic></bold> Similar to the Meimetis et&#x000a0;al.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref> publication, to benchmark the inference of drug-target interactions (DTIs) you may use an external drug-target interaction dataset, where DTI inference is treated as a binary classification problem. This means they may use accuracy and F1 score to evaluate the performance in inferring DTIs, as well as to tune different thresholds selected for inferring interactions. However, since in this formulation of the problem the true negatives (no interaction between drug and target) are not really well known, we recommend the user to also inspect the rate of discovering new interactions, since for studying off-target effects it is expected to infer new interactions and not only reproducing prior knowledge. More details and extensive benchmarking can be found in the original publication.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p></disp-quote><disp-quote id="disp0215"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> In case you have multiple control conditions or generally duplicate conditions the script calculates a threshold for each one of the multiple instances of the perturbation returns the average threshold. In this case study (as well as the original work by Meimetis et&#x000a0;al.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref>) this happens only in the case of DMSO. This script however will not work in the case of drug combinations, and generally, the approach has not been benchmarked for the case of drug combinations at all.</p></disp-quote><disp-quote id="disp0220"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> The inferEnsembleScoreCaseStudy.py will automatically utilize a GPU if available to calculate the drug-target interaction scores. <bold>The timing denoted here is for the GPU implementation. In the absence of a GPU</bold>, for this specific drug module which is also linear, the user can calculate the same score by performing all appropriate linear algebra calculations (pseudo-code in <xref rid="tbl3" ref-type="table">Table&#x000a0;3</xref>) by running:</p></disp-quote><boxed-text id="dtbox25"><p id="p0750">&#x0003e; python ./ InferInteractionScoresLinAlg.py --ensembles_path foler1 --inputPattern modelCellLineX --numberOfModels 50 --drugInputFile file1 --drugTargetsFile file2 --TFOutFile file3 --drugSimilarityFile file4 --interactionsPath folder2 --Y_ALL_path folder3/Y_ALL.pt --Y_ALL_masked_path folder3/Y_ALL_masked.pt.</p></boxed-text><table-wrap position="float" id="tbl2"><label>Table&#x000a0;2</label><caption><p>Pseudo-code for extracting inferred drug-target interactions from DT-LEMBAS, using integrated gradients, corresponding to inferEnsembleScoreCaseStudy.py and InferDTICaseStudy.py</p></caption><table frame="hsides" rules="groups"><tbody><tr><td><bold>Input:</bold><break/>&#x027a2; Input drug concentrations<inline-formula><mml:math id="M21" altimg="si20.gif"><mml:mrow><mml:mi mathvariant="bold-italic">X</mml:mi></mml:mrow></mml:math></inline-formula>, [N x d] matrix with N samples and d available drugs with each drug&#x02019;s concentration for the a given sample.<break/>&#x027a2; <inline-formula><mml:math id="M22" altimg="si21.gif"><mml:mrow><mml:mi mathvariant="bold-italic">m</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">d</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi></mml:mrow></mml:math></inline-formula>, a whole DT-LEMBAS model, with pseudo-classed drugLayer denoting, only the drug layer part of DT-LEMBAS, and LEMBAS denoting the signaling layer part.<break/>&#x027a2; <inline-formula><mml:math id="M23" altimg="si22.gif"><mml:mrow><mml:mi mathvariant="bold-italic">t</mml:mi><mml:mi mathvariant="bold-italic">h</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">h</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">l</mml:mi><mml:mi mathvariant="bold-italic">d</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi></mml:mrow></mml:math></inline-formula>, thresholds used to binarize the drug-target interaction scores.<break/><bold>Output:</bold><break/>&#x027a2; <inline-formula><mml:math id="M24" altimg="si23.gif"><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula>[N x m], predicted activity for each of m TFs.<break/>&#x027a2; <inline-formula><mml:math id="M25" altimg="si24.gif"><mml:mrow><mml:msub><mml:mover accent="true"><mml:mi mathvariant="bold-italic">Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mrow><mml:mi mathvariant="bold-italic">m</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">k</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">d</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>[N x m], predicted activity for each of m TFs, when masking drug-target interactions for different thresholds.<break/>&#x027a2; <inline-formula><mml:math id="M26" altimg="si25.gif"><mml:mrow><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">c</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi></mml:mrow></mml:math></inline-formula>, the drug-target interaction scores.<break/>&#x027a2; binary drug-target interactions based on a selected threshold.<break/>&#x027a2; global_thresholds, the interaction score used to extract interactions for each drug for each model<break/><bold>Symbols:</bold><break/>&#x027a2; <inline-formula><mml:math id="M27" altimg="si26.gif"><mml:mrow><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x000b7;</mml:mo><mml:mo linebreak="goodbreak" linebreakstyle="after" stretchy="true">&#x02192;</mml:mo></mml:mrow></mml:math></inline-formula>matrix multiplication<break/>&#x027a2; <inline-formula><mml:math id="M28" altimg="si27.gif"><mml:mrow><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02299;</mml:mo><mml:mo linebreak="goodbreak" linebreakstyle="after" stretchy="true">&#x02192;</mml:mo></mml:mrow></mml:math></inline-formula>element-wise matrix multiplication<break/><bold>&#x0003e;inferEnsembleScoreCaseStudy.py:</bold><break/><bold>for</bold><inline-formula><mml:math id="M29" altimg="si28.gif"><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:math></inline-formula><bold>steps in range(# models):</bold><break/>&#x000a0;&#x000a0;&#x000a0;<inline-formula><mml:math id="M30" altimg="si29.gif"><mml:mrow><mml:msub><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mi>i</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:msub><mml:mi>l</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M31" altimg="si30.gif"><mml:mrow><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mspace width="0.25em"/><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>I</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>g</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi><mml:mi>G</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>d</mml:mi><mml:mi>i</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:msub><mml:mi>l</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi>X</mml:mi></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>#using the Captum library<break/><bold>for</bold> j <bold>steps in range(# thresholds):</bold><break/>&#x000a0;<inline-formula><mml:math id="M32" altimg="si31.gif"><mml:mrow><mml:mi>T</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>s</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mi>u</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02264;</mml:mo><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>h</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mi>d</mml:mi><mml:msub><mml:mi>s</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M33" altimg="si32.gif"><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mspace width="0.25em"/><mml:mi>T</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x000b7;</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>X</mml:mi><mml:mo linebreak="badbreak">&#x02260;</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M34" altimg="si33.gif"><mml:mrow><mml:msub><mml:mi>X</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>l</mml:mi><mml:mo>.</mml:mo><mml:mi>d</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi><mml:mi>L</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M35" altimg="si34.gif"><mml:mrow><mml:msub><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi mathvariant="italic">mod</mml:mi><mml:mspace width="0.25em"/><mml:mi>e</mml:mi><mml:mi>l</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi><mml:mi>E</mml:mi><mml:mi>M</mml:mi><mml:mi>B</mml:mi><mml:mi>A</mml:mi><mml:mi>S</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><break/><bold>&#x0003e;InferDTICaseStudy.py:</bold><break/><bold>for</bold><inline-formula><mml:math id="M36" altimg="si28.gif"><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:math></inline-formula><bold>steps in range(# models):</bold><break/><bold><italic>for</italic></bold><italic>k</italic><bold><italic>steps in range(# drugs):</italic></bold><break/>&#x000a0;<inline-formula><mml:math id="M37" altimg="si35.gif"><mml:mrow><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mo>#</mml:mo><mml:mspace width="0.25em"/><mml:mi>T</mml:mi><mml:mi>F</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:mfrac><mml:msub><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>T</mml:mi><mml:mi>F</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>s</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mi>u</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mi>e</mml:mi><mml:msub><mml:mi>d</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo linebreak="badbreak">&#x02212;</mml:mo><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula># vector with error values for each<break/>threshold<break/><inline-formula><mml:math id="M38" altimg="si36.gif"><mml:mrow><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mo>#</mml:mo><mml:mspace width="0.25em"/><mml:mi>T</mml:mi><mml:mi>F</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:mfrac><mml:msub><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>T</mml:mi><mml:mi>F</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>s</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mi>u</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:msub><mml:mi>Y</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo linebreak="badbreak">&#x02212;</mml:mo><mml:msubsup><mml:mi>Y</mml:mi><mml:mi>k</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula># scalar<break/><inline-formula><mml:math id="M39" altimg="si37.gif"><mml:mrow><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>c</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>a</mml:mi><mml:mi>g</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.25em"/><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>r</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mspace width="0.25em"/><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mfrac><mml:mrow><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>&#x02212;</mml:mo><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow><mml:mrow><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>]</mml:mo></mml:mrow><mml:mo>&#x02212;</mml:mo><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M40" altimg="si38.gif"><mml:mrow><mml:mi>g</mml:mi><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>b</mml:mi><mml:mi>a</mml:mi><mml:msub><mml:mi>l</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>h</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mi>d</mml:mi><mml:msub><mml:mi>s</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>a</mml:mi><mml:mi>v</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>g</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.25em"/><mml:mi>o</mml:mi><mml:mi>f</mml:mi><mml:mspace width="0.25em"/><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>h</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mi>d</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:math></inline-formula><break/><break/><inline-formula><mml:math id="M41" altimg="si39.gif"><mml:mrow><mml:mi>w</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.25em"/><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.25em"/><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>c</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>a</mml:mi><mml:mi>g</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.25em"/><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>r</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mspace width="0.25em"/><mml:mi>b</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>m</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mn>0.25</mml:mn><mml:mi>B</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>y</mml:mi><mml:mspace width="0.25em"/><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02264;</mml:mo><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>f</mml:mi><mml:mi>i</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi><mml:mspace width="0.25em"/><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>h</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mi>d</mml:mi><mml:mspace width="0.25em"/><mml:mi>f</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mspace width="0.25em"/><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>c</mml:mi><mml:mi>h</mml:mi><mml:mspace width="0.25em"/><mml:mi>d</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi></mml:mrow></mml:math></inline-formula></td></tr></tbody></table></table-wrap><table-wrap position="float" id="tbl3"><label>Table&#x000a0;3</label><caption><p>Pseudo-code for extracting inferred drug-target interactions from DT-LEMBAS, for the case of using a linear layer, corresponding to the InferInteractionScoresLinAlg.py script</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Run instead of integrated gradients when using the published drug layer</th></tr></thead><tbody><tr><td><bold>Input:</bold><break/>&#x027a2; <inline-formula><mml:math id="M42" altimg="si40.gif"><mml:mrow><mml:mi mathvariant="bold-italic">S</mml:mi></mml:mrow></mml:math></inline-formula>, [drugs x drugs] matrix containing pre-calculated chemical similarity of drugs.<break/>&#x027a2; <inline-formula><mml:math id="M43" altimg="si41.gif"><mml:mrow><mml:msub><mml:mi mathvariant="bold-italic">W</mml:mi><mml:mrow><mml:mi mathvariant="bold-italic">d</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">u</mml:mi><mml:mi mathvariant="bold-italic">g</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, [drugs x drugs] matrix containing trained weights to scale chemical similarity.<break/>&#x027a2; <inline-formula><mml:math id="M44" altimg="si42.gif"><mml:mrow><mml:mi mathvariant="bold-italic">A</mml:mi></mml:mrow></mml:math></inline-formula>, [targets x drugs] matrix containing trainable weights for drug-target interactions.<break/>&#x027a2; <inline-formula><mml:math id="M45" altimg="si43.gif"><mml:mrow><mml:mi mathvariant="bold-italic">m</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">k</mml:mi></mml:mrow></mml:math></inline-formula>, [targets x drugs] binary mask of known drug-target interactions.<break/>&#x027a2; <inline-formula><mml:math id="M46" altimg="si44.gif"><mml:mrow><mml:msub><mml:mi mathvariant="bold-italic">w</mml:mi><mml:mrow><mml:mi mathvariant="bold-italic">b</mml:mi><mml:mi mathvariant="bold-italic">n</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, [drugs] vector with trained weights of the batch normalization layer in the drug layer.<break/>&#x027a2; <inline-formula><mml:math id="M47" altimg="si45.gif"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold-italic">v</mml:mi><mml:mi mathvariant="bold-italic">a</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold-italic">b</mml:mi><mml:mi mathvariant="bold-italic">n</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, [drugs] vector with trained running variances of the batch normalization layer in the drug layer.<break/>&#x027a2; <inline-formula><mml:math id="M48" altimg="si46.gif"><mml:mrow><mml:mi mathvariant="bold-italic">&#x003b5;</mml:mi></mml:mrow></mml:math></inline-formula>, scalar used in the batch normalization of the drug layer (by default: 10<sup>-5</sup>)<break/><bold>Output:</bold><break/>&#x027a2; <inline-formula><mml:math id="M49" altimg="si25.gif"><mml:mrow><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">c</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi></mml:mrow></mml:math></inline-formula>, [drugs x targets] matrix containing all extracted drug-target interaction scores.<break/><bold>Symbols:</bold><break/>&#x027a2; <inline-formula><mml:math id="M50" altimg="si26.gif"><mml:mrow><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x000b7;</mml:mo><mml:mo linebreak="goodbreak" linebreakstyle="after" stretchy="true">&#x02192;</mml:mo></mml:mrow></mml:math></inline-formula>matrix multiplication<break/>&#x027a2;<inline-formula><mml:math id="M51" altimg="si27.gif"><mml:mrow><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02299;</mml:mo><mml:mo linebreak="goodbreak" linebreakstyle="after" stretchy="true">&#x02192;</mml:mo></mml:mrow></mml:math></inline-formula>element-wise matrix multiplication<break/><inline-formula><mml:math id="M52" altimg="si47.gif"><mml:mrow><mml:mi>W</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:mi>S</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02299;</mml:mo><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>d</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M53" altimg="si48.gif"><mml:mrow><mml:mi>A</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:mi>A</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02299;</mml:mo><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M54" altimg="si49.gif"><mml:mrow><mml:mi>K</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:mfrac><mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mi>b</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:msqrt><mml:mrow><mml:mi>v</mml:mi><mml:mi>a</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>b</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>&#x003f5;</mml:mi></mml:mrow></mml:msqrt></mml:mfrac></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M55" altimg="si50.gif"><mml:mrow><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mi mathvariant="bold-italic">c</mml:mi><mml:mi mathvariant="bold-italic">o</mml:mi><mml:mi mathvariant="bold-italic">r</mml:mi><mml:mi mathvariant="bold-italic">e</mml:mi><mml:mi mathvariant="bold-italic">s</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mi>A</mml:mi><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>K</mml:mi><mml:mo>&#x02299;</mml:mo><mml:mi>W</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mi>T</mml:mi></mml:msup></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mi>T</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula></td></tr></tbody></table></table-wrap></p><p id="p0755">This script takes approximately the same time (&#x0223c;2.5&#x000a0;min per model) requiring only CPU to run.<disp-quote id="disp0225"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> The inferEnsembleScoreCaseStudy.py utilizes integrated gradients to calculate the drug-target interaction scores, with 10 integration steps. However, the steps are only 10 because of the linear nature of the drug module. For more complex non-linear modules, the user should experiment with a larger number of steps (100 or 1000 steps, until convergence is observed).</p></disp-quote></p></sec><sec id="sec3.7"><title>Identify off-target effects on transcription factors</title><p id="p0760">
<disp-quote id="disp0230"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;15&#x000a0;s per model</bold></p></disp-quote>
</p><p id="p0765">In this step, you will estimate the off-target effects of all drugs on the activities of each of the TFs, and save this off-target effect estimate in the file DeltaTF1.csv (pseudo-code in <xref rid="tbl4" ref-type="table">Table&#x000a0;4</xref>). The main point is to ultimately identify a drug-TF pair of interest, where the drug significantly affects the TF&#x02019;s activity because of off-target effects. Additionally, as a performance metric for each TF, the average fitted TF across all models in the ensemble is compared with the true value in terms of its Pearson correlation. This performance metric will be saved in the TrainEnsemblePerformance.csv file, in the same folder (res_dir, see below) as DeltaTF1.csv. The figure and data frame combining these files to identify a sample of interest are generated in Step 6.4.<list list-type="simple" id="olist0140"><list-item id="o0255"><label>24.</label><p id="p0770">Open a terminal where you can run Python and navigate to the postprocessing folder of the GitHub repository.</p></list-item><list-item id="o0260"><label>25.</label><p id="p0775">Run the command:</p></list-item></list><boxed-text id="dtbox26"><p id="p0780">&#x0003e; python ./inferOffTargetEffectDeltaCaseStudy.py&#x000a0;&#x02013;inputPathPattern folder/modelCellLineX --DrugsIn file1 --TargetsIn file2 --TFsOut file3 --ChemicalSims file4 --PKN file5 --PknAnnotation file6 --res_dir folder --numberOfModels 50</p></boxed-text><disp-quote id="disp0235"><p><bold><italic>Note: &#x0201c;inputPathPattern&#x0201d;</italic></bold> is the full folder path and file name pattern (without the file extension and model number) to be used to load trained models. <bold><italic>&#x0201c;DrugsIn&#x0201d;</italic></bold>, as in the training step, it is the .tsv file containing the input drug concentration, with samples in the rows and the pre-defined drugs in the columns. <bold><italic>&#x0201c;TargetsIn&#x0201d;</italic></bold>, as in the training step, it is the .tsv file containing prior knowledge of drug-target interactions with drugs in the rows and targets in the columns. <bold><italic>&#x0201c;TFsOut&#x0201d;</italic></bold>, as in the training step, it is the .tsv file containing output TF activities, with samples in the rows and TFs in the columns. <bold><italic>&#x0201c;ChemicalSims&#x0201d;</italic></bold>, as in the training step, it is the&#x000a0;.csv file containing chemical similarities between drugs in a matrix format with the smiles of the drugs being the columns&#x02019; and rows&#x02019; names. <bold><italic>&#x0201c;PKN&#x0201d;</italic></bold> is the prior knowledge signaling network which will be used as a scaffold for the neural network model. This should have been generated in the previous steps, or you can provide a manually curated one. <bold><italic>&#x0201c;PknAnnotation&#x0201d;</italic></bold> is the annotation file for the PKN, also generated in the previous steps. <bold><italic>&#x0201c;res_dir&#x0201d;</italic></bold> is the Folder path to save the off-target effect estimates and the training ensemble performance of the models. <bold><italic>&#x0201c;numberOfModels&#x0201d;</italic></bold> is used in the ensemble approach (default&#x000a0;= 50).</p></disp-quote><list list-type="simple" id="olist0145"><list-item id="o0265"><label>26.</label><p id="p0785">Open Rstudio (or a terminal where you can execute R scripts) and make sure the working directory is the postprocessing folder.<list list-type="simple" id="olist0150"><list-item id="o0270"><label>a.</label><p id="p0790">You can click on the postprocessing.Rproj file and this will start Rstudio in the appropriate folder.</p></list-item><list-item id="o0275"><label>b.</label><p id="p0795">&#x0003e; getwd() can show the current working directory.</p></list-item><list-item id="o0280"><label>c.</label><p id="p0800">&#x0003e; setwd(dir) can change the current working directory to `dir`, which is the folder path of your choice.</p></list-item></list></p></list-item><list-item id="o0285"><label>27.</label><p id="p0805">Open the <bold>chooseTFsWithOffTargetsCaseStudy.R</bold> in Rstudio (<bold>or run the command</bold>
<bold>&#x0003e; Rscript chooseTFsWithOffTargetsCaseStudy.R</bold>
<bold>in a terminal</bold>):</p></list-item></list><disp-quote id="disp0240"><p><bold><italic>Note:</italic></bold> You can run line-by-line interactively to interrogate the results.</p></disp-quote><disp-quote id="disp0245"><p><bold><italic>Note:</italic></bold> This script will show and then save a figure (<xref rid="fig4" ref-type="fig">Figure 4</xref>) visualizing the off-target effect and activity of each TF under each drug perturbation, as well as the performance in predicting it correctly.</p></disp-quote><disp-quote id="disp0250"><p><bold><italic>Note:</italic></bold> Additionally, it saves a file with the maximum performance and off-target for each TF to later examine interesting case studies.</p></disp-quote><disp-quote id="disp0255"><p><bold><italic>Note:</italic> Importantly, you may interrogate the xlsx file exported at the path present in line 29 in the script, to manually identify more case studies based on your choices regarding when there is a large off-target effect (based on the absolute value of the `delta` column variable), when a TF is well-fitted (based on the `r` column variable), and the induced activity of the TF (the `activity` column variable). In the saved .csv file with interesting samples only the maximum off-targets are saved.</bold></p></disp-quote><disp-quote id="disp0260"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> First, change and use the appropriate file and folder paths for saving and loading files, for your case study.</p></disp-quote><disp-quote id="disp0265"><p><bold><italic>Note:</italic></bold> In this study, we denote as large estimated off-target effects those with an absolute value &#x02265; 0.25 (or relaxed to &#x02265;0.2). Meanwhile, the user should perhaps investigate the cases that also the actual induced TF activity is more than 0.75 or less than 0.25 since this means that the TF is active or inactive, respectively, because of the off-target effects.</p></disp-quote><table-wrap position="float" id="tbl4"><label>Table&#x000a0;4</label><caption><p>Pseudo-code estimating the off-target effects of each drug in the data on each available transcription factor, corresponding to the inferOffTargetEffectDeltaCaseStudy.py script</p></caption><table frame="hsides" rules="groups"><tbody><tr><td><bold>Input:</bold><break/>&#x027a2; Input drug concentrations<inline-formula><mml:math id="M56" altimg="si20.gif"><mml:mrow><mml:mi mathvariant="bold-italic">X</mml:mi></mml:mrow></mml:math></inline-formula>, [N x d] matrix with N samples and d available drugs with each drug&#x02019;s concentration for the a given sample.<break/>&#x027a2; drugLayer, denoting, only the drug layer part of DT-LEMBAS.<break/>&#x027a2; LEMBAS denoting the signaling layer part of DT-LEMBAS.<break/>&#x027a2; mask, [targets x drugs] binary mask of known drug-target interactions.<break/>&#x027a2; True drug induced TF activity<inline-formula><mml:math id="M57" altimg="si51.gif"><mml:mrow><mml:mi mathvariant="bold-italic">Y</mml:mi></mml:mrow></mml:math></inline-formula>, [N x m] matrix with N samples and m TFs.<break/><bold>Output:</bold><break/>&#x027a2; <inline-formula><mml:math id="M58" altimg="si52.gif"><mml:mrow><mml:mo>&#x00394;</mml:mo><mml:mi mathvariant="bold-italic">Y</mml:mi></mml:mrow></mml:math></inline-formula>, the difference between predicted TF activities without off-targets and with off-targets, which will act as the proxy of the off-target effect on a TF.<break/>&#x027a2; Pearson correlation between predicted TF activity from an ensemble of models and true TF activity.<break/><bold>for</bold> i <bold>steps in range(# models):</bold><break/>&#x000a0;<inline-formula><mml:math id="M59" altimg="si53.gif"><mml:mrow><mml:msub><mml:mi>X</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>d</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi><mml:mi>L</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M60" altimg="si54.gif"><mml:mrow><mml:msub><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mi>i</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>L</mml:mi><mml:mi>E</mml:mi><mml:mi>M</mml:mi><mml:mi>B</mml:mi><mml:mi>A</mml:mi><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M61" altimg="si55.gif"><mml:mrow><mml:msub><mml:msub><mml:mi>X</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x000b7;</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>X</mml:mi><mml:mo linebreak="badbreak">&#x02260;</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M62" altimg="si56.gif"><mml:mrow><mml:msub><mml:mover accent="true"><mml:msup><mml:mi>Y</mml:mi><mml:mo>&#x02032;</mml:mo></mml:msup><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mi>i</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>L</mml:mi><mml:mi>E</mml:mi><mml:mi>M</mml:mi><mml:mi>B</mml:mi><mml:mi>A</mml:mi><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msub><mml:mi>X</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M63" altimg="si57.gif"><mml:mrow><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>m</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M64" altimg="si58.gif"><mml:mrow><mml:mover accent="true"><mml:msup><mml:mi>Y</mml:mi><mml:mo>&#x02032;</mml:mo></mml:msup><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>m</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msup><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mo>&#x02032;</mml:mo></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula><break/><inline-formula><mml:math id="M65" altimg="si59.gif"><mml:mrow><mml:mo>&#x00394;</mml:mo><mml:mi>Y</mml:mi><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:mover accent="true"><mml:msup><mml:mi>Y</mml:mi><mml:mo>&#x02032;</mml:mo></mml:msup><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02212;</mml:mo><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula><break/>Ensemble performance<inline-formula><mml:math id="M66" altimg="si60.gif"><mml:mrow><mml:mo linebreak="goodbreak" linebreakstyle="after">&#x02190;</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>l</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mover accent="true"><mml:mi>Y</mml:mi><mml:mo>&#x002c6;</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mi>Y</mml:mi></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula></td></tr></tbody></table></table-wrap><fig id="fig5"><label>Figure&#x000a0;5</label><caption><p>Examples of opening the extracted MoA network in the Cytoscape environment, together with the step-by-step actions taken by the user to open the results</p><p>These are screenshots from Cytoscape.</p><p>(<bold>A)</bold> Loading the network file for the ensembled reduced subnetwork. The red arrows show where the user needs to click to load the results. First, the user selects the &#x0201c;icon&#x0201d; to open a window where they can browse to find the files that contain the network (the second arrow).</p><p>(<bold>B)</bold> Loading the shortest paths only for the ensembled reduced subnetwork. The red arrows have the same meaning as in panel A.</p><p>(<bold>C)</bold> The columns and their assigned properties when loading the CSV file. The red arrows are added for emphasis to guide the user to the parts of the Cytoscape environment that they need to pay attention to (e.g., exactly which columns should be the source, target, and interaction properties of Cytoscape.</p></caption><graphic xlink:href="gr5"/></fig></p></sec><sec id="sec3.8"><title>Extract the mechanistic network explaining the off-target effect</title><p id="p0810">
<disp-quote id="disp0270"><p><inline-graphic xlink:href="fx2.gif"/><bold>Timing: &#x0223c;1.5&#x000a0;min per model</bold></p></disp-quote>
</p><p id="p0815">In this step, you will construct a mechanistic network explaining the off-target effect of a drug on a specific transcription factor. As an example, we conduct a case study where we investigate the off-target effects of the drug <bold>Lestaurtinib</bold> on the <bold>FOXM1</bold> transcription factor in the <bold>A375</bold> cell line.<disp-quote id="disp0275"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> Before you begin, note that the following script requires you to have all previous results in a specific parent folder which contains the subfolders: i) models (containing the trained models), and ii) InteractionScores (where the drug-target interaction scores are saved). Additionally, this parent folder should contain the thresholds for inferring drug-target interaction in the all_drugs_global_thresholds.csv file. All of these files should already have been generated in the previous steps.</p></disp-quote><list list-type="simple" id="olist0155"><list-item id="o0290"><label>28.</label><p id="p0820">Open a terminal where you can run Python and navigate to the MoA folder.</p></list-item><list-item id="o0295"><label>29.</label><p id="p0825">Run the following command:</p></list-item></list><boxed-text id="dtbox27"><p id="p0830">&#x0003e;python ./inferMoACaseStudy.py --inputPattern modelCellLineX --ensembles_path folder1--DrugsIn file1 --TargetsIn file2 --TFsOut file3 --ChemicalSims file4 --PKN file5 --PknAnnotation file6 --res_dir folder2 --interactionScorePattern interactionScores --numberOfModels 50 --source_freq_thresh 0.6 --edge_thresh_init 0.5 --moa_off_target "any" --Prefix "A375" --TF&#x000a0;"Q08050" --TF_gene "FOXM1" --drug "C[C@]12O[C@H](C[C@]1(O)CO)n1c3ccccc3c3c4C(=O)NCc4c4c5ccccc5n2c4c13" --drug_name "lestaurtinib" --sample "CPC014_A375_6H:BRD-K23192422-001-01-1:10"</p></boxed-text><disp-quote id="disp0280"><p><bold><italic>Note: &#x0201c;inputPattern&#x0201d;</italic></bold> is the pattern/name (without the file extension and model number) that was used when saving multiple models for this specific case study. <bold><italic>&#x0201c;ensembles_path&#x0201d;</italic></bold> should be the path to <bold>the parent folder</bold> which contains the `models` folder with the ensemble of saved models. <bold><italic>&#x0201c;DrugsIn&#x0201d;</italic></bold>, as in the training step, it is the .tsv file containing the input drug concentration, with samples in the rows and the pre-defined drugs in the columns. <bold><italic>&#x0201c;TargetsIn&#x0201d;</italic></bold>, as in the training step, it is the .tsv file containing prior knowledge of drug-target interactions with drugs in the rows and targets in the columns. <bold><italic>&#x0201c;TFsOut&#x0201d;</italic></bold>, as in the training step, it is the .tsv file containing output TF activities, with samples in the rows and TFs in the columns. <bold><italic>&#x0201c;ChemicalSims&#x0201d;</italic></bold>, as in the training step, it is the .csv file containing chemical similarities between drugs in a matrix format with the smiles of the drugs being the columns&#x02019; and rows&#x02019; names. <bold><italic>&#x0201c;PKN&#x0201d;</italic></bold> is the prior knowledge signaling network which will be used as a scaffold for the neural network model. This should have been generated in the previous steps, or you can provide a manually curated one. <bold><italic>&#x0201c;PknAnnotation&#x0201d;</italic></bold> is the Annotation file for the PKN, also generated in the previous steps. <bold><italic>&#x0201c;res_dir&#x0201d;</italic></bold> is the folder path to save results. <bold><italic>&#x0201c;interactionScorePattern&#x0201d;</italic></bold> is the pattern/name (without the file extension and model number) that was used when saving drug-target interaction scores for this specific case study. <bold><italic>&#x0201c;numberOfModels&#x0201d;</italic></bold> is the number of models that were trained in the ensemble (default&#x000a0;= 50). <bold><italic>&#x0201c;source_freq_thresh&#x0201d;</italic></bold> is the minimum frequency score of a target being inferred by multiple models to finally consider it (default&#x000a0;= 0.6). A stricter threshold can result in a smaller network, but may also result in an error because no targets are higher than the designated threshold. In such a case see <xref rid="sec6.5" ref-type="sec">Troubleshooting 3</xref>. <bold><italic>&#x0201c;edge_thresh_init&#x0201d;</italic></bold> is the initial minimum frequency score of an edge appearing in the signaling network when constructing the net explaining the MoA of the off-target (default&#x000a0;= 0.5). <bold>This is an initial filtering</bold>, as subsequently this results in disconnecting all the drug&#x02019;s targets and the TF of interest, edges are added to create a path connecting targets and TF with the highest possible sum of frequencies. <bold><italic>&#x0201c;moa_off_target&#x0201d;</italic></bold> is the sign of off-target effect to consider drug&#x02019;s target. (default&#x000a0;= "any", potential values ["any","inhibit","activate"]). <bold>We strongly suggest keeping the default option. <italic>&#x0201c;Prefix&#x0201d;</italic></bold> is a name describing the biological system where the models were trained on (will be used when saving data). We recommend using the name of the cell line from which the data were derived. <bold><italic>&#x0201c;TF&#x0201d;</italic></bold> is the UniProt<xref rid="bib13" ref-type="bibr"><sup>13</sup></xref> identifier of the transcription factor of interest. <bold><italic>&#x0201c;TF_gene&#x0201d;</italic></bold> is the gene name for the transcription factor of interest. <bold><italic>&#x0201c;drug&#x0201d;</italic></bold> is the SMILES of the drug of interest. The unique identifiers of drugs in the tutorial are SMILES and not commercial drug names, as the same chemical structure can have multiple commercial names. <bold><italic>&#x0201c;drug_name&#x0201d;</italic></bold> is the commercial (or any other) name of the drug of interest. <bold><italic>&#x0201c;sample&#x0201d;</italic></bold> is the Identifier of the perturbation used (in this case study we use the sig_id of the L1000 dataset, with more information available in the CLUE platform<xref rid="bib14" ref-type="bibr"><sup>14</sup></xref> glossary.).</p></disp-quote><list list-type="simple" id="olist0160"><list-item id="o0300"><label>30.</label><p id="p0835">Run the following command to print the activity and interaction score of the target node, to investigate the sign of a drug-target interaction:</p></list-item></list><boxed-text id="dtbox28"><p id="p0840">&#x0003e;python ./DrugTargetInteractionSignCaseStudy.py --inputPattern modelCellLineX --ensembles_path folder1--DrugsIn file1 --TargetsIn file2 --TFsOut file3 --ChemicalSims file4 --PKN file5 --PknAnnotation file6 --res_dir folder2 --interactionScorePattern interactionScores --numberOfModels 50 --moa_off_target "any" -- Prefix "A375" --node "P24941" --node_gene "CDK2" --drug "C[C@]12O[C@H](C[C@]1(O)CO)n1c3ccccc3c3c4C(=O)NCc4c4c5ccccc5n2c4c13" --drug_name "lestaurtinib" --sample "CPC014_A375_6H:BRD-K23192422-001-01-1:10"</p></boxed-text><disp-quote id="disp0285"><p><bold><italic>Note:</italic></bold> The arguments are the same as the ones in the inferMoACaseStudy.py script, with the difference that instead of having as input a TF, the input is the name and UniProt identifier of any signaling node.</p></disp-quote><disp-quote id="disp0290"><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> All arguments in this script have the same values as those used in this case study.</p></disp-quote><list list-type="simple" id="olist0165"><list-item id="o0305"><label>31.</label><p id="p0845">Open Cytoscape<xref rid="bib6" ref-type="bibr"><sup>6</sup></xref> and load the appropriate network (<xref rid="fig5" ref-type="fig">Figure&#x000a0;5</xref>).</p></list-item></list><disp-quote id="disp0295"><p><bold><italic>Note:</italic></bold> This can be either a file with the pattern <bold>Prefix_drug_TF_moa_model_ensembleFiltered.csv</bold> for the full subnetwork <bold>or Prefix_drug_TF_moa_short_model_ensembled.csv</bold> for the shortest path network. Then load the file with the properties of the nodes (<xref rid="fig6" ref-type="fig">Figure&#x000a0;6</xref>). For interpretation, you can change the shape of edges based on their sign and color the nodes based on their type (mid_node for intermediate nodes, source for nodes that are the targets of the drugs, and target for the TF of interest). An example of a shortest path network explaining the MoA of the off-target effect of Lestaurtinib on FOXM1 is show in <xref rid="fig7" ref-type="fig">Figure 7</xref>.</p></disp-quote><fig id="fig6"><label>Figure&#x000a0;6</label><caption><p>Example of importing a table with the properties of the nodes in the extracted MoA network in the Cytoscape environment, together with the step-by-step actions taken by the user to load the results</p><p>These are screenshots from Cytoscape.</p><p>(<bold>A)</bold> Loading the node table file for the ensembled reduced subnetwork. The red arrows show where the user needs to click to load the results. First, the user selects the &#x0201c;icon&#x0201d; to open a window where they can browse to find the files that contain the node properties (the second arrow).</p><p>(<bold>B)</bold> The columns and their assigned properties when loading the CSV file. The red arrows are added to denote which column should be selected as the &#x0201c;key&#x0201d; for mapping the network and node properties, and what &#x0201c;icon&#x0201d; should they click on next.</p></caption><graphic xlink:href="gr6"/></fig><fig id="fig7"><label>Figure&#x000a0;7</label><caption><p>An example of a shot-paths version of a trimmed ensemble network explaining the off-target effect that leads Lestaurtinib to inhibit more FOXM1, via previously unknown drug-target interactions</p></caption><graphic xlink:href="gr7"/></fig></p></sec></sec><sec id="sec4"><title>Expected outcomes</title><p id="p0850">In this protocol, the user trains an interactome-based deep learning model to explain the MoA of a drug&#x02019;s off-target effects on TFs. By following step 1,2,3 the user reconstructs a prior knowledge network of drug-target interactions and intracellular signaling (in the form of a .tsv file saved in the data folder) and infers the activity of transcription factors from gene expression data (in the form of a .tsv file saved in the data folder), which serve as the predicted output of the model in matrix format (<inline-formula><mml:math id="M67" altimg="si3.gif"><mml:mrow><mml:mi>s</mml:mi><mml:mi>a</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mrow><mml:mo>(</mml:mo><mml:mi>N</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mspace width="0.25em"/><mml:mi>x</mml:mi><mml:mspace width="0.25em"/><mml:mi>T</mml:mi><mml:mi>F</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mrow><mml:mo>(</mml:mo><mml:mi>T</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>). This is used in step 4 to train models simulating the transcriptional response of cells under drug perturbations, along with the Pearson correlation between fitted and true values of TF activity, stored in <bold><italic>[CellPrefix]_trainPerformance_perTF.csv</italic></bold> at a designated results&#x02019; directory. This performance metric serves as a proxy for prediction quality for each TF. The input to the joint model (drug layer and PKN-based signaling neural network) is log-transformed concertation of drugs in matrix format (<inline-formula><mml:math id="M68" altimg="si1.gif"><mml:mrow><mml:mi>s</mml:mi><mml:mi>a</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mrow><mml:mo>(</mml:mo><mml:mi>N</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mspace width="0.25em"/><mml:mi>x</mml:mi><mml:mspace width="0.25em"/><mml:mi>d</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>g</mml:mi><mml:mi>s</mml:mi><mml:mspace width="0.25em"/><mml:mrow><mml:mo>(</mml:mo><mml:mi>D</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. It is expected that the user generates multiple models to form an ensemble, that are stored in .pt file format. In step 5, inferred DTIs are extracted from the models, which are saved in .csv format. In step 6 well-fitted TFs with large estimated off-target effects are identified. The estimated off-target effects are stored in a .csv file and visualized (<xref rid="fig4" ref-type="fig">Figure&#x000a0;4</xref>). In step 7, sub-networks are generated describing the signal flow from the off-target effect of a specific drug to a specific TF (in our case study, Lestaurtinib&#x02019;s effect on FOXM1). A full subnetwork based on the signaling activity across the ensemble of models is generated as well as a shortest path version, which is saved in .csv format. These are subsequently visualized using Cytoscape (<xref rid="fig7" ref-type="fig">Figure 7</xref>).<xref rid="bib6" ref-type="bibr"><sup>6</sup></xref></p></sec><sec id="sec5"><title>Limitations</title><p id="p0855">This protocol&#x02019;s main limitation (with a potential workaround) is that drugs and off-targets are limited to the drugs and targets present in the training data (e.g., for the A375 case study there are 512 drugs and 355 targets). This is a consequence of the drug module&#x02019;s construction. Specifically, the models simulate drug-induced intracellular signaling and can infer the MoA of a drug&#x02019;s off-target effect for a specific pre-defined drug-target space, defined and constrained by prior knowledge of drug-target interactions. However, these limitations may be overcome by future expansions of the drug module and the methodology for drug-target interaction inference is agnostic of the model architecture when using the integrated gradient-based approach. Meanwhile, a potential workaround, for the current constraint drug-target space, could be to utilize the chemical similarity of a drug of interest combined with other functional similarities (e.g., known targets, a known mechanism of action, affected downstream genes or pathways, etc.) to identify &#x0201c;neighbors&#x0201d; drugs in the training set of the model to use as proxies for getting insights for their drug of interest.</p><p id="p0860">As with all deep learning methods, a limitation is that a large dataset is required to train the model. In our previous work using synthetic data, we found that at least 100 samples are needed to train predictive models.<xref rid="bib2" ref-type="bibr"><sup>2</sup></xref> DT-LEMBAS was trained on 233 unique drug conditions, but empirically we have noticed that at least 100&#x02013;120 conditions are always required; below that to train a model the user needs to select to predict much fewer TFs (currently &#x0223c;100) and with a smaller PKN. Generally, data size requirements are dependent on how many TFs are predicted and how big is also the potential targets&#x02019; space. To avoid over-fitting, you may increase the regularization of the weights, or attempt to gather more data. Lack of data results in high model uncertainty, thus making the subnetworks that explain the possible MoA of off-target effects far too comprehensive to interpret. Alleviating this may require the user to have a more thorough hyper-parameter tuning of the whole pipeline (regularization strength, number of gradient thresholds tested, error increase threshold, etc.), leading to increased computing time and resource requirements. Additionally, the trained models are cell line-specific and do not offer an immediate way for an already trained model to be used for predictions in another cell line. However, in future work, this limitation could be overcome, by using a representation of each cell type as input to condition the model.</p></sec><sec id="sec6"><title>Troubleshooting</title><sec id="sec6.1"><title>Problem 1</title><p id="p0865">When trying to run steps 2a and 2b you may encounter an error similar to the following.<boxed-text id="dtbox29"><p id="p0870">Error: cannot allocate vector of size 3.1 Gb</p><p id="p0875">Error during wrapup: cannot allocate vector of size 12.5 Gb</p><p id="p0880">Error: no more error handlers available (recursive errors?); invoking &#x02032;abort&#x02032; restart</p></boxed-text></p></sec><sec id="sec6.2"><title>Potential solution</title><p id="p0885">This is due to either R limiting how much of the RAM in your system it can access, or insufficient RAM&#x000a0;in general in your system. For the first, you may increase the number in the command: memory.limit(size&#x000a0;= 16000) which will result in enabling R using more memory.</p><p id="p0890">In the case the problem persists it means your computer system does not have enough RAM and you may need to switch to other options such as computer clusters.</p></sec><sec id="sec6.3"><title>Problem 2</title><p id="p0895">The second sub-step in step 5 may take too long to run, or regardless of the slow speed you want more granularity in calculating thresholds.</p></sec><sec id="sec6.4"><title>Potential solution</title><p id="p0900">You may go to line 88 of the <bold>inferEnsembleScoreCaseStudy.py</bold> file (or 82 for InferInteractionScoresLinAlg.py) and modify the command: thresholds&#x000a0;= list(np.logspace(-3.5, 3.5, num&#x000a0;= 50)).</p><p id="p0905">If you decrease the `num` parameter the script will run faster, but you will lose granularity in calculating a gradient threshold. On the other hand, if granularity is the goal and the speed is not a problem you may increase the number.</p></sec><sec id="sec6.5"><title>Problem 3</title><p id="p0910">If in step 7, when running the <bold>inferMoACaseStudy.py</bold> script, you specify a frequency threshold for potential targets (--source_freq_thresh) that is too large, the algorithm may result in inferring zero potential off-targets, and thus you may encounter the following error in line 578: AssertionError: No inferred drug`s targets kept!</p></sec><sec id="sec6.6"><title>Potential solution</title><p id="p0915">Re-run the script after decreasing the frequency threshold when passing the argument target frequency argument: e.g., --source_freq_thresh 0.5.</p></sec></sec><sec id="sec7"><title>Resource availability</title><sec id="sec7.1"><title>Lead contact</title><p id="p0920">Further information and requests for resources should be directed to and will be fulfilled by the lead contact, Avlant Nilsson (<email>avlant.nilsson@ki.se</email>).</p></sec><sec id="sec7.2"><title>Technical contact</title><p id="p0925">Questions about the technical specifics of performing the protocol should be directed to and will be answered by the technical contact, Nikolaos Meimetis (<email>meimetis@mit.edu</email>).</p></sec><sec id="sec7.3"><title>Materials availability</title><p id="p0930">This study did not generate any reagents.</p></sec><sec sec-type="data-availability" id="sec7.4"><title>Data and code availability</title><p id="p0935">
<list list-type="simple" id="ulist0015"><list-item id="u0030"><label>&#x02022;</label><p id="p0940">This protocol utilizes existing, publicly available data. These accession numbers for the datasets are listed in the <xref rid="sec2" ref-type="sec">key resources table</xref>. Specifically, the L1000 dataset<xref rid="bib9" ref-type="bibr"><sup>9</sup></xref> was used to train the A375 model for the case study. The Broad&#x02019;s Institute Repurposing Hub<xref rid="bib11" ref-type="bibr"><sup>11</sup></xref> was used for retrieving drug-target interactions.</p></list-item><list-item id="u0035"><label>&#x02022;</label><p id="p0945">All original code and steps used in this protocol have been deposited in a GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/Lauffenburger-Lab/DrugsANNSignaling" id="intref0170">https://github.com/Lauffenburger-Lab/DrugsANNSignaling</ext-link>), which is publicly available. The repository has also been archived at Zenodo (<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.14057135" id="intref0175">https://doi.org/10.5281/zenodo.14057135</ext-link>). DOIs are listed in the <xref rid="sec2" ref-type="sec">key resources table</xref>. In the same repository, the analyzed data that were used to train our models and produce all figures are also deposited.</p></list-item><list-item id="u0040"><label>&#x02022;</label><p id="p0950">The cell-line-specific ensembles of trained DT-LEMBAS models (50 models) trained for 33 cell lines in the L1000 dataset are deposited at Zenodo (<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.14057298" id="intref0180">https://doi.org/10.5281/zenodo.14057298</ext-link>). DOIs are listed in the <xref rid="sec2" ref-type="sec">key resources table</xref>.</p></list-item></list>
</p><p id="p0955">Any additional information required to reanalyze the data reported in this study is available from the <xref rid="sec7.1" ref-type="sec">lead contact</xref> upon request.</p></sec></sec><sec id="sec9"><title>Acknowledgments</title><p id="p0965">The authors would like to thank Christine Wiggins and Luka Karginov for their extensive and valuable feedback on the software installation guide of this work. We acknowledge funding from the <funding-source id="gs1">Swedish Cancer Society</funding-source>, grant no. <award-id award-type="grant" rid="gs1">23 0693</award-id> JIA, and the <funding-source id="gs3">SciLifeLab&#x000a0;&#x00026; Wallenberg Data-Driven Life Science Program</funding-source>, grant no. <award-id award-type="grant" rid="gs3">KAW 2020.0239</award-id> (A.N.). We also acknowledge funding from <funding-source id="gs4">US ARO</funding-source> cooperative agreement <award-id award-type="grant" rid="gs4">W911NF-19-2-0026</award-id> for the Institute for Collaborative Biotechnologies (D.A.L.) and <funding-source id="gs5">NIH</funding-source> contract #<award-id award-type="grant" rid="gs5">75N93019C00071</award-id> (D.A.L.).</p></sec><sec id="sec10"><title>Author contributions</title><p id="p0970">N.M. generated and implemented the code for this protocol, executed the simulations, preprocessed the data, and trained the final models, under the supervision of A.N. N.M. wrote the protocol and A.N. edited it. D.A.L. provided feedback for drafting the manuscript.</p></sec><sec sec-type="COI-statement" id="sec11"><title>Declaration of interests</title><p id="p0975">The authors declare no competing interests.</p></sec></body><back><ref-list id="cebib0010"><title>References</title><ref id="bib1"><label>1</label><element-citation publication-type="journal" id="sref1"><person-group person-group-type="author"><name><surname>Meimetis</surname><given-names>N.</given-names></name><name><surname>Lauffenburger</surname><given-names>D.A.</given-names></name><name><surname>Nilsson</surname><given-names>A.</given-names></name></person-group><article-title>Inference of drug off-target effects on cellular signaling using interactome-based deep learning</article-title><source>iScience</source><volume>27</volume><year>2024</year><object-id pub-id-type="publisher-id">109509</object-id><pub-id pub-id-type="doi">10.1016/j.isci.2024.109509</pub-id></element-citation></ref><ref id="bib2"><label>2</label><element-citation publication-type="journal" id="sref2"><person-group person-group-type="author"><name><surname>Nilsson</surname><given-names>A.</given-names></name><name><surname>Peters</surname><given-names>J.M.</given-names></name><name><surname>Meimetis</surname><given-names>N.</given-names></name><name><surname>Bryson</surname><given-names>B.</given-names></name><name><surname>Lauffenburger</surname><given-names>D.A.</given-names></name></person-group><article-title>Artificial neural networks enable genome-scale simulations of intracellular signaling</article-title><source>Nat. Commun.</source><volume>13</volume><year>2022</year><fpage>3069</fpage><pub-id pub-id-type="doi">10.1038/s41467-022-30684-y</pub-id><pub-id pub-id-type="pmid">35654811</pub-id>
</element-citation></ref><ref id="bib3"><label>3</label><element-citation publication-type="book" id="sref3"><person-group person-group-type="author"><name><surname>Paszke</surname><given-names>A.</given-names></name><name><surname>Gross</surname><given-names>S.</given-names></name><name><surname>Massa</surname><given-names>F.</given-names></name><name><surname>Lerer</surname><given-names>A.</given-names></name><name><surname>Bradbury</surname><given-names>J.</given-names></name><name><surname>Chanan</surname><given-names>G.</given-names></name><name><surname>Killeen</surname><given-names>T.</given-names></name><name><surname>Lin</surname><given-names>Z.</given-names></name><name><surname>Gimelshein</surname><given-names>N.</given-names></name><name><surname>Antiga</surname><given-names>L.</given-names></name><etal/></person-group><part-title>PyTorch: An Imperative Style, High-Performance Deep Learning Library</part-title><source>Advances in Neural Information Processing Systems</source><year>2019</year><publisher-name>Curran Associates, Inc</publisher-name></element-citation></ref><ref id="bib4"><label>4</label><element-citation publication-type="journal" id="sref4"><person-group person-group-type="author"><name><surname>Kokhlikyan</surname><given-names>N.</given-names></name><name><surname>Miglani</surname><given-names>V.</given-names></name><name><surname>Martin</surname><given-names>M.</given-names></name><name><surname>Wang</surname><given-names>E.</given-names></name><name><surname>Alsallakh</surname><given-names>B.</given-names></name><name><surname>Reynolds</surname><given-names>J.</given-names></name><name><surname>Melnikov</surname><given-names>A.</given-names></name><name><surname>Kliushkina</surname><given-names>N.</given-names></name><name><surname>Araya</surname><given-names>C.</given-names></name><name><surname>Yan</surname><given-names>S.</given-names></name><etal/></person-group><article-title>Captum: A unified and generic model interpretability library for PyTorch</article-title><comment>Preprint at</comment><source>arXiv</source><year>2020</year><pub-id pub-id-type="doi">10.48550/arXiv.2009.07896</pub-id></element-citation></ref><ref id="bib5"><label>5</label><element-citation publication-type="book" id="sref5"><person-group person-group-type="author"><name><surname>Villanueva</surname><given-names>R.A.M.</given-names></name><name><surname>Chen</surname><given-names>Z.J.</given-names></name></person-group><part-title>ggplot2: Elegant Graphics for Data Analysis</part-title><edition>2nd ed.</edition><series>Measurement: Interdisciplinary Research and Perspectives</series><volume>17</volume><year>2019</year><fpage>160</fpage><lpage>167</lpage><pub-id pub-id-type="doi">10.1080/15366367.2019.1565254</pub-id></element-citation></ref><ref id="bib6"><label>6</label><element-citation publication-type="journal" id="sref6"><person-group person-group-type="author"><name><surname>Shannon</surname><given-names>P.</given-names></name><name><surname>Markiel</surname><given-names>A.</given-names></name><name><surname>Ozier</surname><given-names>O.</given-names></name><name><surname>Baliga</surname><given-names>N.S.</given-names></name><name><surname>Wang</surname><given-names>J.T.</given-names></name><name><surname>Ramage</surname><given-names>D.</given-names></name><name><surname>Amin</surname><given-names>N.</given-names></name><name><surname>Schwikowski</surname><given-names>B.</given-names></name><name><surname>Ideker</surname><given-names>T.</given-names></name></person-group><article-title>Cytoscape: A Software Environment for Integrated Models of Biomolecular Interaction Networks</article-title><source>Genome Res.</source><volume>13</volume><year>2003</year><fpage>2498</fpage><lpage>2504</lpage><pub-id pub-id-type="doi">10.1101/gr.1239303</pub-id><pub-id pub-id-type="pmid">14597658</pub-id>
</element-citation></ref><ref id="bib7"><label>7</label><element-citation publication-type="journal" id="sref7"><person-group person-group-type="author"><name><surname>Garcia-Alonso</surname><given-names>L.</given-names></name><name><surname>Holland</surname><given-names>C.H.</given-names></name><name><surname>Ibrahim</surname><given-names>M.M.</given-names></name><name><surname>Turei</surname><given-names>D.</given-names></name><name><surname>Saez-Rodriguez</surname><given-names>J.</given-names></name></person-group><article-title>Benchmark and integration of resources for the estimation of human transcription factor activities</article-title><source>Genome Res.</source><volume>29</volume><year>2019</year><fpage>1363</fpage><lpage>1375</lpage><pub-id pub-id-type="doi">10.1101/gr.240663.118</pub-id><pub-id pub-id-type="pmid">31340985</pub-id>
</element-citation></ref><ref id="bib8"><label>8</label><element-citation publication-type="journal" id="sref8"><person-group person-group-type="author"><name><surname>Alvarez</surname><given-names>M.J.</given-names></name><name><surname>Shen</surname><given-names>Y.</given-names></name><name><surname>Giorgi</surname><given-names>F.M.</given-names></name><name><surname>Lachmann</surname><given-names>A.</given-names></name><name><surname>Ding</surname><given-names>B.B.</given-names></name><name><surname>Ye</surname><given-names>B.H.</given-names></name><name><surname>Califano</surname><given-names>A.</given-names></name></person-group><article-title>Functional characterization of somatic mutations&#x000a0;in&#x000a0;cancer using network-based&#x000a0;inference&#x000a0;of&#x000a0;protein activity</article-title><source>Nat. Genet.</source><volume>48</volume><year>2016</year><fpage>838</fpage><lpage>847</lpage><pub-id pub-id-type="doi">10.1038/ng.3593</pub-id><pub-id pub-id-type="pmid">27322546</pub-id>
</element-citation></ref><ref id="bib9"><label>9</label><element-citation publication-type="journal" id="sref9"><person-group person-group-type="author"><name><surname>Subramanian</surname><given-names>A.</given-names></name><name><surname>Narayan</surname><given-names>R.</given-names></name><name><surname>Corsello</surname><given-names>S.M.</given-names></name><name><surname>Peck</surname><given-names>D.D.</given-names></name><name><surname>Natoli</surname><given-names>T.E.</given-names></name><name><surname>Lu</surname><given-names>X.</given-names></name><name><surname>Gould</surname><given-names>J.</given-names></name><name><surname>Davis</surname><given-names>J.F.</given-names></name><name><surname>Tubelli</surname><given-names>A.A.</given-names></name><name><surname>Asiedu</surname><given-names>J.K.</given-names></name><etal/></person-group><article-title>A Next Generation Connectivity Map: L1000 Platform and the First 1,000,000 Profiles</article-title><source>Cell</source><volume>171</volume><year>2017</year><fpage>1437</fpage><lpage>1452.e17</lpage><pub-id pub-id-type="doi">10.1016/j.cell.2017.10.049</pub-id><pub-id pub-id-type="pmid">29195078</pub-id>
</element-citation></ref><ref id="bib10"><label>10</label><element-citation publication-type="journal" id="sref10"><person-group person-group-type="author"><name><surname>Wishart</surname><given-names>D.S.</given-names></name><name><surname>Knox</surname><given-names>C.</given-names></name><name><surname>Guo</surname><given-names>A.C.</given-names></name><name><surname>Shrivastava</surname><given-names>S.</given-names></name><name><surname>Hassanali</surname><given-names>M.</given-names></name><name><surname>Stothard</surname><given-names>P.</given-names></name><name><surname>Chang</surname><given-names>Z.</given-names></name><name><surname>Woolsey</surname><given-names>J.</given-names></name></person-group><article-title>DrugBank: a comprehensive resource for in&#x000a0;silico drug discovery and exploration</article-title><source>Nucleic Acids Res.</source><volume>34</volume><year>2006</year><fpage>D668</fpage><lpage>D672</lpage><pub-id pub-id-type="doi">10.1093/nar/gkj067</pub-id><pub-id pub-id-type="pmid">16381955</pub-id>
</element-citation></ref><ref id="bib11"><label>11</label><element-citation publication-type="journal" id="sref11"><person-group person-group-type="author"><name><surname>Corsello</surname><given-names>S.M.</given-names></name><name><surname>Bittker</surname><given-names>J.A.</given-names></name><name><surname>Liu</surname><given-names>Z.</given-names></name><name><surname>Gould</surname><given-names>J.</given-names></name><name><surname>McCarren</surname><given-names>P.</given-names></name><name><surname>Hirschman</surname><given-names>J.E.</given-names></name><name><surname>Johnston</surname><given-names>S.E.</given-names></name><name><surname>Vrcic</surname><given-names>A.</given-names></name><name><surname>Wong</surname><given-names>B.</given-names></name><name><surname>Khan</surname><given-names>M.</given-names></name><etal/></person-group><article-title>The Drug Repurposing Hub: a next-generation drug library and information resource</article-title><source>Nat. Med.</source><volume>23</volume><year>2017</year><fpage>405</fpage><lpage>408</lpage><pub-id pub-id-type="doi">10.1038/nm.4306</pub-id><pub-id pub-id-type="pmid">28388612</pub-id>
</element-citation></ref><ref id="bib12"><label>12</label><element-citation publication-type="journal" id="sref12"><person-group person-group-type="author"><name><surname>T&#x000fc;rei</surname><given-names>D.</given-names></name><name><surname>Korcsm&#x000e1;ros</surname><given-names>T.</given-names></name><name><surname>Saez-Rodriguez</surname><given-names>J.</given-names></name></person-group><article-title>OmniPath: guidelines and&#x000a0;gateway&#x000a0;for literature-curated&#x000a0;signaling&#x000a0;pathway resources</article-title><source>Nat. Methods</source><volume>13</volume><year>2016</year><fpage>966</fpage><lpage>967</lpage><pub-id pub-id-type="doi">10.1038/nmeth.4077</pub-id><pub-id pub-id-type="pmid">27898060</pub-id>
</element-citation></ref><ref id="bib13"><label>13</label><element-citation publication-type="journal" id="sref13"><person-group person-group-type="author"><collab>UniProt Consortium</collab></person-group><article-title>UniProt: the Universal Protein Knowledgebase in 2023</article-title><source>Nucleic Acids Res.</source><volume>51</volume><year>2023</year><fpage>D523</fpage><lpage>D531</lpage><pub-id pub-id-type="doi">10.1093/nar/gkac1052</pub-id><pub-id pub-id-type="pmid">36408920</pub-id>
</element-citation></ref><ref id="bib14"><label>14</label><mixed-citation publication-type="other" id="sref14">CMap and LINCS Unified Environment <ext-link ext-link-type="uri" xlink:href="https://clue.io/" id="intref0185">https://clue.io/</ext-link>.</mixed-citation></ref></ref-list></back></article>