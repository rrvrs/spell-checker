<!DOCTYPE article
PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN" "JATS-archivearticle1-3-mathml3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.3" xml:lang="en" article-type="research-article"><?properties open_access?><processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats"><restricted-by>pmc</restricted-by></processing-meta><front><journal-meta><journal-id journal-id-type="nlm-ta">Sensors (Basel)</journal-id><journal-id journal-id-type="iso-abbrev">Sensors (Basel)</journal-id><journal-id journal-id-type="publisher-id">sensors</journal-id><journal-title-group><journal-title>Sensors (Basel, Switzerland)</journal-title></journal-title-group><issn pub-type="epub">1424-8220</issn><publisher><publisher-name>MDPI</publisher-name></publisher></journal-meta>
<article-meta><article-id pub-id-type="pmid">40006232</article-id><article-id pub-id-type="pmc">PMC11859639</article-id><article-id pub-id-type="doi">10.3390/s25041003</article-id><article-id pub-id-type="publisher-id">sensors-25-01003</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>A Blockchain Parallel Activity Architecture with Social Network Graphs as Carriers for Internet of Things Networks</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Cong</surname><given-names>Xin</given-names></name><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Resources" vocab-term-identifier="https://credit.niso.org/contributor-roles/resources/">Resources</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Writing &#x02013; original draft" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-original-draft/">Writing &#x02013; original draft</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Writing &#x02013; review &#x00026; editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing &#x02013; review &#x00026; editing</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Visualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/visualization/">Visualization</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Supervision" vocab-term-identifier="https://credit.niso.org/contributor-roles/supervision/">Supervision</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Funding acquisition" vocab-term-identifier="https://credit.niso.org/contributor-roles/funding-acquisition/">Funding acquisition</role></contrib><contrib contrib-type="author"><name><surname>Zi</surname><given-names>Lingling</given-names></name><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Resources" vocab-term-identifier="https://credit.niso.org/contributor-roles/resources/">Resources</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Writing &#x02013; review &#x00026; editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing &#x02013; review &#x00026; editing</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Visualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/visualization/">Visualization</role><role vocab="credit" vocab-identifier="https://credit.niso.org/" vocab-term="Supervision" vocab-term-identifier="https://credit.niso.org/contributor-roles/supervision/">Supervision</role><xref rid="c1-sensors-25-01003" ref-type="corresp">*</xref></contrib></contrib-group><contrib-group><contrib contrib-type="editor"><name><surname>Talamo</surname><given-names>Maurizio</given-names></name><role>Academic Editor</role></contrib></contrib-group><aff id="af1-sensors-25-01003">College of Computer and Information Science, Chongqing Normal University, Chongqing 401331, China; <email>cx@cqnu.edu.cn</email></aff><author-notes><corresp id="c1-sensors-25-01003"><label>*</label>Correspondence: <email>zll@cqnu.edu.cn</email></corresp></author-notes><pub-date pub-type="epub"><day>08</day><month>2</month><year>2025</year></pub-date><pub-date pub-type="collection"><month>2</month><year>2025</year></pub-date><volume>25</volume><issue>4</issue><elocation-id>1003</elocation-id><history><date date-type="received"><day>05</day><month>12</month><year>2024</year></date><date date-type="rev-recd"><day>25</day><month>1</month><year>2025</year></date><date date-type="accepted"><day>29</day><month>1</month><year>2025</year></date></history><permissions><copyright-statement>&#x000a9; 2025 by the authors.</copyright-statement><copyright-year>2025</copyright-year><license><ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>Licensee MDPI, Basel, Switzerland. This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY) license (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>).</license-p></license></permissions><abstract><p>There is a need for information transactions between nodes in the Internet of Things (IoT) and blockchain technology can guarantee the anonymity and security of such transactions. However, current blockchain systems require networks to be connected in real time, but IoT networks cannot fulfill this requirement. Therefore, we put forward a blockchain parallel activity architecture using carriers (CBPA), which is capable of deploying blockchain systems on IoT networks. Firstly, the blockchain operation architecture, and its components are demonstrated. Secondly, the generation methods of the carrier, the carrier block and the transaction block are designed, respectively. Additionally, a feature-to-transaction correspondence algorithm is proposed, with the objective of accommodating the previous work of nodes when they are in a disconnected state within the network. Thirdly, a parallel generation method for transaction blocks is designed to permit multiple nodes to collaborate in generating blocks, thereby reducing the difficulty of block generation while accelerating the generation speed. Finally, intra-block and cross-block conflict resolution algorithms, as well as a block consensus and fork processing algorithm, are designed to ensure that nodes can participate in blockchain activities without being at a disadvantage and obtain legal benefits even when operating on a network with high communication latency. Theoretical analysis indicates that CBPA has both security and liveness. The experimental results show that when the block size is 1MB, CBPA improves the average throughput by about 10% and reduces the average latency by about 14% compared to existing schemes. When the percentage of failed nodes reaches about 18%, the blocking time increases significantly, and the valid block rate decreases by 0.2%. The proposed CBPA architecture expands the applicable blockchain network and provides practical solutions for disconnected operations.</p></abstract><kwd-group><kwd>IoT networks</kwd><kwd>blockchain transaction</kwd><kwd>parallel processing</kwd><kwd>social network graphs</kwd></kwd-group><funding-group><award-group><funding-source>Key Program of Chongqing Municipal Education Commission Planning Project</funding-source><award-id>24SKGH055</award-id></award-group><award-group><funding-source>Doctoral Research Foundation of Chongqing Normal University</funding-source><award-id>21XLB030</award-id></award-group><funding-statement>This work was supported by the Key Program of Chongqing Municipal Education Commission Planning Project (No. 24SKGH055) and the Doctoral Research Foundation of Chongqing Normal University (No. 21XLB030).</funding-statement></funding-group></article-meta></front><body><sec sec-type="intro" id="sec1-sensors-25-01003"><title>1. Introduction</title><p>In recent years, the research on Internet of Things (IoT) networks has made great progress and practical applications, but there are still inevitable problems [<xref rid="B1-sensors-25-01003" ref-type="bibr">1</xref>,<xref rid="B2-sensors-25-01003" ref-type="bibr">2</xref>]. For example, the anonymity between devices and people leads to insecure information data, unstable network connections, and low computing and storage capacity of handheld devices. Blockchain systems offer a practical solution to the aforementioned problems by giving nodes in the network the ability to determine whether information is secure or not. Existing research focuses on how to utilize blockchain to assist in solving the problems of IoT networks, such as attack and defense [<xref rid="B3-sensors-25-01003" ref-type="bibr">3</xref>], distributed data storage [<xref rid="B4-sensors-25-01003" ref-type="bibr">4</xref>], access control [<xref rid="B5-sensors-25-01003" ref-type="bibr">5</xref>,<xref rid="B6-sensors-25-01003" ref-type="bibr">6</xref>], and task scheduling [<xref rid="B7-sensors-25-01003" ref-type="bibr">7</xref>]. However, there is a lack of research on how to deploy blockchain systems on IoT networks under non-real-time connection conditions. So, there is a need to study architectures and methods for deploying blockchain systems on IoT networks.</p><p>In blockchain systems, blockchain activities that nodes are involved in mainly include transaction generation, transaction verification, transaction packaging, block generation, block consensus, block appending, etc. In addition, nodes need to request the latest transaction and block information from neighboring nodes in a timely manner. The main motivation for nodes to participate in these activities is to obtain benefits, and the key is to gain an advantage in activities such as block generation and consensus, which is measured using timestamps. In other words, the earlier the generated block is broadcasted to the entire network, the easier it is to reach consensus, and the earlier the latest confirmed block is available, the better it is for mining new blocks. Under blockchain network conditions, early time means that the network transmission latency is low. This implies that the nodes in the network must be able to maintain a real-time connection. This is a requirement for the ability of current blockchain systems to collaborate with other fields for blockchain activities. In actuality, however, there is still a class of networks known as IoT that cannot meet the requirement for real-time connection.</p><p>Based on the analysis of the connection characteristics of the nodes in the IoT and their own capabilities, the deployment of blockchain systems on the IoT can meet practical needs like securely interacting information between anonymous nodes, obtaining benefits, and stimulating nodes to actively transmit beneficial information. Still, there are some problems to be solved, such as blockchain not being able to run in an intermittent network, low-capacity nodes not being able to participate in blockchain activities, etc. Therefore, this paper focuses on the deployment blockchain system for IoT, with the goal of conducting blockchain activities under a non-real-time network connection, as well as cooperative mining among nodes for mutual benefits. Compared to the existing research, the proposed architecture addresses the IoT-specific issue by combining blockchain technology with social network graphs. Additionally, it provides practical solutions for disconnected operation, a topic that has not received enough attention in previous research. To be specific, the key contributions of our paper are summarized below.</p><p>(1) In order to be able to operate blockchain systems on IoT networks, we construct a novel blockchain parallel activity architecture (CBPA) that addresses the challenges of blockchain deployment, including dynamic node joining and leaving, high transmission latency, and the inability to detect node behaviors.</p><p>(2) IoT nodes are at risk of network interruption or high transmission latency, which might cause them to lose the time advantage in the block generating process and be unable to receive transaction fees and block generation benefits. Therefore, we propose a block generation method using a social network graph as a carrier, including the generation of the carrier, carrier block, and transaction block, as well as the feature-to-transaction correspondence algorithm. This enables nodes to obtain legal benefits based on their previous work even if they leave the IoT.</p><p>(3) The PoW-based block generation method requires nodes with a large computing power, which contradicts the existence of many IoT nodes with low computing power. Therefore, we overcome the limitation that blocks can only be generated by a single node in current blockchain systems, and enable low computing power nodes to participate in block generation activities by reducing the difficulty of solving PoW. Simultaneously, we design a transaction block parallel generation method that allows multiple nodes to cooperate to generate the same block together, thereby improving transaction throughput and ensuring block security.</p><p>(4) In the process of nodes generating blocks in parallel, there are cases where the same feature hash of a carrier corresponds to multiple transactions, while multiple blocks are linked in the same parent block. Therefore, we design the intra-block conflict resolution algorithm and cross-block conflict resolution algorithm, respectively, to reduce the probability of blocks being discarded.</p><p>(5) IoT nodes may not be able to access all the blockchain transaction information, resulting in possible duplicate transactions, while high transmission latency makes blockchain forks possible. Therefore, we present a block consensus and fork processing algorithm to improve the security of the proposed CBPA architecture.</p><p>The remainder of this paper is organized as follows: <xref rid="sec2-sensors-25-01003" ref-type="sec">Section 2</xref> reviews the related work on IoT networks and blockchain technology. <xref rid="sec3-sensors-25-01003" ref-type="sec">Section 3</xref> presents the proposed blockchain parallel activity architecture. <xref rid="sec4-sensors-25-01003" ref-type="sec">Section 4</xref> describes the details of the proposed architecture, including the generation of carriers and carrier blocks, parallel generation of transaction blocks and conflict resolution, block consensus, and fork processing. <xref rid="sec5-sensors-25-01003" ref-type="sec">Section 5</xref> shows the theoretical analysis and performance evaluation. Finally, <xref rid="sec6-sensors-25-01003" ref-type="sec">Section 6</xref> summarizes the paper and discusses future directions.</p></sec><sec id="sec2-sensors-25-01003"><title>2. Related Work</title><p>Aimed at constructing a blockchain activity architecture for IoT networks, this section introduces IoT and blockchain technologies.</p><p><bold>IoT networks.</bold> Nodes participating in blockchain activities in current blockchain systems require the network to be in a real-time connected state. This allows for fast receipt of the last transaction and block information, as well as to quickly broadcast locally generated blocks to the entire network for consensus and subsequent competition for ledger rights. To the best of our knowledge, blockchain technologies and existing online payment methods (such as credit cards, Alipay, etc.) that depend on reliable third parties do not facilitate transactions when the network is in a non-real-time connected state. In recent years, researchers have paid attention to the combination of blockchain and IoT. Peng [<xref rid="B8-sensors-25-01003" ref-type="bibr">8</xref>] et al. introduced a clustering-based collaborative storage scheme for blockchain in IoT networks. This scheme clusters storage-limited IoT nodes into multiple peers to update the entire blockchain. Bataineh et al. [<xref rid="B9-sensors-25-01003" ref-type="bibr">9</xref>] utilized the Ethereum blockchain infrastructure to construct an IoT&#x02013;blockchain integration architecture. This architecture divides the IoT nodes into rich clients and thin clients; however, only the rich clients could execute the mining process to obtain the benefits. Hu et al. [<xref rid="B10-sensors-25-01003" ref-type="bibr">10</xref>] proposed a cross-chain mapping blockchain for scalable data management in massive IoT networks. The proposed blockchain utilizes available fog-cloud resources to improve off-chain IoT data storage scalability. Ganapathy et al. [<xref rid="B11-sensors-25-01003" ref-type="bibr">11</xref>] proposed an attack detection model to distinguish between normal user behavior and adversary behavior in an IoT network. Wu et al. [<xref rid="B12-sensors-25-01003" ref-type="bibr">12</xref>] designed a hierarchical Practical Byzantine Fault Tolerance (PBFT) consensus algorithm with dual blockchain, which is applicable to the residential IoT with a small scope, improving the efficiency of the consensus process, and reducing the overhead caused by the consensus process. To counter the Distributed Denial of Service (DDoS) attacks of IoT, researchers [<xref rid="B13-sensors-25-01003" ref-type="bibr">13</xref>] integrated machine learning techniques with blockchain to enhance the detection and mitigation of DDoS threats. Deep et al. [<xref rid="B14-sensors-25-01003" ref-type="bibr">14</xref>] utilized blockchain to assist in solving the problem of data protection and authentication of IoT devices. The key to this is the use of smart contracts to perform authentication, access control, and data exchange mechanisms for IoT devices. Some scholars have explored the integration of Artificial Intelligence (AI), blockchain, and IoT. For example, Zheng et al. [<xref rid="B15-sensors-25-01003" ref-type="bibr">15</xref>] studied a wireless-powered IoT and they proposed a distributed multimode resource allocation algorithm to save energy consumption in transmitting state information. Saadat et al. [<xref rid="B16-sensors-25-01003" ref-type="bibr">16</xref>] developed an intelligent algorithm to select the optimal number of mobile consensus nodes to minimize the negative impact of low-stability consensus nodes. Kumar et al. [<xref rid="B17-sensors-25-01003" ref-type="bibr">17</xref>] integrated blockchain, authentication and key agreement mechanism, and explainable AI for securing smart consumer applications. Deebak et al. [<xref rid="B18-sensors-25-01003" ref-type="bibr">18</xref>] proposed a blockchain-based remote mutual authentication scheme to provide security and privacy. The scheme could coexist with the IoT smart environment to decentralize user requests.</p><p>In summary, utilizing IoT networks and their intermittent connectivity devices, blockchain systems can be deployed to complete Local Area Network (LAN) data transactions when the network is disconnected, and blockchain public ledger appending and updating activities when the network is connected. However, the participation of nodes in these activities requires a lot of data exchange in both disconnected and connected states of the network. Compared to the existing architecture combining blockchain and IoT, this paper focuses on how to improve the transaction throughput under this architecture and how to motivate limited-capacity IoT nodes to participate in the IoT blockchain.</p><p><bold>Blockchain technologies.</bold> Blockchain technology research has attracted widespread attention in both academia and industry. In academia, the chain-structured blockchain has withstood the test for more than a decade, while the Directed Acyclic Graph (DAG) structured blockchains represented by Obyte are currently undergoing practical validation. In industry, blockchain technology is being incorporated into a number of significant fields, including power and energy markets [<xref rid="B19-sensors-25-01003" ref-type="bibr">19</xref>], IoT [<xref rid="B20-sensors-25-01003" ref-type="bibr">20</xref>,<xref rid="B21-sensors-25-01003" ref-type="bibr">21</xref>], and AI [<xref rid="B22-sensors-25-01003" ref-type="bibr">22</xref>,<xref rid="B23-sensors-25-01003" ref-type="bibr">23</xref>]. In the chain-structured blockchain system represented by Bitcoin [<xref rid="B24-sensors-25-01003" ref-type="bibr">24</xref>], the goal of the miner nodes is to gain benefits, and the competition between nodes is the competition of computing power; in another chain-structured blockchain represented by Ethereum [<xref rid="B25-sensors-25-01003" ref-type="bibr">25</xref>], the miner nodes are also in a competitive relationship with each other, but are competing for the ownership of the virtual currency. Furthermore, in the DAG-structured blockchain system [<xref rid="B26-sensors-25-01003" ref-type="bibr">26</xref>,<xref rid="B27-sensors-25-01003" ref-type="bibr">27</xref>,<xref rid="B28-sensors-25-01003" ref-type="bibr">28</xref>,<xref rid="B29-sensors-25-01003" ref-type="bibr">29</xref>], nodes need to validate two previous transactions before starting a new one, and conflict resolution relies on network-wide voting to achieve asynchronous consensus. In the absence of benefits and computing power, the security of such blockchain systems remains to be regularly confirmed. Fundamental blockchain technologies such as timestamps, smart contracts, and consensus algorithms enable trusted confirmation of transactions without the need to go through a separate centralized entity. Specifically, the use of encrypted timestamps allows for accessing and recording distributed digital accounts [<xref rid="B30-sensors-25-01003" ref-type="bibr">30</xref>] and the built-in timestamp function records historical information about blockchain transactions, sends and verifies time-series-related information about transactions, and ensures that new records in the network have built-in audit trail information that can be appended and maintained [<xref rid="B31-sensors-25-01003" ref-type="bibr">31</xref>]. Smart contracts are decentralized agreements using computer code that adheres to the rules of digital transactions and are triggered by time [<xref rid="B32-sensors-25-01003" ref-type="bibr">32</xref>]. They contain rules and contractual terms for two or more parties and can automatically notify the relevant parties in the network when the terms are executed. Consensus algorithms ensure the proper functioning of the blockchain by verifying the legitimacy and correctness of transactions. In public blockchains, algorithms represented by PoW [<xref rid="B33-sensors-25-01003" ref-type="bibr">33</xref>,<xref rid="B34-sensors-25-01003" ref-type="bibr">34</xref>] and PoS [<xref rid="B35-sensors-25-01003" ref-type="bibr">35</xref>,<xref rid="B36-sensors-25-01003" ref-type="bibr">36</xref>] achieve anonymity and security, but have the negative impact of low throughput. In consortium blockchains, the Byzantine fault-tolerant family algorithm serves as the consensus core, which allows the blockchain to operate much more efficiently than public blockchains, but the performance decreases as the network grows larger [<xref rid="B37-sensors-25-01003" ref-type="bibr">37</xref>,<xref rid="B38-sensors-25-01003" ref-type="bibr">38</xref>,<xref rid="B39-sensors-25-01003" ref-type="bibr">39</xref>].</p><p>In recent years, mining pools have been proposed to improve mining efficiency and stability by centralizing globally dispersed computing power. The advantage is that it lowers the threshold of computing power for nodes to participate in block-generating while obtaining more stable benefits; the disadvantage is the centralization of the blockchain network and the susceptibility to 51% attacks. Nodes must have a real-time connection network in order to access the last task and block information, as the mining pool operator specifies block generation. As a result, applying the mining pool straight to the IoT is not practical. The main differences between CBPA and the mining pool are as follows. (1) Parallelism. The parallelism of the mining pool is mainly reflected in the task allocation during the process of block generation, while the parallelism of CBPA is mainly reflected in the block generation where the transactions contained in the block are packaged by multiple nodes. (2) Network architecture. The mining pool tends to be centralized, while CBPA tends to be decentralized. (3) Security. The security of the mining pool is ensured by the computing power of the block, while the security of CBPA is ensured by the computing power of all the transactions contained in the block. (4) Network connection. Mining pools require nodes in the real-time connection network, whereas nodes in the CBPA allows an intermittent network connection.</p><p>To sum up, the current blockchain is mainly designed for real-time network connection scenarios. Our task is to allow nodes to participate in blockchain activities in non-real-time network connection scenarios. These existing methods cannot meet the application requirements, so new methods are urgently needed to accomplish this task.</p></sec><sec id="sec3-sensors-25-01003"><title>3. The Proposed Blockchain Parallel Activity Architecture</title><p>The geographic location of certain IoT nodes varies greatly, such as moving cars, pedestrians using mobile phones, resulting in neighboring nodes that may be uncertain. Moreover, these nodes are anonymous and it is not possible to determine whether a node is malicious or not by its historical behavior. However, nodes in turn need to exchange information with neighboring nodes or other nodes in the network, e.g., traffic jam information between vehicles and life information between mobile phones. Therefore, by utilizing the inherent characteristics of blockchain, secure information exchange between anonymous nodes can be achieved and nodes can be incentivized to contribute trustworthy information on the basis of obtaining certain benefits. However, when deploying a blockchain system on the IoT, nodes with high transmission latency are usually at a disadvantage when participating in blockchain activities, severely reducing their possibility of obtaining benefits. Therefore, we consider in our architectural design that nodes collaborate with each other in activities such as blockchain generation and consensus, and allow nodes to receive benefits based on their contributions. We design carriers that can accommodate transactions to accomplish the goal that nodes can participate in blockchain activities even when a network outage occurs and can verify transactions in parallel to generate blocks. In this paper, we choose the social network graph as carriers and construct the blockchain architecture based on it.</p><p>The proposed CBPA architecture is demonstrated in <xref rid="sensors-25-01003-f001" ref-type="fig">Figure 1</xref> and the node-based blockchain operation process can be briefly described as follows. First, the transaction initiator submits the transaction while generating the carrier using the social network graph, on which the carrier block is generated, and then the transaction and the carrier block are broadcasted throughout the network. Second, all nodes in the network choose one or more transaction and feature hashes from the received transaction and carrier blocks, and establish feature-to-transaction correspondence based on the mining difficulty and hash function. In this process, multiple nodes can work together to correspond different transactions to the same carrier and complete the parallel generation of transaction blocks. Third, nodes verify the generated blocks, eliminating those that are inconsistent with the mining difficulty and those that have conflicts both within and across transaction blocks. The verified blocks are then preformed for consensus across the network, and conflicting blocks are eliminated. Finally, the local blockchain is updated to complete the block appending. In the above operation process, the following problems need to be solved: (1) how to generate carriers that can accommodate transactions; (2) how to correspond the carrier feature hashes to the transactions; and (3) how to solve block conflicts in the block generation and consensus process. To address problem (1), we design carrier generation and carrier block generation methods, as detailed in <xref rid="sec4dot1-sensors-25-01003" ref-type="sec">Section 4.1</xref> and <xref rid="sec4dot2-sensors-25-01003" ref-type="sec">Section 4.2</xref>. For problem (2), we design a parallel generation method (Algorithm 1), which is described in <xref rid="sec4dot3-sensors-25-01003" ref-type="sec">Section 4.3</xref>. For the block conflict in the generation process in problem (3), we design transaction block conflict resolution algorithms (Algorithms 2 and 3), which are described in <xref rid="sec4dot4-sensors-25-01003" ref-type="sec">Section 4.4</xref>. For the block conflict in the consensus process in problem (3), we design a block consensus and fork processing algorithm (Algorithm 4), which is described in <xref rid="sec4dot5-sensors-25-01003" ref-type="sec">Section 4.5</xref>. The proposed CBPA allows limited-capacity nodes to collaborate with each other in blockchain activities and ultimately obtain benefits both in case of single node or regional network disconnection and network connection. Compared to current blockchain systems, CBPA&#x02019;s advantage is that it can support networks with high transmission latency, i.e., nodes can receive legal benefits based on their previous work even if they leave the blockchain system. Meanwhile, CBPA supports parallel block generation, which directly shortens the block generation time and improves the transaction throughput.
<fig position="anchor" id="sensors-25-01003-f001"><label>Figure 1</label><caption><p>The proposed CBPA architecture for IoT networks.</p></caption><graphic xlink:href="sensors-25-01003-g001" position="float"/></fig>
<array><tbody><tr><td align="left" valign="middle" style="border-top:solid thin;border-bottom:solid thin" rowspan="1" colspan="1"><bold>Algorithm 1</bold>: The feature-to-transaction correspondence algorithm</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Input:</bold> Transactions, carrier blocks and transaction blocks.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Output:</bold> Corresponded transaction block. </td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">1:&#x02003;Find the latest block in the locally stored blockchain and then parse the hash.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">2:&#x02003;Request the latest block from the neighbouring node and then parse the hash. </td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">3:&#x02003;<bold>if</bold> (the two hashes are different) <bold>then</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">4:&#x02003;&#x02003;Update the locally stored blockchain and parse the hash of the latest block.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">5:&#x02003;<bold>end if</bold>//Preventing nodes from being attacked, reducing the probability of block generation being discarded, and getting the latest transaction block information</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">6:&#x02003;Find the hash of the parent block in the locally stored transaction blocks.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">7:&#x02003;<bold>if</bold> (this hash is equal to the hash of the latest block) <bold>then</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">8:&#x02003;&#x02003;the node can select this carrier block for mining.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">9:&#x02003;<bold>end if</bold>//The purpose of 1&#x02013;9 is to determine the carrier blocks that have not yet been corresponded</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">10:&#x02003;Search for locally stored transaction blocks and count the number of correspond- ences between feature hashes and transaction blocks separately.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">11:&#x02003;Find transaction blocks with the maximum number for mining//The greater the number of features and transactions that already correspond, the earlier the block is broadcasted to the entire network for consensus, the higher the probability of it being received, and the higher the probability of gaining benefits.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">12:&#x02003;<bold>if</bold> (find multiple blocks) <bold>then</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">13:&#x02003;&#x02003;&#x02003;Select the transaction block with the earliest timestamp//Successful block consensus with high probability</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">14:&#x02003;<bold>end if/</bold>/The purpose of 10&#x02013;14 is to determine transaction blocks corresponding to existing partial transactions.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">15:&#x02003;Rank locally received transactions by transaction fees in descending order.//Getting higher transaction fee</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">16:&#x02003;&#x02003;Query feature hashes that have not been corresponded to transactions in the car rier blocks.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">17:&#x02003;Random numbers, timestamps and transaction data are used as inputs and PoW is used to compute the Merkel root and compare it with selected feature hashes until the set mining difficulty is satisfied.//Correspondence between features and transactions</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">18:&#x02003;Fill in the transaction block.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">19:&#x02003;Broadcast the transaction block to the entire network after the transaction corresponds to the eigenvalue.//Completing the feature-to-transaction correspondence</td></tr><tr><td align="left" valign="middle" style="border-bottom:solid thin" rowspan="1" colspan="1">20:&#x02003;<bold>return</bold> the transaction block.</td></tr></tbody></array></p><array><tbody><tr><td align="left" valign="middle" style="border-top:solid thin;border-bottom:solid thin" rowspan="1" colspan="1"><bold>Algorithm 2</bold>: The cross-block conflict resolution algorithm</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Input:</bold> Transaction blocks to be verified broadcasted by other nodes</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Output:</bold> Legal transaction blocks</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">1:&#x02003;The transaction blocks that are to be verified and that have been received over a period of time are entered into set <italic toggle="yes">B</italic>.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">2:&#x02003;<bold>for</bold> (transaction block <italic toggle="yes">i</italic> &#x02208; <italic toggle="yes">B</italic>) <bold>do</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">3:&#x02003;&#x02003;Check if transactions within <italic toggle="yes">i</italic> are legal//The same method as Bitcoin transaction checking.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">4:&#x02003;&#x02003;&#x02003;Check if transactions within <italic toggle="yes">i</italic> already exist in another transaction block.//Avoiding repeat transactions.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">5:&#x02003;&#x02003;Check if the difficulty of the feature-to-transaction correspondence within <italic toggle="yes">i</italic> is higher than or equal to the mining difficulty.//Avoiding reducing block security</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">6:&#x02003;&#x02003;Remove transaction blocks that do not pass 3&#x02013;5 from <italic toggle="yes">B</italic>, indicating that they have been discarded.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">7:&#x02003;<bold>end for</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">8:&#x02003;Find conflicting transaction block <italic toggle="yes">B</italic>&#x02019; with the same parent block hash from <italic toggle="yes">B</italic>.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">9:&#x02003;<bold>for</bold> (transaction block <italic toggle="yes">i</italic> &#x02208; <italic toggle="yes">B</italic>&#x02019;) <bold>do</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">10:&#x02003;&#x02003;Check if the parent block is stored locally.//When the local block is incomplete, it may appear that the parent block is not found.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">11:&#x02003;&#x02003;<bold>if</bold> (it is not) <bold>then</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">12:&#x02003;&#x02003;&#x02003;Request the parent block from neighboring nodes, remove <italic toggle="yes">i</italic> from <italic toggle="yes">B</italic>&#x02019; and store it locally for later verification.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">13:&#x02003;&#x02003;<bold>end if</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">14:&#x02003;&#x02003;Count the computing power, transaction fees, timestamps of the transaction blocks that conflict with <italic toggle="yes">i</italic>.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">15:&#x02003;&#x02003;Determine the unique transaction block <italic toggle="yes">i</italic>&#x02019; based on the principle of large computing power first, high transaction fee second, and early timestamp last.//Ensuring that the block is secure while protecting the benefits of the nodes as much as possible.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">16:&#x02003;<bold>end for</bold>
</td></tr><tr><td align="left" valign="middle" style="border-bottom:solid thin" rowspan="1" colspan="1">17:&#x02003;<bold>return</bold>&#x000a0;<italic toggle="yes">i</italic>&#x02019;</td></tr></tbody></array><array><tbody><tr><td align="left" valign="middle" style="border-top:solid thin;border-bottom:solid thin" rowspan="1" colspan="1"><bold>Algorithm 3:</bold> The intra-block conflict resolution algorithm</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Input:</bold> Conflicting transaction blocks.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Output:</bold> Legal transaction block.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">1:&#x02003;Combine conflicting transactions corresponding to the same feature hash into set <italic toggle="yes">B</italic>.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">2:&#x02003;<bold>for</bold> (transaction <italic toggle="yes">i</italic> &#x02208; <italic toggle="yes">B</italic>) <bold>do</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">3:&#x02003;&#x02003;Calculate computing power of <italic toggle="yes">i</italic> and count transaction fee and timestamps of <italic toggle="yes">i</italic>.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">4:&#x02003;<bold>end for</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">5:&#x02003;Find <italic toggle="yes">i</italic> with the largest computing power.//Ensuring block security</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">6:&#x02003;<bold>if</bold> (find multiple largest computing power) <bold>then</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">7:&#x02003;&#x02003;Find the block <italic toggle="yes">i</italic> with the highest transaction fee.//Guaranteeing greater benefits for nodes</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">8:&#x02003;&#x02003;<bold>if</bold> (find multiple highest transaction fees) <bold>then</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">9:&#x02003;&#x02003;&#x02003;Find the block <italic toggle="yes">i</italic> with the earliest timestamp.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">10:&#x02003;&#x02003;<bold>end if</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">11:&#x02003;<bold>end if</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">12:&#x02003;One-to-one correspondence between <italic toggle="yes">i</italic> and the feature hash. </td></tr><tr><td align="left" valign="middle" style="border-bottom:solid thin" rowspan="1" colspan="1">13:&#x02003;<bold>return</bold> the legal transaction block.</td></tr></tbody></array><array><tbody><tr><td align="left" valign="middle" style="border-top:solid thin;border-bottom:solid thin" rowspan="1" colspan="1"><bold>Algorithm 4:</bold> The block consensus and fork processing algorithm</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Input:</bold> Transaction blocks with the same parent block</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1"><bold>Output:</bold> Transaction blocks appended to the blockchain</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">1:&#x02003;Transaction blocks with the same parent block form a set <italic toggle="yes">B</italic>.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">2:&#x02003;<bold>for</bold> (transaction block <italic toggle="yes">i</italic> &#x02208; <italic toggle="yes">B</italic>) <bold>do</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">3:&#x02003;&#x02003;Check if there are any duplicate transactions within <italic toggle="yes">i</italic> and blocks with <italic toggle="yes">i</italic> as the parent block.//Preventing repeat transactions</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">4:&#x02003;&#x02003;Remove illegal <italic toggle="yes">i</italic> from <italic toggle="yes">B</italic> and also remove all transaction blocks with <italic toggle="yes">i</italic> as a parent block.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">5:&#x02003;<bold>end for</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">6:&#x02003;<bold>for</bold> (<italic toggle="yes">j</italic> &#x02208; <italic toggle="yes">B</italic>) <bold>do</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">7:&#x02003;&#x02003;Calculate the number of transactions contained in <italic toggle="yes">i</italic> and all transaction blocks with <italic toggle="yes">i</italic> as a parent block.//Increasing transaction throughput</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">8:&#x02003;<bold>end for</bold>
</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">9:&#x02003;Find the transactions block <italic toggle="yes">j</italic> with the highest number of contained transactions.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">10: <bold>if</bold> (find more than one) <bold>then</bold></td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">11:&#x02003;&#x02003;Calculate the computing power contained in <italic toggle="yes">j</italic> and all transaction blocks with <italic toggle="yes">j</italic> as a parent block.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">12:&#x02003;&#x02003;Find the transaction block <italic toggle="yes">k</italic> with the largest computing power.//Ensuring block security</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">13:&#x02003;&#x02003;<bold>if</bold> (find multiple blocks) <bold>then</bold>
</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">14:&#x02003;&#x02003;&#x02003;Find the transaction block <italic toggle="yes">l</italic> with the earliest timestamp.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">15:&#x02003;&#x02003;<bold>end if</bold>
</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">16: <bold>end if</bold>
</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">17: Broadcast <italic toggle="yes">l</italic> and all transaction blocks with <italic toggle="yes">l</italic> as a parent block to other nodes.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">18: Consensus on <italic toggle="yes">l</italic> and all transaction blocks with <italic toggle="yes">l</italic> as the parent block using PBFT.</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">19: <bold>if</bold> (the number of successfully verified messages received exceeds 2/3 of the number of nodes in the network) <bold>then/</bold>/the condition of PBFT successful consensus</td></tr><tr><td align="left" valign="middle" rowspan="1" colspan="1">20:&#x02003;&#x02003;&#x02003;<bold>return</bold>&#x000a0;<italic toggle="yes">l</italic> and all transaction blocks with <italic toggle="yes">l</italic> as a parent block//transaction blocks that can be appended to the blockchain.</td></tr><tr><td align="left" valign="middle" style="border-bottom:solid thin" rowspan="1" colspan="1">21: <bold>end if</bold></td></tr></tbody></array></sec><sec sec-type="methods" id="sec4-sensors-25-01003"><title>4. Methodology</title><p>In this section, we elaborate on the details of the CBPA architecture, including carrier generation (in <xref rid="sec4dot1-sensors-25-01003" ref-type="sec">Section 4.1</xref>) and carrier block generation (in <xref rid="sec4dot2-sensors-25-01003" ref-type="sec">Section 4.2</xref>), parallel block generating (in <xref rid="sec4dot3-sensors-25-01003" ref-type="sec">Section 4.3</xref>), intra-block and cross-block conflict resolution (in <xref rid="sec4dot4-sensors-25-01003" ref-type="sec">Section 4.4</xref>), and block consensus and fork processing (in <xref rid="sec4dot5-sensors-25-01003" ref-type="sec">Section 4.5</xref>).</p><sec id="sec4dot1-sensors-25-01003"><title>4.1. Carrier Generation</title><p>In order to gain benefits, nodes in the current blockchain system need to be able to access the latest confirmed blocks and initiate transactions in a timely way, which requires the network to be able to connect in real time. When IoT nodes are in high transmission latency, it is difficult for nodes to obtain legal benefits. Meanwhile, under a normal network connection, these nodes consume a lot of computation, storage, and communication capabilities (expended costs) in block generation, block consensus, and message forwarding, and these expended costs are not rewarded once the network experiences high latency. Therefore, we design carriers that can carry the previous consumed costs of the nodes and the use a social network graph to generate the carriers.</p><p>Social network graphs are commonly used for modeling and analysis in the field of social networks. A social network graph usually consists of three parts: nodes, directed or undirected edges, and weights, and is stored and processed in the form of a matrix. Different social network graphs correspond to different matrices, and even if the number of nodes is the same, the correlation matrices are difficult to be cracked and forged due to the different names and ordering of the nodes, which provides a high level of security.</p><p>Depending on their computing and storage capacity, nodes randomly generate social network graphs; that is, limited-capacity nodes choose simple random functions and nodes with high capabilities choose complex random functions. It should be mentioned that the social network graphs generated by different random functions have no impact on the carrier&#x02019;s application, but the complex random functions increase the difficulty of cracking (refers to the behavior that carriers can still be appended to the blockchain after being tampered with by malicious nodes). Taking the randomly generated social network graph in <xref rid="sensors-25-01003-f002" ref-type="fig">Figure 2</xref> as an example, different carrier generating nodes use different node names, number and direction of edges, and weights, which ensures that the social network graph cannot be known in advance. In addition, when generating the social network matrix, different ordering of each node name produces a different social network matrix, which ensures that even if the social network graph is obtained, it is impossible to fake the social network matrix. For example, using Hash256 as a hash function [<xref rid="B40-sensors-25-01003" ref-type="bibr">40</xref>], taking (left node, right node, weight) as the input and finally generating a 256-bit string Hvalue, the above process is expressed as<disp-formula id="FD1-sensors-25-01003"><label>(1)</label><mml:math id="mm1" display="block" overflow="scroll"><mml:mrow><mml:mrow><mml:mi>H</mml:mi><mml:mi>v</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>u</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mi>H</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>h</mml:mi><mml:mn>256</mml:mn><mml:mo stretchy="false">(</mml:mo><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mi>f</mml:mi><mml:mi>t</mml:mi><mml:mo>&#x000a0;</mml:mo><mml:mi>n</mml:mi><mml:mi>o</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mo>&#x02299;</mml:mo><mml:mi>r</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mo>&#x000a0;</mml:mo><mml:mi>n</mml:mi><mml:mi>o</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mo>&#x02299;</mml:mo><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:math></disp-formula></p><p><xref rid="sensors-25-01003-f002" ref-type="fig">Figure 2</xref> illustrates the process of carrier generation. First, the nodes generate a social network graph using a random function, and then a certain ordering of the nodes is determined to obtain the correlation social network matrix. Second, the elements of each matrix are taken as inputs and computed by a pre-selected hash family function and the Merkel roots of the elements are derived using the form of a Merkel tree to obtain a hash with a fixed number of bits. This hash is filled in the appropriate position in the carrier matrix and is called the feature hash. The carrier-generating node ranks all the feature hashes, either by ranking the hash from lowest to highest or randomly, to form the carrier. It is worth noting that different ranking methods (i.e., different feature hash sequences) can also improve the security of the carriers.</p><p>Carrier generation relies on the social network matrix which is derived from the social network graph. The social network graph is generated locally by the carrier generation node with the following prerequisites. (1) Determining the number of transmissions that the carrier can accommodate. In general, a 1 MB-sized carrier block in the IoT can accommodate about 3000 transactions. (2) The social network matrix has the same number of feature hashes as the expected number of transactions, from which the size of the social network matrix is determined. (3) Nodes and edges matching the size of the social network matrix are generated locally using a random function and combined to form the social network graph. Thus, the process of generating the social network graph is conducted locally by the nodes, rather than by a network consisting of blockchain nodes, and the nodes do not need to be aware of the other nodes in the network.</p><p>The role of the carriers in the CBPA is as follows. (1) The carrier is a transaction block, but the generation of the block is parallel; i.e., the nodes complete feature-to-transaction correspondence at the same time. Compared with the limitation of the current blockchain that requires large computing power to generate a transaction block, feature-to-transaction correspondence can be accomplished with only a small amount of computing power, which enables limited-capacity nodes in the IoT to participate in the generation of the blocks as well. (2) In the current blockchain system, when the network is in a high-latency connection state, it means that locally generated blocks are not able to gain benefits with high probability. However, in the CBPA, by participating in block generation through carriers, the previous work is retained in the carriers, and the consensus is broadcasted to the entire network by the nodes with a normal network connection, so that all the nodes participating in the carrier generation can obtain legal benefits. Based on the above analysis, the use of carriers does not require any assumptions, i.e., there is no need to add additional devices to the current blockchain network or to change the data transmission protocol of the current blockchain. Furthermore, carrier generation based on social network graphs is appropriate for the following reasons. (1) The carrier is based on the social network, but the nodes locally generate the social network graph using the random function, so the cost of generating social network graphs is low. (2) The carrier carries about 2000~3000 transactions and needs about 2000~3000 feature hashes, and the social network graph, which can specify the number of nodes and edges, can fully satisfy this dynamic change in the number of transactions. (3) The source files of social network graphs can be stored in blocks in the form of a matrix, which serve as the basis for the verification and traceability of carrier feature hashes. (4) When calculating feature hashes, social network graphs have the advantages of fast calculation speed, low cost, and difficult to be cracked. In summary, comparing the existing media such as audio and video, only the social network graph meets the above requirements, so we use the social network graph as the basis for generating carriers.</p></sec><sec id="sec4dot2-sensors-25-01003"><title>4.2. Carrier Block Generation</title><p>In the CBPA, the structure of carrier blocks and transaction blocks is shown in <xref rid="sensors-25-01003-f003" ref-type="fig">Figure 3</xref>. Carrier blocks are saved locally, while transaction blocks enable parallelization of blockchain activities. After calculating carrier feature hashes, the node fills the feature hash sequence into the carrier block in the format shown in <xref rid="sensors-25-01003-f003" ref-type="fig">Figure 3</xref>a. The structure of the carrier block consists of four items, the hash identifier of the block generator corresponding to the social network graph, the timestamp, the carrier block hash, and the carrier feature hash. Specifically, the hash identifier is the identity hash code of the carrier block generating node, which is the identification code assigned to the node when it first joins the blockchain system. It is unique and is used by that node to verify the authenticity of the carrier block in case the carrier block is forged. The timestamp is the time when that carrier block is generated, and the carrier block hash is the Merkel root of the binary storage file, which is determined after bits other than itself have been filled in, ensuring that the carrier block is not tampered with during propagation.</p><p><xref rid="sensors-25-01003-f003" ref-type="fig">Figure 3</xref>b illustrates the structure of the transaction block, which consists of seven items. Specifically, the parent block hash is the hash of the previous block to which this block is linked in a chain-structured blockchain system. The carrier block hash and timestamp are the same as the corresponding items in <xref rid="sensors-25-01003-f003" ref-type="fig">Figure 3</xref>a. Mining difficulty is a value set by the block generator, in the same way that it is set in the Bitcoin system. That is, if the mining difficulty is high, the block that is eventually generated has an advantage in the overall network consensus, but transaction latency is long; if the mining difficulty is low, the block is generated quickly and transaction latency is short. The number of accommodated transactions is the number of transactions that each feature hash can accommodate. The transaction information corresponding to the feature hash sequence is a storage file of the transaction block, which corresponds to each feature hash one by one. After filling all the above information, the Merkel root of the transaction block is calculated and populated with the block hash to prevent the block from being tampered with.</p><p>Two problems need to be solved in the process of block packaging: one is how to select the feature hash and the other is how to select the transaction. For the first problem, the top-ranked feature hash has a higher probability of having a corresponding transaction, and if that feature hash is selected, it is prone to conflict and the corresponding block is more likely to be discarded. Therefore, it is better to find the unverified feature hashes in the ordering of the feature hashes based on the transaction blocks collected by the node for that carrier. For the second problem, selecting a transaction with a high transaction fee will obtain a large benefit; however, there is also a high probability that the transaction will be packaged by other nodes and that the block will be discarded, meaning that there will be no benefit. Thus, when the node&#x02019;s computing power is large, transactions with high transaction fees are good choices, while when the node&#x02019;s computing power is small, transactions with low transaction fees are more likely to be verified by repeated transactions.</p><p>When a node chooses a carrier block based on local collected transactions, it calculates the number of transactions to which the carrier&#x02019;s feature hashes has been corresponded; the larger the number, the earlier the carrier becomes a carrier block and the more advantageous it is in the consensus process. The process of generating carrier blocks mainly includes the following steps.</p><p>Step 1. The nodes randomly generate a social network graph according to their capabilities and compute the correlation carrier feature hash matrix.</p><p>Step 2. The hash function is used on the elements of each feature hash matrix to compute their Merkel root, thus forming equal-length feature hashes.</p><p>Step 3. The ordering method is selected to rank the feature hashes, forming a storable binary sequence.</p><p>Step 4. Find the latest block on the blockchain based on the locally stored blockchain or by requesting the latest blockchain from a neighboring node.</p><p>Step 5. Set the mining difficulty and the number of accommodated transactions in the transaction block corresponding to the carrier feature hash.</p><p>Step 6. Fill in <xref rid="sensors-25-01003-f003" ref-type="fig">Figure 3</xref>a item by item to form the carrier block.</p><p>Step 7. Fill in <xref rid="sensors-25-01003-f003" ref-type="fig">Figure 3</xref>b item by item, where the block hash is the Merkel root after each item has been filled, forming the transaction block.</p><p>Step 8. Nodes broadcast carrier blocks and transaction blocks to the entire network, while keeping the social network graph, element ordering, and ranking rules locally stored for other nodes to check and retrieve during consensus.</p></sec><sec id="sec4dot3-sensors-25-01003"><title>4.3. Parallel Generation for Transaction Blocks</title><p>The node that initiates the transaction <italic toggle="yes">T</italic> generates a carrier block <italic toggle="yes">B</italic> at the same time, and then broadcasts <italic toggle="yes">T</italic> and <italic toggle="yes">B</italic> to the entire network, at which point other nodes can either correspond <italic toggle="yes">T</italic> to the feature hashes of the other carrier blocks or correspond other transactions to the feature hash of <italic toggle="yes">B</italic>. Depending on its computing power, a mining node may select generating multiple transaction blocks at the same moment, which may correspond to the feature hashes of multiple carrier blocks or to different feature hashes of a single carrier block. For the same carrier block, the accommodated transactions are jointly executed by multiple nodes and transaction fees are gathered collectively.</p><p>After receiving new transactions and carrier blocks, the mining node detects the transactions that have been corresponded in the carrier and counts the number of transactions whose feature hashes have been corresponded in the carrier. Subsequently, it selects the uncorresponded transactions and feature hashes, fills them into the transaction block, and broadcasts them to the entire network under the premise of satisfying the mining difficulty. The comprehensive procedure is delineated in Algorithm 1. The parallel generation process of transaction blocks shows that for a given transaction block, the filling work is conducted by multiple nodes in parallel, and for a given node, multiple transaction blocks can be selected to complete the filling work.</p><p>When the network is in a real-time connected state, IoT nodes have access to the latest blocks, transactions, and carrier blocks. In the case of a disconnected single-node network, a node can mine transaction blocks based on locally stored information and simultaneously mine multiple transaction blocks based on its computing power, and broadcast them to the entire network to reach a consensus once the network is connected. In the event that the regional network is disconnected, nodes and neighboring nodes can communicate through a network device, which cannot access the Internet but can form a LAN. Within this LAN, all blockchain activities described in <xref rid="sec4dot1-sensors-25-01003" ref-type="sec">Section 4.1</xref>, <xref rid="sec4dot2-sensors-25-01003" ref-type="sec">Section 4.2</xref> and <xref rid="sec4dot3-sensors-25-01003" ref-type="sec">Section 4.3</xref> can be operated without relying on the Internet.</p><p>In current blockchain systems, if a single-point network outage occurs, the mined blocks are discarded during the consensus process due to untimely broadcasting; if a regional network outage occurs, there is a significant latency in broadcasting it to the entire network, resulting in a long confirmation time. In the proposed CBPA architecture, a node completes only a part of the individual transaction block generation process, i.e., a feature-to-transaction correspondence. During a network disconnection at this node, the transaction blocks will be corresponded to by other nodes uninterruptedly, and will be broadcasted to the entire network after completing all correspondences. This process is independent of the nodes that are disconnected from the network; so, as long as a consensus is reached on the transaction blocks, the node can benefit from it even if a network disconnection occurs. In the case of a LAN disconnection, a node in the LAN initiates a transaction, which can then be received and verified by other nodes in the LAN as part of a single transaction block. This ultimately generates a single transaction block. Once the network is connected, the transaction block is broadcasted to the entire network in order to reach a consensus. Concurrently, the transaction generated by the node is also broadcasted to the entire network, at which point the other nodes in the network reach a consensus on the transaction block and verify the transaction. If the consensus is successful, even in the event of a network disconnection, the generated transactions can be confirmed in a shorter period of time.</p></sec><sec id="sec4dot4-sensors-25-01003"><title>4.4. Conflict Resolution for Transaction Blocks</title><p>The number of feature hashes is limited, and the number of nodes for mining the carrier blocks is uncertain. Due to network latency, nodes at different geographic locations receive the same message at different times, which could result in intra-block conflicts. That is, there are multiple transaction messages corresponding to the same feature hash and they all satisfy the mining difficulty, so then it is essential to uniquely determine the transaction when a conflict is detected in order to reduce the overhead of a subsequent resolution. Furthermore, it is possible that more than one transaction block may be linked to the same parent block, which could result in cross-block conflicts. Consequently, these blocks also need to be uniquely determined.</p><p>The metrics for resolving conflicts can be the computing power contained in the block, transaction fees, and timestamps. Specifically, the feature-to-transaction correspondence consumes the computing power of nodes, which needs to be consistent with the set mining difficulty. If the node executes the corresponding task with a difficulty higher than the mining difficulty, the security of the transaction block is enhanced. The larger the computing power contained in the block, the more difficult it is to be tampered with. Transaction fees are related to the benefit derived by the mining node; the higher the transaction fee, the greater the benefit of the node and the earlier the consensus time for that transaction block. The timestamp is related to transaction latency; the earlier the timestamp, the shorter the transaction latency. Based on the above analysis, Algorithm 2 provides details for resolving cross-block conflicts, while Algorithm 3 provides details for resolving intra-block conflicts.</p><p>In our blockchain architecture, nodes in the LAN are able to execute a transaction block conflict resolution algorithm without being connected to the Internet. They are then able to broadcast conflict-resolved transaction blocks to the LAN. Once the network is reconnected, the transaction blocks are broadcasted to the entire network so that the generated transaction blocks can reach consensus. Additionally, when some nodes that generate transaction blocks are experiencing network disconnection, the transaction block can also be broadcasted to the consensus of the entire network by the nodes that remain connected. Simultaneously, the block can be immediately broadcasted to the entire network, and nodes experiencing network disconnection can also obtain benefits.</p></sec><sec id="sec4dot5-sensors-25-01003"><title>4.5. Block Consensus and Fork Processing</title><p>After each feature hash in the transaction block corresponds one-to-one with the transaction, the transaction block hash is computed and filled in the transaction block. This transaction block is then broadcasted throughout the network for consensus. The consensus requires checking for duplicate transactions, conflicts within the same transaction block, and blockchain forks across the entire network. Duplicate transactions mean that during the process of Algorithm 3, the node determines whether a transaction is duplicated or not only by locally storing the blocks. In this case, when a node requests an update of the local blockchain from a neighboring node, it cannot acquire the latest block if it is in the LAN. Furthermore, the storage local blockchain is incomplete if the node has low capacity. Conflicts within the same transaction block refers to the fact that nodes with low capacity or network outages resolve conflicts within the transaction block based on locally stored blockchain information, and in the case where transactions may be missing, the final generated transaction block will be biased. A blockchain fork occurs when a transaction block is first generated, the transaction initiator selects the latest block on the blockchain as the parent block, and over time, there may be more than one block linked to the same parent block, or, due to network latency, the parent block that was chosen when generating the carrier block is no longer the latest block on the blockchain.</p><p>The key to resolving transaction conflicts is for nodes that are in the network-connected state to check whether the transaction has been verified and reached consensus. The solution for conflicts and forks within the same transaction block can be unified as determining the retained transaction blocks based on the number of transactions, computing power, and timestamps. Finally, consensus is reached through PBFT and the retained transaction blocks are appended to the blockchain. The detailed process is described in Algorithm 4.</p><p>In the CBPA, Algorithms 2&#x02013;4 are required to check for duplicate transactions when resolving cross-block and inter-block conflicts, thus avoiding double-spend transactions as much as possible. Against Sybil attacks, a PBFT consensus strategy is used in the block consensus process, which is shown in reference [<xref rid="B41-sensors-25-01003" ref-type="bibr">41</xref>] to prevent Sybil attacks.</p></sec></sec><sec id="sec5-sensors-25-01003"><title>5. Theoretical Analysis and Experimental Simulations</title><p>The proposed CBPA architecture with the goal of blockchain deployment on the IoT is evaluated from theoretical analysis and experimental simulations. For the theoretical analysis, we mainly prove its security and liveness. For the experimental simulations, we perform experiments to evaluate the performance such as transaction throughput, transaction latency, blocking time, and valid block rate.</p><sec id="sec5dot1-sensors-25-01003"><title>5.1. Theoretical Analysis</title><p>In order to evaluate the performance of CBPA, it is analyzed in terms of both security and liveness. Security means that if two honest nodes submit transaction blocks with the same parent block hash, then the block hash of these two transaction blocks will be the same. Liveness means that the consensus protocol ensures that the node is able to generate the next block after generating the current transaction block. In other words, the node is able to receive the latest transaction block information in time. Assume <italic toggle="yes">n</italic> is the number of nodes, <italic toggle="yes">f</italic> is the number of fault-tolerant nodes, and then the number of honest nodes is 2<italic toggle="yes">f</italic> + 1. In this context, a fault-tolerant node refers to the maximum number of malicious nodes that can be accommodated; i.e., there are at most <italic toggle="yes">f</italic> nodes that either submit incorrect block information or do not submit block information.</p><p><bold>Security</bold>. Suppose an honest node generates a transaction block <italic toggle="yes">B</italic> using Algorithm 3 and then broadcasts it to the entire network, reaching consensus with other nodes using Algorithm 4. If <italic toggle="yes">h</italic> is the block hash of <italic toggle="yes">B</italic>, then at least <italic toggle="yes">f</italic> + 1 honest nodes will receive <italic toggle="yes">h</italic>, and at most <italic toggle="yes">f</italic> fault-tolerant nodes will send a block hash <italic toggle="yes">h</italic>&#x02019; that is different from <italic toggle="yes">h</italic>. Consequently, this node can receive <italic toggle="yes">f</italic> + 1 verification pass messages for <italic toggle="yes">B</italic>; i.e., there is no honest node sending verification pass messages of <italic toggle="yes">h</italic>&#x02019; instead of <italic toggle="yes">h</italic>. When a generated block is converted from <italic toggle="yes">B</italic> to <italic toggle="yes">B</italic>&#x02019;, <italic toggle="yes">B</italic>&#x02019; will have <italic toggle="yes">B</italic> as its parent block hash, which is determined by the chain structure. In order to be able to generate <italic toggle="yes">B</italic>&#x02019;, at least <italic toggle="yes">f</italic> + 1 honest nodes need to be involved in the process of verifying <italic toggle="yes">B</italic>. Otherwise, <italic toggle="yes">B</italic> will be discarded due to not getting the required number of verifications. <italic toggle="yes">B</italic> then represents the last candidate block, influencing the generation of <italic toggle="yes">B</italic>&#x02019;. From this, it can be concluded that the premise for generating each new block is to recognize the legitimacy of the last candidate block. This is to say that either <italic toggle="yes">f</italic> + 1 honest nodes confirm that block <italic toggle="yes">B</italic> is illegal, or <italic toggle="yes">h</italic>&#x02019; and <italic toggle="yes">h</italic> are consistent. However, for <italic toggle="yes">h</italic>&#x02019;, since the number of verification pass messages does not meet the requirement, it will not be accepted by other nodes. Therefore, this inductive reasoning will always be applicable to the process of induction.</p><p><bold>Liveness</bold>. In general, following the generation of a new block <italic toggle="yes">B</italic>, the receiving nodes undertake a verification process and subsequently broadcast the result. A node that behaves reliably (verifying the block and signing it) will receive a total of <italic toggle="yes">f</italic> + 1 verification pass messages. Conversely, a node that behaves unreliably (e.g., failing to forward verification messages or forwarding error verification messages) will eventually be identified and removed from the node&#x02019;s neighborhood list according to the PBFT consensus protocol in Algorithm 4. When the number of fault-tolerant nodes reaches a threshold f (e.g., within a LAN in the IoT), the node will restart the block verification process, which serves to confirm the last parent block, transaction information, and so forth. Therefore, <italic toggle="yes">B</italic> is the last candidate block as long as the number of fault-tolerant nodes does not exceed <italic toggle="yes">f</italic>.</p><p>Furthermore, the number of times a node receives verification pass messages from <italic toggle="yes">B</italic> does not reach <italic toggle="yes">f</italic> + 1, the following four scenarios may be observed. In the first scenario, the parent block of <italic toggle="yes">B</italic> is the last block, thereby initiating the process of generating a new block. In the second scenario, <italic toggle="yes">f</italic> fault-tolerant nodes attempt to collaborate in order to make an error block the last candidate block. However, they are unsuccessful due to the absence of any verification pass messages from honest nodes. In the third scenario, the fault-tolerant node temporarily disguises itself as an honest node, thereby enabling <italic toggle="yes">B</italic> to become the last candidate block. In the final scenario, upon detecting a message exception (timeout), an honest node does not initiate a new block generation process. Instead, it awaits a verification pass message from <italic toggle="yes">B</italic>, while using Algorithm 1 to participate in the generation of other blocks. After detecting a malicious block verification message, the node discards the block and continues with the new block generation process. In accordance with the aforementioned scenarios, the last candidate block <italic toggle="yes">B</italic> will always be generated to ensure that the nodes are able to participate in the blockchain activities without any interruption.</p></sec><sec id="sec5dot2-sensors-25-01003"><title>5.2. Experimental Simulations</title><p>This section begins with an overview of the experimental environment, followed by a presentation of the baseline algorithms. Finally, the performance of CBPA is evaluated through a series of experiments.</p><sec id="sec5dot2dot1-sensors-25-01003"><title>5.2.1. Experimental Environment</title><p>We collected real-world Ethereum TXs to build a dataset suitable for the IoT transaction architecture. There are 200,000 historical transactions in this dataset. We then chose 50 transaction blocks at random and paid close attention to the block ID, block hash, timestamp, and the number of TXs for each transaction. In our experiment, we calculated the decryption time of PoW puzzles and set the latency limit for this phase to 10 min. The consensus latency time of blocks is primarily attributable to the running PBFT protocol. Additionally, the Local Binary Pattern (LBP) approach was employed to extract feature hash from the social network graph. Each feature hash was then calculated using Hash256, which in turn generated the carrier blocks. It should be noted that the various extraction approaches have no impact on the performance of the proposed CBPA architecture.</p><p>We built a small-scale IoT system using Softether VPN 4.42 Build 9798 RTM. This system contains four servers, 10 routers, and 100 clients. The clients include 60 computers, 20 virtual machines installed in the servers, and 20 mobile devices such as mobile phones/tablets. Computers are used as normal nodes, and virtual machines and mobile devices are used as limited-capacity nodes. The main problems suffered by IoT nodes contain intermittent network connection, high transmission latency, high probability of packet loss, limited resources, and changes in neighboring nodes due to frequent joining and leaving. During the execution of experiments, these actual problems are simulated using the following way. (1) Modifying the router bandwidth profile to simulate the high transmission latency of the LAN in the IoT. (2) Modifying the bandwidth profile of virtual machines to simulate that different IoT nodes have different transmission rates. (3) Moving mobile devices to a geographic location with poor network signal to simulate high transmission latency of a single node in the IoT. (4) Mobile devices actively interrupt/resume the network to detect the impact of nodes dynamically leaving/joining the IoT on the entire blockchain architecture. To align with the demands of a real-world application, each node has a maximum bandwidth of 20 Mbps, with 10 outgoing and 100 incoming connections. When the nodes are in the network connected state, the average network latency is set to 32 ms (one-way transmission). When the nodes are in the network disconnected state, the average network latency in connecting to the Internet is set to 270 ms (one-way transmission), while the average network latency is set to 54 ms. Furthermore, the Transmission Control Protocol/Internet Protocol (TCP/IP) is employed for the transmission of data within a network. Additionally, the data structure of nodes in the CBPA primarily comprises their miner ID, neighbor node set, connected neighbor node set, available neighbor node set, current management node ID set, and IP address set.</p></sec><sec id="sec5dot2dot2-sensors-25-01003"><title>5.2.2. Baseline Algorithms</title><p>To evaluate the performance of the proposed CBPA, we compared two state-of-the-art baselines, namely Scheme 1 [<xref rid="B42-sensors-25-01003" ref-type="bibr">42</xref>] and Scheme 2 [<xref rid="B43-sensors-25-01003" ref-type="bibr">43</xref>].</p><p>Scheme 1: It proposes a digital payment scheme for providing blockchain services in remote areas, utilizing proxy nodes, distributed verification techniques, and probabilistic models to achieve delayed payments.</p><p>Scheme 2: It proposes a scheme for deploying a blockchain system in a telecommunications network, and uses the decentralized federated learning method deployed in the above scheme as an example to evaluate the effectiveness of the scheme from the perspectives of throughput and block confirmation latency metrics.</p></sec><sec id="sec5dot2dot3-sensors-25-01003"><title>5.2.3. Performance Evaluation</title><p>The average throughput of three schemes (including Scheme 1, Scheme 2 and the propose CBPA) under varying transaction arrival rates is compared in <xref rid="sensors-25-01003-f004" ref-type="fig">Figure 4</xref>. Transaction arrival rate is the number of transactions entering the blockchain network per second waiting for verification, while average throughput is the number of confirmed transactions per second. When there are fewer transactions waiting for confirmation in the blockchain network, the transaction throughput and arrival rate are balanced. However, when there are more transactions waiting for confirmation, for instance with an arrival rate of 250 or 300, the average throughput of the proposed CBPA is higher than that of the other two schemes. In addition, CBPA outperforms Bitcoin and Ethereum in terms of transaction throughput. Bitcoin generates a block in 10 min with an average throughput of 9tps, and Ethereum generates a block in 8 s with an average throughput of 23tps. This demonstrates the superiority of our proposed scheme, which is attributed to the parallel solution employed in the process of block generation, whereby nodes in the blockchain collaborate to generate blocks, thereby reducing the difficulty of block generation. The CBPA architecture minimizes wasted computing power compared to the single node generation of individual blocks, thus improving the speed of block generation.</p><p><xref rid="sensors-25-01003-f005" ref-type="fig">Figure 5</xref> presents a comparison of the transaction average latency of three schemes under varying transaction arrival rates, demonstrating how the average latency changes as the number of transactions to be confirmed in the blockchain network increases. As can be seen from the figure, there is an upper bound on the number of transactions that can be processed in a timely manner when the block size is fixed. When the transaction arrival rate exceeds a certain threshold, nodes are more inclined to select transactions with a high transaction fee when generating blocks, leading to an increase in transaction latency. Moreover, Scheme 2 requires multiple iterations during the optimization process and waits for nodes with low computing power to upload model parameters, resulting in a higher average latency than CBPA. In short, the parallelism of block generation and the liveness of the architecture provide CBPA with certain advantages in average latency.</p><p><xref rid="sensors-25-01003-f006" ref-type="fig">Figure 6</xref> illustrates the changes in transaction throughput for block sizes of 0.5 MB, 1.0 MB, 1.5 MB, and 2.0 MB. From the figure, it can be seen that as the block size increases, the number of transactions that can be accommodated increases accordingly, thereby increasing transaction throughput. Nevertheless, an increase in block size results in an increase in the fork rate, which in turn prolongs the confirmation latency of certain transactions. At the same time, CBPA comprises nodes with high transmission latency, and when executing Algorithm 1, the probability of intra-block conflicts increases due to the delay in broadcasting the feature-to-transaction correspondence messages. This results in frequent execution of Algorithm 2 and a reduction in the speed of block generation. In the IoT, when the block size is large, the time spent on network transmission also increases accordingly, and there may even be transmission failures, resulting in a decrease in transaction throughput. So, compared to the other two schemes, CBPA exhibits lower transaction throughput for blocks with larger sizes.</p><p>One of the main problems faced by IoT is node failure; i.e., a node fails to respond to a message before a set time threshold, thus affecting block generation and consensus processes. <xref rid="sensors-25-01003-f007" ref-type="fig">Figure 7</xref> shows the time taken for blocking to occur for blocks with node failure rates between 5% and 20% when 50,000 transactions need to be confirmed. The horizontal axis represents the execution time of our method, and the vertical axis represents the blocking time. When the percentage of failed nodes reaches its maximum, there is a significant increase in the blocking time. According to Algorithm 1, the computation of feature-to-transaction correspondence is parallel, and the impact of node failure on block generation is limited. Moreover, nodes can obtain the current number of network nodes when generating carriers and then dynamically adjust the mining difficulty. However, due to the fixed mining difficulty of the blocks being generated when the node fails, the new mining difficulty will take effect with a delay in time. Algorithms 2 and 3 involve transaction conflict resolution, which requires nodes to reach a consensus. As the number of nodes responding in time decreases, the consensus time is extended. Subsequently, as the mining difficulty is adjusted and the total number of nodes in the network changes, the number of nodes that reach consensus also changes, resulting in a decrease and stabilization of the blocking time.</p><p>The valid block rate is the ratio of the number of blocks successfully appended to the blockchain to the number of blocks generated within a certain period of time. The number of failed nodes is the sum of the number of malicious nodes and the number of nodes whose response time exceeds the set threshold. <xref rid="sensors-25-01003-f008" ref-type="fig">Figure 8</xref> shows the variation of the valid block rate with an increasing percentage of failed nodes when the block size is 1MB. From this figure, it can be seen that when the percentage of failed nodes is 0, the valid block rate approaches 1, which is due to the presence of a small number of block forks. As the percentage of failed nodes increases, the probability of malicious nodes being selected as the main nodes increases when PBFT is executed in Algorithm 4, resulting in a decrease in the valid block rate. However, the operation of Algorithms 1&#x02013;3 is independent of the main nodes, and the liveness can also ensure the generation of valid blocks over a period of time. Therefore, the impact of failed nodes on the performance of the proposed CBPA architecture is limited.</p><p>By now we have evaluated the performance of the proposed CBPA architecture, such as transaction throughput and transaction latency. We have also shown the impact of node failure on blocking time and valid block rate, indicating the promising performance by the architecture in the IoT. By implementing a node failure recovery scheme [<xref rid="B44-sensors-25-01003" ref-type="bibr">44</xref>,<xref rid="B45-sensors-25-01003" ref-type="bibr">45</xref>,<xref rid="B46-sensors-25-01003" ref-type="bibr">46</xref>], transaction throughput can be further improved and transaction latency can be reduced. However, there is still room for improvement in the real-time transaction requirements, such as emergency transactions or online games, as the transaction throughput does not satisfy the real-time transaction requirements.</p></sec></sec><sec id="sec5dot3-sensors-25-01003"><title>5.3. Discussion</title><p>We perform a sensitivity analysis of CBPA in terms of node dynamics, transaction dynamics, and block size. First, node dynamics refer to the impact of node joining/leaving on the CBPA architecture, and during the experiments, node joining/leaving currently has no impact on block generation. Secondly, for transaction dynamics, the experiments found that when the block size is fixed, there is an upper bound on the transaction throughput, and even if the number of transactions continues to increase, the throughput value does not change significantly. Finally, when the block size continues to increase, the number of transactions that can be accommodated in each block also increases, and theoretically the transaction throughput will also increase. However, in our experiments, it is found that the dynamics of IoT nodes and network latency makes the data transmission time of larger blocks longer. Even the number of packet retransmission becomes more frequent and block transmission failure occurs, which greatly affects the processing time of nodes to obtain the latest block information and reach consensus, and ultimately leads to the existence of an upper bound of transaction throughput. Therefore, the main sensitivity factors affecting CBPA are transaction dynamics and block size.</p><p>Although the consensus mechanism like PoW consumes energy, the proposed CBPA can work in the IoT environment for the following three reasons. (1) PoW can effectively prevent Sybil attacks. Compared with PoS and Dpos, the number of communications between nodes is low, which is in line with the actual situation of IoT environment. (2) CBPA divides nodes into two types based on computing power and storage capacity, and they participate in different blockchain activities. (3) The block generator sets the mining difficulty for generating carrier blocks in <xref rid="sec4dot2-sensors-25-01003" ref-type="sec">Section 4.2</xref>. When the mining difficulty is too high, it consumes a lot of energy. At the same time, the generation time of the new block is prolonged, and there is a high probability that this block cannot reach consensus in the current epoch. Therefore, when the nodes involved in block generation know the mining difficulty of the carrier block and find that the mining difficulty is too high, they will not participate in the generation of the carrier block.</p><p>The main application field of CBPA can be described as nodes executing transactions in a blockchain manner under IoT networks. Similar to nodes under the existing Bitcoin network, nodes under the CBPA architecture are also designed to generate benefits, such as a transaction fee and block generation fee. So, in the CBPA, devices such as sensors, routers, and switches do not participate in blockchain activities, whereas devices with certain computing and storage capacity such as mobile phones, cars, servers, tablets, computers, servers, etc. can participate in blockchain activities in order to gain benefits. Since benefits are a natural incentive, each node rationally calculates the cost&#x02013;benefit ratio, and compared with PoW in the Bitcoin network, CBPA requires much less computing power from individual nodes. Furthermore, nodes in the CBPA are free to join and leave at any moment because of the blockchain system&#x02019;s anonymity (which is also consistent with the node dynamics in IoT networks). Meanwhile, as long as the transaction conforms to the blockchain rules, it can be confirmed by the nodes in the CBPA, which has a certain degree of scalability. To sum up, CBPA supports large-scale IoT networks in terms of computational overheads and scalability.</p></sec></sec><sec sec-type="conclusions" id="sec6-sensors-25-01003"><title>6. Conclusions and Future Work</title><p>This paper employs a social network graph as a carrier to develop a CBPA architecture for IoT networks. The CBPA architecture includes the generation of carriers, carrier blocks, and transaction blocks, parallel generation of transaction blocks, intra-block and cross-block conflict resolution, and block consensus and fork processing. CBPA enables nodes with high communication latency to obtain legal benefits based on previous contributions as well. Theoretical analysis indicates that CBPA has both security and liveness. The experimental results show that when the block size is 1MB, CBPA improves the average throughput by about 10% and reduces the average latency by about 14% compared to existing schemes. The proposed CBPA architecture expands the applicable blockchain network and provide a feasible scheme for IoT networks.</p><p>Despite the proposal of a block parallel generation method in the CBPA architecture, the transaction throughput remains low. This is due to the fact that the proposed method is based on a chain-structured and PoW calculation. In addition, CBPA uses the PoW during block generation, which has good performance in preventing 51% attacks, but is not friendly to IoT devices that employ small-capacity batteries. The subsequent research will be carried out in two aspects: on the one hand, a sharding scheme will be introduced to further improve the parallelism of the nodes participating in the block activity, thus increasing the transaction throughput. On the other hand, alternatives to PoW will be investigated to further expand the number and types of nodes that can participate in the IoT network, thereby reducing energy consumption during block generation and consensus.</p></sec></body><back><fn-group><fn><p><bold>Disclaimer/Publisher&#x02019;s Note:</bold> The statements, opinions and data contained in all publications are solely those of the individual author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to people or property resulting from any ideas, methods, instructions or products referred to in the content.</p></fn></fn-group><notes><title>Author Contributions</title><p>Conceptualization, X.C. and L.Z.; methodology, X.C. and L.Z.; investigation, X.C.; resources, X.C. and L.Z.; writing&#x02014;original draft preparation, X.C.; writing&#x02014;review and editing, X.C. and L.Z.; visualization, X.C. and L.Z.; supervision, X.C. and L.Z.; funding acquisition, X.C. All authors have read and agreed to the published version of the manuscript.</p></notes><notes><title>Institutional Review Board Statement</title><p>Not applicable.</p></notes><notes><title>Informed Consent Statement</title><p>Not applicable.</p></notes><notes notes-type="data-availability"><title>Data Availability Statement</title><p>Data used in the experiments were obtained from <uri xlink:href="https://xblock.pro/xblock-eth.html">https://xblock.pro/xblock-eth.html</uri> (accessed on 2 August 2024).</p></notes><notes notes-type="COI-statement"><title>Conflicts of Interest</title><p>The authors declare no conflict of interest.</p></notes><ref-list><title>References</title><ref id="B1-sensors-25-01003"><label>1.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Lee</surname><given-names>S.</given-names></name>
<name><surname>Kim</surname><given-names>J.-H.</given-names></name>
</person-group><article-title>Opportunistic block validation for IoT blockchain networks</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>666</fpage><lpage>676</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2023.3287166</pub-id></element-citation></ref><ref id="B2-sensors-25-01003"><label>2.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Tan</surname><given-names>Z.</given-names></name>
<name><surname>Dai</surname><given-names>N.</given-names></name>
<name><surname>Su</surname><given-names>Y.</given-names></name>
<name><surname>Zhang</surname><given-names>R.</given-names></name>
<name><surname>Li</surname><given-names>Y.</given-names></name>
<name><surname>Wu</surname><given-names>D.</given-names></name>
<name><surname>Li</surname><given-names>S.</given-names></name>
</person-group><article-title>Human&#x02013;machine interaction in intelligent and connected vehicles: A review of status quo, issues, and opportunities</article-title><source>IEEE Trans. Intell. Transp. Syst.</source><year>2022</year><volume>23</volume><fpage>13954</fpage><lpage>13975</lpage><pub-id pub-id-type="doi">10.1109/TITS.2021.3127217</pub-id></element-citation></ref><ref id="B3-sensors-25-01003"><label>3.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Buttar</surname><given-names>H.M.</given-names></name>
<name><surname>Aman</surname><given-names>W.</given-names></name>
<name><surname>Rahman</surname><given-names>M.M.U.</given-names></name>
<name><surname>Abbasi</surname><given-names>Q.H.</given-names></name>
</person-group><article-title>Countering active attacks on RAFT-based IoT blockchain networks</article-title><source>IEEE Sens. J.</source><year>2023</year><volume>23</volume><fpage>14691</fpage><lpage>14699</lpage><pub-id pub-id-type="doi">10.1109/JSEN.2023.3274687</pub-id></element-citation></ref><ref id="B4-sensors-25-01003"><label>4.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Xian</surname><given-names>Y.</given-names></name>
<name><surname>Zhou</surname><given-names>L.</given-names></name>
<name><surname>Jiang</surname><given-names>J.</given-names></name>
<name><surname>Wang</surname><given-names>B.</given-names></name>
<name><surname>Huo</surname><given-names>H.</given-names></name>
<name><surname>Liu</surname><given-names>P.</given-names></name>
</person-group><article-title>A distributed efficient blockchain oracle scheme for Internet of Things</article-title><source>IEICE Trans. Commun.</source><year>2024</year><volume>E107-B</volume><fpage>573</fpage><lpage>582</lpage><pub-id pub-id-type="doi">10.23919/transcom.2023EBP3156</pub-id></element-citation></ref><ref id="B5-sensors-25-01003"><label>5.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Merlec</surname><given-names>M.M.</given-names></name>
<name><surname>In</surname><given-names>H.P.</given-names></name>
</person-group><article-title>SC-CAAC: A smart-contract-based context-aware access control scheme for blockchain-enabled IoT Systems</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>19866</fpage><lpage>19881</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2024.3371504</pub-id></element-citation></ref><ref id="B6-sensors-25-01003"><label>6.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Zhang</surname><given-names>Y.</given-names></name>
<name><surname>Yang</surname><given-names>J.</given-names></name>
<name><surname>Lei</surname><given-names>H.</given-names></name>
<name><surname>Bao</surname><given-names>Z.</given-names></name>
<name><surname>Lu</surname><given-names>N.</given-names></name>
<name><surname>Shi</surname><given-names>W.</given-names></name>
<name><surname>Chen</surname><given-names>B.</given-names></name>
</person-group><article-title>PACTA: An IoT data privacy regulation compliance scheme using TEE and blockchain</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>8882</fpage><lpage>8893</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2023.3321308</pub-id></element-citation></ref><ref id="B7-sensors-25-01003"><label>7.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Chen</surname><given-names>Y.</given-names></name>
<name><surname>Li</surname><given-names>B.</given-names></name>
<name><surname>Li</surname><given-names>W.</given-names></name>
<name><surname>Zeng</surname><given-names>B.</given-names></name>
<name><surname>Yin</surname><given-names>J.</given-names></name>
<name><surname>Deng</surname><given-names>S.</given-names></name>
</person-group><article-title>Blockchain-based Nash bargaining for task scheduling in IoT edge computing environments</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>13851</fpage><lpage>13864</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2023.3340643</pub-id></element-citation></ref><ref id="B8-sensors-25-01003"><label>8.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Peng</surname><given-names>K.</given-names></name>
<name><surname>Xie</surname><given-names>J.S.</given-names></name>
<name><surname>Wei</surname><given-names>L.</given-names></name>
<name><surname>Hu</surname><given-names>J.</given-names></name>
<name><surname>Hu</surname><given-names>X.Y.</given-names></name>
<name><surname>Deng</surname><given-names>T.P.</given-names></name>
</person-group><article-title>Clustering-based collaborative storage for blockchain in IoT systems</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>33847</fpage><lpage>33860</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2024.3434583</pub-id></element-citation></ref><ref id="B9-sensors-25-01003"><label>9.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Bataineh</surname><given-names>M.R.</given-names></name>
<name><surname>Mardini</surname><given-names>W.</given-names></name>
<name><surname>Khamayseh</surname><given-names>Y.</given-names></name>
<name><surname>Yassein</surname><given-names>M.M.B.</given-names></name>
</person-group><article-title>Novel and secure blockchain framework for health applications in IoT</article-title><source>IEEE Access</source><year>2022</year><volume>10</volume><fpage>14914</fpage><lpage>14926</lpage><pub-id pub-id-type="doi">10.1109/ACCESS.2022.3147795</pub-id></element-citation></ref><ref id="B10-sensors-25-01003"><label>10.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Hu</surname><given-names>W.</given-names></name>
<name><surname>Yu</surname><given-names>Y.</given-names></name>
<name><surname>Hao</surname><given-names>X.</given-names></name>
<name><surname>Yeoh</surname><given-names>P.L.</given-names></name>
<name><surname>Guo</surname><given-names>L.</given-names></name>
<name><surname>Li</surname><given-names>Y.</given-names></name>
</person-group><article-title>Cross-chain mapping blockchain: Scalable data management in massive IoT networks</article-title><source>Digital Commu. Netw.</source><year>2024</year><volume>11</volume><pub-id pub-id-type="doi">10.1016/j.dcan.2024.11.001</pub-id></element-citation></ref><ref id="B11-sensors-25-01003"><label>11.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Ganapathy</surname><given-names>G.</given-names></name>
<name><surname>Anand</surname><given-names>S.J.</given-names></name>
<name><surname>Jayaprakash</surname><given-names>M.</given-names></name>
<name><surname>Lakshmi</surname><given-names>S.</given-names></name>
<name><surname>Banu Priya</surname><given-names>V.</given-names></name>
<name><surname>Samuthira</surname><given-names>V.</given-names></name>
</person-group><article-title>A blockchain based federated deep learning model for secured data transmission in healthcare IoT networks</article-title><source>Meas. Sens.</source><year>2024</year><volume>33</volume><fpage>101176</fpage><pub-id pub-id-type="doi">10.1016/j.measen.2024.101176</pub-id></element-citation></ref><ref id="B12-sensors-25-01003"><label>12.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Wu</surname><given-names>X.</given-names></name>
<name><surname>Wang</surname><given-names>Z.</given-names></name>
<name><surname>Li</surname><given-names>X.</given-names></name>
<name><surname>Chen</surname><given-names>L.</given-names></name>
</person-group><article-title>DBPBFT: A hierarchical PBFT consensus algorithm with dual blockchain for IoT</article-title><source>Future Gener. Comput. Syst.</source><year>2025</year><volume>162</volume><fpage>107429</fpage><pub-id pub-id-type="doi">10.1016/j.future.2024.07.007</pub-id></element-citation></ref><ref id="B13-sensors-25-01003"><label>13.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Sayed</surname><given-names>A.I.E.</given-names></name>
<name><surname>Abdelaziz</surname><given-names>M.</given-names></name>
<name><surname>Hussein</surname><given-names>M.</given-names></name>
<name><surname>Elbayoumy</surname><given-names>A.D.</given-names></name>
</person-group><article-title>DDoS mitigation in IoT using machine learning and blockchain integration</article-title><source>IEEE Netw. Lett.</source><year>2024</year><volume>6</volume><fpage>152</fpage><lpage>155</lpage><pub-id pub-id-type="doi">10.1109/LNET.2024.3377355</pub-id></element-citation></ref><ref id="B14-sensors-25-01003"><label>14.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Deep</surname><given-names>A.</given-names></name>
<name><surname>Perrusqu&#x000ed;a</surname><given-names>A.</given-names></name>
<name><surname>Aljaburi</surname><given-names>L.</given-names></name>
<name><surname>Al-Rubaye</surname><given-names>S.</given-names></name>
<name><surname>Guo</surname><given-names>W.S.</given-names></name>
</person-group><article-title>A novel distributed authentication of blockchain technology integration in IoT services</article-title><source>IEEE Access</source><year>2024</year><volume>12</volume><fpage>9550</fpage><lpage>9562</lpage><pub-id pub-id-type="doi">10.1109/ACCESS.2024.3349955</pub-id></element-citation></ref><ref id="B15-sensors-25-01003"><label>15.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Zheng</surname><given-names>K.</given-names></name>
<name><surname>Luo</surname><given-names>R.</given-names></name>
<name><surname>Liu</surname><given-names>X.</given-names></name>
<name><surname>Qiu</surname><given-names>J.</given-names></name>
<name><surname>Liu</surname><given-names>J.</given-names></name>
</person-group><article-title>Distributed DDPG-based resource allocation for age of information minimization in mobile wireless-powered Internet of Things</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>29102</fpage><lpage>29115</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2024.3406044</pub-id></element-citation></ref><ref id="B16-sensors-25-01003"><label>16.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Saadat</surname><given-names>K.</given-names></name>
<name><surname>Wang</surname><given-names>N.</given-names></name>
<name><surname>Tafazolli</surname><given-names>R.</given-names></name>
</person-group><article-title>AI-enabled blockchain consensus node selection in cluster-based vehicular networks</article-title><source>IEEE Netw. Lett.</source><year>2023</year><volume>5</volume><fpage>115</fpage><lpage>119</lpage><pub-id pub-id-type="doi">10.1109/LNET.2023.3238964</pub-id></element-citation></ref><ref id="B17-sensors-25-01003"><label>17.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Kumar</surname><given-names>R.</given-names></name>
<name><surname>Javeed</surname><given-names>D.</given-names></name>
<name><surname>Aljuhani</surname><given-names>A.</given-names></name>
<name><surname>Jolfaei</surname><given-names>A.</given-names></name>
<name><surname>Kumar</surname><given-names>P.</given-names></name>
<name><surname>Islam</surname><given-names>A.K.M.N.</given-names></name>
</person-group><article-title>Blockchain-based authentication and explainable AI for securing consumer IoT applications</article-title><source>IEEE Trans. Consum. Electron.</source><year>2024</year><volume>70</volume><fpage>1145</fpage><lpage>1154</lpage><pub-id pub-id-type="doi">10.1109/TCE.2023.3320157</pub-id></element-citation></ref><ref id="B18-sensors-25-01003"><label>18.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Deebak</surname><given-names>B.D.</given-names></name>
<name><surname>Memon</surname><given-names>F.H.</given-names></name>
<name><surname>Khowaja</surname><given-names>S.A.</given-names></name>
<name><surname>Dev</surname><given-names>K.</given-names></name>
<name><surname>Wang</surname><given-names>W.</given-names></name>
<name><surname>Qureshi</surname><given-names>N.M.F.</given-names></name>
<name><surname>Su</surname><given-names>C.</given-names></name>
</person-group><article-title>A lightweight blockchain-based remote mutual authentication for AI-empowered IoT sustainable computing systems</article-title><source>IEEE Internet Things J.</source><year>2023</year><volume>10</volume><fpage>6652</fpage><lpage>6660</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2022.3152546</pub-id></element-citation></ref><ref id="B19-sensors-25-01003"><label>19.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Ge</surname><given-names>X.</given-names></name>
<name><surname>Yang</surname><given-names>D.</given-names></name>
<name><surname>Lv</surname><given-names>Y.</given-names></name>
<name><surname>Wang</surname><given-names>F.</given-names></name>
<name><surname>Yu</surname><given-names>J.</given-names></name>
<name><surname>Lu</surname><given-names>J.</given-names></name>
<name><surname>Yang</surname><given-names>Z.</given-names></name>
<name><surname>Tian</surname><given-names>Y.</given-names></name>
<name><surname>Ren</surname><given-names>H.</given-names></name>
</person-group><article-title>Blockchain and green certificates based market structure and transaction mechanism of direct power-purchase for industrial users</article-title><source>IEEE Trans. Ind. Appl.</source><year>2023</year><volume>59</volume><fpage>2892</fpage><lpage>2903</lpage><pub-id pub-id-type="doi">10.1109/TIA.2023.3246966</pub-id></element-citation></ref><ref id="B20-sensors-25-01003"><label>20.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Xu</surname><given-names>L.D.</given-names></name>
<name><surname>Lu</surname><given-names>Y.</given-names></name>
<name><surname>Li</surname><given-names>L.</given-names></name>
</person-group><article-title>Embedding blockchain technology into IoT for security: A survey</article-title><source>IEEE Internet Things J.</source><year>2021</year><volume>8</volume><fpage>10452</fpage><lpage>10473</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2021.3060508</pub-id></element-citation></ref><ref id="B21-sensors-25-01003"><label>21.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Cui</surname><given-names>J.</given-names></name>
<name><surname>Li</surname><given-names>Y.</given-names></name>
<name><surname>Zhang</surname><given-names>Q.</given-names></name>
<name><surname>Zhong</surname><given-names>H.</given-names></name>
<name><surname>Gu</surname><given-names>C.</given-names></name>
<name><surname>He</surname><given-names>D.</given-names></name>
</person-group><article-title>DSChain: A blockchain system for complete lifecycle security of data in Internet of Things</article-title><source>IEEE Trans. Depend. Secure Comput.</source><year>2024</year><volume>21</volume><fpage>3977</fpage><lpage>3993</lpage><pub-id pub-id-type="doi">10.1109/TDSC.2023.3337093</pub-id></element-citation></ref><ref id="B22-sensors-25-01003"><label>22.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Zuo</surname><given-names>Y.</given-names></name>
<name><surname>Guo</surname><given-names>J.</given-names></name>
<name><surname>Gao</surname><given-names>N.</given-names></name>
<name><surname>Zhu</surname><given-names>Y.</given-names></name>
<name><surname>Jin</surname><given-names>S.</given-names></name>
<name><surname>Li</surname><given-names>X.</given-names></name>
</person-group><article-title>A survey of blockchain and artificial intelligence for 6G wireless communications</article-title><source>IEEE Commun. Surv. Tutor.</source><year>2023</year><volume>25</volume><fpage>2494</fpage><lpage>2528</lpage><pub-id pub-id-type="doi">10.1109/COMST.2023.3315374</pub-id></element-citation></ref><ref id="B23-sensors-25-01003"><label>23.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Abdulrahman</surname><given-names>Y.</given-names></name>
<name><surname>Parezanovic</surname><given-names>V.</given-names></name>
<name><surname>Svetinovic</surname><given-names>D.</given-names></name>
</person-group><article-title>AI-blockchain systems in aerospace engineering and management: Review and challenges</article-title><source>Proceedings of the 30th Telecommunications Forum(TELFOR)</source><conf-loc>Belgrade, Serbia</conf-loc><conf-date>15&#x02013;16 November 2022</conf-date><fpage>1</fpage><lpage>4</lpage><pub-id pub-id-type="doi">10.1109/TELFOR56187.2022.9983700</pub-id></element-citation></ref><ref id="B24-sensors-25-01003"><label>24.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Sajjad</surname><given-names>A.</given-names></name>
<name><surname>Zhang</surname><given-names>Q.</given-names></name>
<name><surname>Ciampi</surname><given-names>F.</given-names></name>
<name><surname>Pascucci</surname><given-names>F.</given-names></name>
<name><surname>Gupta</surname><given-names>B.</given-names></name>
</person-group><article-title>What motivates Bitcoin miners to practice Bitcoin mining: An assessment based on behavioral reasoning theory</article-title><source>IEEE Trans. Eng. Manag.</source><year>2024</year><volume>71</volume><fpage>8209</fpage><lpage>8222</lpage><pub-id pub-id-type="doi">10.1109/TEM.2023.3335662</pub-id></element-citation></ref><ref id="B25-sensors-25-01003"><label>25.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Mighan</surname><given-names>S.N.</given-names></name>
<name><surname>Mi&#x00161;i&#x00107;</surname><given-names>J.</given-names></name>
<name><surname>Mi&#x00161;i&#x00107;</surname><given-names>V.B.</given-names></name>
</person-group><article-title>Block and transaction delivery in Ethereum network</article-title><source>IEEE Trans. Netw. Sci. Eng.</source><year>2024</year><volume>11</volume><fpage>926</fpage><lpage>942</lpage><pub-id pub-id-type="doi">10.1109/TNSE.2023.3310811</pub-id></element-citation></ref><ref id="B26-sensors-25-01003"><label>26.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Yang</surname><given-names>S.</given-names></name>
<name><surname>Chen</surname><given-names>Z.</given-names></name>
<name><surname>Cui</surname><given-names>L.</given-names></name>
<name><surname>Xu</surname><given-names>M.</given-names></name>
<name><surname>Ming</surname><given-names>Z.</given-names></name>
<name><surname>Xu</surname><given-names>K.</given-names></name>
</person-group><article-title>CoDAG: An efficient and compacted DAG-based blockchain protocol</article-title><source>Proceedings of the 2019 IEEE International Conference on Blockchain (Blockchain)</source><conf-loc>Atlanta, GA, USA</conf-loc><conf-date>14&#x02013;17 July 2019</conf-date><fpage>314</fpage><lpage>318</lpage><pub-id pub-id-type="doi">10.1109/Blockchain.2019.00049</pub-id></element-citation></ref><ref id="B27-sensors-25-01003"><label>27.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Ni</surname><given-names>J.</given-names></name>
<name><surname>Xiao</surname><given-names>J.</given-names></name>
<name><surname>Zhang</surname><given-names>S.</given-names></name>
<name><surname>Li</surname><given-names>B.</given-names></name>
<name><surname>Li</surname><given-names>B.</given-names></name>
<name><surname>Jin</surname><given-names>H.</given-names></name>
</person-group><article-title>FLUID: Towards efficient continuous transaction processing in DAG-based blockchains</article-title><source>IEEE Trans. Knowl. Data Eng.</source><year>2023</year><volume>35</volume><fpage>12679</fpage><lpage>12692</lpage><pub-id pub-id-type="doi">10.1109/TKDE.2023.3272312</pub-id></element-citation></ref><ref id="B28-sensors-25-01003"><label>28.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Gao</surname><given-names>H.</given-names></name>
<name><surname>Li</surname><given-names>L.</given-names></name>
<name><surname>Lei</surname><given-names>H.</given-names></name>
<name><surname>Tian</surname><given-names>N.</given-names></name>
<name><surname>Lin</surname><given-names>H.</given-names></name>
<name><surname>Wan</surname><given-names>J.</given-names></name>
</person-group><article-title>One IOTA of countless legions: A next-generation botnet premises design substrated on blockchain and Internet of Things</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>9107</fpage><lpage>9126</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2023.3322716</pub-id></element-citation></ref><ref id="B29-sensors-25-01003"><label>29.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Guo</surname><given-names>F.</given-names></name>
<name><surname>Xiao</surname><given-names>X.</given-names></name>
<name><surname>Hecker</surname><given-names>A.</given-names></name>
<name><surname>Dustdar</surname><given-names>S.</given-names></name>
</person-group><article-title>An efficient graph-based IOTA tangle generation algorithm</article-title><source>Proceedings of the IEEE International Conference on Communications(ICC)</source><conf-loc>Rome, Italy</conf-loc><conf-date>28 May&#x02013;1 June 2023</conf-date><fpage>4816</fpage><lpage>4821</lpage><pub-id pub-id-type="doi">10.1109/ICC45041.2023.10279038</pub-id></element-citation></ref><ref id="B30-sensors-25-01003"><label>30.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Zhu</surname><given-names>P.</given-names></name>
<name><surname>Hu</surname><given-names>J.</given-names></name>
<name><surname>Li</surname><given-names>X.</given-names></name>
<name><surname>Zhu</surname><given-names>Q.</given-names></name>
</person-group><article-title>Using blockchain technology to enhance the traceability of original achievements</article-title><source>IEEE Trans. Eng. Manag.</source><year>2023</year><volume>70</volume><fpage>1693</fpage><lpage>1707</lpage><pub-id pub-id-type="doi">10.1109/TEM.2021.3066090</pub-id></element-citation></ref><ref id="B31-sensors-25-01003"><label>31.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Aneja</surname><given-names>A.</given-names></name>
</person-group><article-title>Blockchain technologies in 5g and beyond connections: A review of the taxonomy, practice area, prospects, and challenges</article-title><source>Proceedings of the 2023 International Conference on Artificial Intelligence and Smart Communication (AISC)</source><conf-loc>Greater Noida, India</conf-loc><conf-date>27&#x02013;29 January 2023</conf-date><fpage>1155</fpage><lpage>1159</lpage><pub-id pub-id-type="doi">10.1109/AISC56616.2023.10085682</pub-id></element-citation></ref><ref id="B32-sensors-25-01003"><label>32.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Chen</surname><given-names>E.</given-names></name>
<name><surname>Wang</surname><given-names>S.</given-names></name>
<name><surname>Fan</surname><given-names>Y.</given-names></name>
<name><surname>Zhu</surname><given-names>Y.</given-names></name>
<name><surname>Yau</surname><given-names>S.S.</given-names></name>
</person-group><article-title>SaaSC: Toward Pay-as-You-Go mode for software service transactions based on blockchain&#x02019;s smart legal contracts</article-title><source>IEEE Trans. Serv. Comput.</source><year>2023</year><volume>16</volume><fpage>3665</fpage><lpage>3681</lpage><pub-id pub-id-type="doi">10.1109/TSC.2023.3267489</pub-id></element-citation></ref><ref id="B33-sensors-25-01003"><label>33.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Shi</surname><given-names>L.</given-names></name>
<name><surname>Wang</surname><given-names>T.</given-names></name>
<name><surname>Li</surname><given-names>J.</given-names></name>
<name><surname>Zhang</surname><given-names>S.</given-names></name>
<name><surname>Guo</surname><given-names>S.</given-names></name>
</person-group><article-title>Pooling is not favorable: Decentralize mining power of PoW blockchain using age-of-work</article-title><source>IEEE Trans. Cloud Comput.</source><year>2023</year><volume>11</volume><fpage>2756</fpage><lpage>2769</lpage><pub-id pub-id-type="doi">10.1109/TCC.2022.3226496</pub-id></element-citation></ref><ref id="B34-sensors-25-01003"><label>34.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Chang</surname><given-names>S.-Y.</given-names></name>
</person-group><article-title>Mining power misestimation in PoW blockchain</article-title><source>Proceedings of the 2020 IEEE 20th International Conference on Software Quality, Reliability and Security Companion (QRS-C)</source><conf-loc>Macau, China</conf-loc><conf-date>11&#x02013;14 December 2020</conf-date><fpage>148</fpage><lpage>152</lpage><pub-id pub-id-type="doi">10.1109/QRS-C51114.2020.00034</pub-id></element-citation></ref><ref id="B35-sensors-25-01003"><label>35.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Siddiqui</surname><given-names>S.</given-names></name>
<name><surname>Srivastava</surname><given-names>V.</given-names></name>
<name><surname>Maheshwari</surname><given-names>R.</given-names></name>
<name><surname>Gujar</surname><given-names>S.</given-names></name>
</person-group><article-title>QuickSync: A quickly synchronizing PoS-based blockchain protocol</article-title><source>Proceedings of the 2023 IEEE International Conference on Blockchain and Cryptocurrency (ICBC)</source><conf-loc>Dubai, United Arab Emirates</conf-loc><conf-date>1&#x02013;5 May 2023</conf-date><fpage>1</fpage><lpage>2</lpage><pub-id pub-id-type="doi">10.1109/ICBC56567.2023.10174928</pub-id></element-citation></ref><ref id="B36-sensors-25-01003"><label>36.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Qu</surname><given-names>C.</given-names></name>
<name><surname>Xiong</surname><given-names>H.</given-names></name>
<name><surname>Wang</surname><given-names>S.</given-names></name>
<name><surname>Niu</surname><given-names>Y.</given-names></name>
<name><surname>Li</surname><given-names>J.</given-names></name>
</person-group><article-title>Dioxide: A proof-of-stake blockchain consensus on asynchronous consensus zones</article-title><source>Proceedings of the 2022 4th International Conference on Advances in Computer Technology, Information Science and Communications (CTISC)</source><conf-loc>Suzhou, China</conf-loc><conf-date>22&#x02013;24 April 2022</conf-date><fpage>1</fpage><lpage>6</lpage><pub-id pub-id-type="doi">10.1109/CTISC54888.2022.9849722</pub-id></element-citation></ref><ref id="B37-sensors-25-01003"><label>37.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Guo</surname><given-names>H.</given-names></name>
<name><surname>Xu</surname><given-names>M.</given-names></name>
<name><surname>Zhang</surname><given-names>J.</given-names></name>
<name><surname>Liu</surname><given-names>C.</given-names></name>
<name><surname>Ranjan</surname><given-names>R.</given-names></name>
<name><surname>Yu</surname><given-names>D.</given-names></name>
<name><surname>Cheng</surname><given-names>X.</given-names></name>
</person-group><article-title>BFT-DSN: A Byzantine fault-tolerant decentralized storage network</article-title><source>IEEE Trans. Comput.</source><year>2024</year><volume>73</volume><fpage>1300</fpage><lpage>1312</lpage><pub-id pub-id-type="doi">10.1109/TC.2024.3365953</pub-id></element-citation></ref><ref id="B38-sensors-25-01003"><label>38.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Wang</surname><given-names>S.</given-names></name>
<name><surname>Ye</surname><given-names>D.</given-names></name>
<name><surname>Huang</surname><given-names>X.</given-names></name>
<name><surname>Yu</surname><given-names>R.</given-names></name>
<name><surname>Wang</surname><given-names>Y.</given-names></name>
<name><surname>Zhang</surname><given-names>Y.</given-names></name>
</person-group><article-title>Consortium blockchain for secure resource sharing in vehicular edge computing: A contract-based approach</article-title><source>IEEE Trans. Netw. Sci. Eng.</source><year>2021</year><volume>8</volume><fpage>1189</fpage><lpage>1201</lpage><pub-id pub-id-type="doi">10.1109/TNSE.2020.3004475</pub-id></element-citation></ref><ref id="B39-sensors-25-01003"><label>39.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Feng</surname><given-names>L.</given-names></name>
<name><surname>Ding</surname><given-names>Y.</given-names></name>
<name><surname>Tan</surname><given-names>Y.</given-names></name>
<name><surname>Fu</surname><given-names>X.</given-names></name>
<name><surname>Wang</surname><given-names>K.</given-names></name>
<name><surname>Chang</surname><given-names>J.S.</given-names></name>
</person-group><article-title>Trusted-committee-based secure and scalable BFT consensus for consortium blockchain</article-title><source>Proceedings of the 18th International Conference on Mobility, Sensing and Networking (MSN)</source><conf-loc>Guangzhou, China</conf-loc><conf-date>14&#x02013;16 December 2022</conf-date><fpage>363</fpage><lpage>370</lpage><pub-id pub-id-type="doi">10.1109/MSN57253.2022.00066</pub-id></element-citation></ref><ref id="B40-sensors-25-01003"><label>40.</label><element-citation publication-type="confproc"><person-group person-group-type="author">
<name><surname>Kumar</surname><given-names>A.</given-names></name>
<name><surname>Anathajothi</surname><given-names>K.</given-names></name>
</person-group><article-title>Hashing in blockchain using Merkle tree PoW cosensus algorithms</article-title><source>Proceedings of the 2024 International Conference on Trends in Quantum Computing and Emerging Business Technologies</source><conf-loc>Pune, India</conf-loc><conf-date>22&#x02013;23 March 2024</conf-date><fpage>1</fpage><lpage>5</lpage><pub-id pub-id-type="doi">10.1109/TQCEBT59414.2024.10545062</pub-id></element-citation></ref><ref id="B41-sensors-25-01003"><label>41.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Liu</surname><given-names>Y.</given-names></name>
<name><surname>Xing</surname><given-names>X.</given-names></name>
<name><surname>Cheng</surname><given-names>H.</given-names></name>
<name><surname>Li</surname><given-names>D.</given-names></name>
<name><surname>Guan</surname><given-names>Z.</given-names></name>
<name><surname>Liu</surname><given-names>J.</given-names></name>
<name><surname>Wu</surname><given-names>Q.</given-names></name>
</person-group><article-title>A flexible sharding blockchain protocol based on cross-shard Byzantine fault tolerance</article-title><source>IEEE Trans. Inf. Forensics Secur.</source><year>2023</year><volume>18</volume><fpage>2276</fpage><lpage>2291</lpage><pub-id pub-id-type="doi">10.1109/TIFS.2023.3266628</pub-id></element-citation></ref><ref id="B42-sensors-25-01003"><label>42.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Hu</surname><given-names>Y.</given-names></name>
<name><surname>Manzoor</surname><given-names>A.</given-names></name>
<name><surname>Ekparinya</surname><given-names>P.</given-names></name>
<name><surname>Liyanage</surname><given-names>M.</given-names></name>
<name><surname>Thilakarathna</surname><given-names>K.</given-names></name>
<name><surname>Jourjon</surname><given-names>G.</given-names></name>
<name><surname>Seneviratne</surname><given-names>A.</given-names></name>
</person-group><article-title>A delay-tolerant payment scheme based on the Ethereum blockchain</article-title><source>IEEE Access</source><year>2018</year><volume>7</volume><fpage>33159</fpage><lpage>33172</lpage><pub-id pub-id-type="doi">10.1109/ACCESS.2019.2903271</pub-id></element-citation></ref><ref id="B43-sensors-25-01003"><label>43.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Afraz</surname><given-names>N.</given-names></name>
<name><surname>Wilhelmi</surname><given-names>F.</given-names></name>
<name><surname>Ahmadi</surname><given-names>H.</given-names></name>
<name><surname>Ruffini</surname><given-names>M.</given-names></name>
</person-group><article-title>Blockchain and smart contracts for telecommunications: Requirements vs. cost analysis</article-title><source>IEEE Access</source><year>2023</year><volume>11</volume><fpage>95653</fpage><lpage>95666</lpage><pub-id pub-id-type="doi">10.1109/ACCESS.2023.3309423</pub-id></element-citation></ref><ref id="B44-sensors-25-01003"><label>44.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Gharib</surname><given-names>A.</given-names></name>
<name><surname>Ibnkahla</surname><given-names>M.</given-names></name>
</person-group><article-title>User security-oriented information-centric IoT nodes clustering with graph convolution networks</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>8311</fpage><lpage>8326</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2023.3318123</pub-id></element-citation></ref><ref id="B45-sensors-25-01003"><label>45.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Balasubramanian</surname><given-names>V.</given-names></name>
<name><surname>Aloqaily</surname><given-names>M.</given-names></name>
<name><surname>Reisslein</surname><given-names>M.</given-names></name>
</person-group><article-title>Fed-TSN: Joint failure probability-based federated learning for fault-tolerant time-sensitive networks</article-title><source>IEEE Trans. Netw. Serv. Manag.</source><year>2023</year><volume>20</volume><fpage>1470</fpage><lpage>1486</lpage><pub-id pub-id-type="doi">10.1109/TNSM.2023.3273396</pub-id></element-citation></ref><ref id="B46-sensors-25-01003"><label>46.</label><element-citation publication-type="journal"><person-group person-group-type="author">
<name><surname>Zhang</surname><given-names>L.</given-names></name>
<name><surname>Du</surname><given-names>Y.</given-names></name>
<name><surname>Xu</surname><given-names>J.</given-names></name>
<name><surname>Wang</surname><given-names>X.</given-names></name>
</person-group><article-title>UAV-enabled IoT: Cascading failure model and topology-control-based recovery scheme</article-title><source>IEEE Internet Things J.</source><year>2024</year><volume>11</volume><fpage>22562</fpage><lpage>22577</lpage><pub-id pub-id-type="doi">10.1109/JIOT.2024.3381735</pub-id></element-citation></ref></ref-list></back><floats-group><fig position="float" id="sensors-25-01003-f002"><label>Figure 2</label><caption><p>Illustration for the process of carrier generation.</p></caption><graphic xlink:href="sensors-25-01003-g002" position="float"/></fig><fig position="float" id="sensors-25-01003-f003"><label>Figure 3</label><caption><p>Illustration for the structure of blocks. (<bold>a</bold>) shows carrier blocks and (<bold>b</bold>) shows transaction blocks.</p></caption><graphic xlink:href="sensors-25-01003-g003" position="float"/></fig><fig position="float" id="sensors-25-01003-f004"><label>Figure 4</label><caption><p>Comparison of average throughput under varying transaction arrival rates.</p></caption><graphic xlink:href="sensors-25-01003-g004" position="float"/></fig><fig position="float" id="sensors-25-01003-f005"><label>Figure 5</label><caption><p>Comparison of average latency under varying transaction arrival rates.</p></caption><graphic xlink:href="sensors-25-01003-g005" position="float"/></fig><fig position="float" id="sensors-25-01003-f006"><label>Figure 6</label><caption><p>Comparison of transaction throughput under varying block sizes.</p></caption><graphic xlink:href="sensors-25-01003-g006" position="float"/></fig><fig position="float" id="sensors-25-01003-f007"><label>Figure 7</label><caption><p>The impact of node failure on blocking time.</p></caption><graphic xlink:href="sensors-25-01003-g007" position="float"/></fig><fig position="float" id="sensors-25-01003-f008"><label>Figure 8</label><caption><p>The impact of the percentage of failed nodes on the valid block rate.</p></caption><graphic xlink:href="sensors-25-01003-g008" position="float"/></fig></floats-group></article>