<!DOCTYPE article
PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN" "JATS-archivearticle1-3-mathml3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.3" xml:lang="en" article-type="brief-report"><?properties open_access?><processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats"><restricted-by>pmc</restricted-by></processing-meta><front><journal-meta><journal-id journal-id-type="nlm-ta">Bioinform Adv</journal-id><journal-id journal-id-type="iso-abbrev">Bioinform Adv</journal-id><journal-id journal-id-type="publisher-id">bioadv</journal-id><journal-title-group><journal-title>Bioinformatics Advances</journal-title></journal-title-group><issn pub-type="epub">2635-0041</issn><publisher><publisher-name>Oxford University Press</publisher-name></publisher></journal-meta>
<article-meta><article-id pub-id-type="pmc">PMC12098940</article-id><article-id pub-id-type="doi">10.1093/bioadv/vbaf105</article-id><article-id pub-id-type="publisher-id">vbaf105</article-id><article-categories><subj-group subj-group-type="heading"><subject>Application Note</subject><subj-group subj-group-type="category-toc-heading"><subject>Software</subject></subj-group></subj-group><subj-group subj-group-type="category-taxonomy-collection"><subject>AcademicSubjects/SCI01060</subject></subj-group></article-categories><title-group><article-title>AnnSQL: a Python SQL-based package for fast large-scale single-cell genomics analysis using minimal computational resources</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Pavan</surname><given-names>Kenny</given-names></name><aff>
<institution>Vollum Institute, Oregon Health &#x00026; Science University</institution>, Portland, OR 97239, <country country="US">United States</country></aff><aff>
<institution>Biomedical Engineering Graduate Program, Oregon Health and Science University</institution>, Portland, OR 97239, <country country="US">United States</country></aff></contrib><contrib contrib-type="author" corresp="yes"><contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-7540-7452</contrib-id><name><surname>Saunders</surname><given-names>Arpiar</given-names></name><aff>
<institution>Vollum Institute, Oregon Health &#x00026; Science University</institution>, Portland, OR 97239, <country country="US">United States</country></aff><xref rid="vbaf105-cor1" ref-type="corresp"/><!--saundear@ohsu.edu--></contrib></contrib-group><contrib-group><contrib contrib-type="editor"><name><surname>Ma</surname><given-names>Lina</given-names></name><role>Associate Editor</role></contrib></contrib-group><author-notes><corresp id="vbaf105-cor1">Corresponding author. Vollum Institute, Oregon Health &#x00026; Science University, Portland,&#x000a0;3232 SW Research Dr,&#x000a0;OR 97239, United States. E-mail: <email>saundear@ohsu.edu</email>.</corresp></author-notes><pub-date pub-type="collection"><year>2025</year></pub-date><pub-date pub-type="epub" iso-8601-date="2025-05-05"><day>05</day><month>5</month><year>2025</year></pub-date><pub-date pub-type="pmc-release"><day>05</day><month>5</month><year>2025</year></pub-date><volume>5</volume><issue>1</issue><elocation-id>vbaf105</elocation-id><history><date date-type="received"><day>11</day><month>12</month><year>2024</year></date><date date-type="rev-recd"><day>21</day><month>3</month><year>2025</year></date><date date-type="editorial-decision"><day>28</day><month>4</month><year>2025</year></date><date date-type="accepted"><day>01</day><month>5</month><year>2025</year></date><date date-type="corrected-typeset"><day>22</day><month>5</month><year>2025</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s) 2025. Published by Oxford University Press.</copyright-statement><copyright-year>2025</copyright-year><license><ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><self-uri xlink:href="vbaf105.pdf"/><abstract><title>Abstract</title><sec id="s1"><title>Summary</title><p>As single-cell genomics technologies continue to accelerate biological discovery, software tools that use elegant syntax and minimal computational resources to analyze atlas-scale datasets are increasingly needed. Here, we introduce AnnSQL, a Python package that constructs an AnnData-inspired database using the in-process DuckDb engine, enabling orders-of-magnitude performance enhancements for parsing single-cell genomics datasets with the ease of SQL. We highlight AnnSQL functionality and demonstrate transformative runtime improvements by comparing AnnData or AnnSQL operations on a 4.4 million cell single-nucleus RNA-seq dataset: AnnSQL-based operations were executed in minutes on a laptop for which equivalent operations in AnnData or Seurat largely failed (or were &#x0223c;700&#x000d7; slower) on a high-performance computing cluster. AnnSQL lowers computational barriers for large-scale single-cell/nucleus RNA-seq analysis on a personal computer, while demonstrating a promising computational infrastructure extendable for complete single-cell workflows across various genome-wide measurements.</p></sec><sec id="s2"><title>Availability and implementation</title><p>AnnSQL is a pip installable package that can be found at <ext-link xlink:href="https://github.com/ArpiarSaundersLab/annsql" ext-link-type="uri">https://github.com/ArpiarSaundersLab/annsql</ext-link> along with documentation at <ext-link xlink:href="https://docs.annsql.com" ext-link-type="uri">https://docs.annsql.com</ext-link>.</p></sec></abstract><funding-group><award-group award-type="grant"><funding-source>
<institution-wrap><institution>NIH Brain Initiative</institution><institution-id institution-id-type="DOI">10.13039/100023835</institution-id></institution-wrap>
</funding-source><award-id>R01 MH130464</award-id></award-group><award-group award-type="grant"><funding-source>
<institution-wrap><institution>Sloan Foundation, and Simons Foundation Autism Research Initiative</institution></institution-wrap>
</funding-source></award-group></funding-group><counts><page-count count="5"/></counts></article-meta></front><body><sec><title>1 Introduction</title><p>Single-cell genomics technologies have emerged as transformative tools for discovering genome-wide RNA and chromatin landscapes of complex tissue at single-cell resolution in health and disease (<xref rid="vbaf105-B11" ref-type="bibr">Nayak and Hasija 2021</xref>, <xref rid="vbaf105-B17" ref-type="bibr">Wen <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="vbaf105-B5" ref-type="bibr">Heumos <italic toggle="yes">et al.</italic> 2023</xref>). Popular software tools have converged on data structures that facilitate storage, preprocessing, and myriad downstream analyses by prioritizing organizational clarity at the cost of computational performance. For example, Scanpy (<xref rid="vbaf105-B18" ref-type="bibr">Wolf <italic toggle="yes">et al.</italic> 2018</xref>) and the Scverse ecosystem (Virshup <italic toggle="yes">et al.</italic> 2021) use AnnData, while Seurat (<xref rid="vbaf105-B2" ref-type="bibr">Butler <italic toggle="yes">et al.</italic> 2018</xref>) uses Seurat objects. Now routine, &#x0201c;atlas-scale&#x0201d; descriptions of millions of cells based on tens of thousands to millions of genomics features strain software tools that use hierarchical structures (like AnnData) and often require high-performance computing clusters to execute. We were inspired to create AnnSQL for simple analysis of large datasets because in other contexts, SQL databases are a popular storage choice due to high transactional speed of row-oriented storage formats (<xref rid="vbaf105-B12" ref-type="bibr">Plattner 2009</xref>) and because no other SQL-based single-cell genomics analysis packages currently exist.</p><p>H5 hierarchical objects like AnnData have become standard storage for single-cell genomics software development in recent years (<xref rid="vbaf105-B14" ref-type="bibr">The HDF Group, 2020/2024</xref>). AnnData provides a convenient and compact structure for storing, organizing, and analyzing high-dimensional datasets. Applications can load AnnData entirely into system memory or, for large datasets, stream AnnData from disk using the &#x0201c;backed mode&#x0201d; parameter. Although AnnData allows faster statistical operations than traditional row-oriented databases, the backed mode often lacks support for aggregate functions.</p><p>Advances in SQL databases present new opportunities for single-cell genomics applications. Traditional SQL databases are limited because they often require technical knowledge for configuring and running databases as a background system process that requires connection to the service via the application, adding complexity that restricts the ease of data exploration. As an alternative, SQLite (<xref rid="vbaf105-B4" ref-type="bibr">Gaffney <italic toggle="yes">et al.</italic> 2022</xref>) operates in-process by creating a file-based database capable of direct application access yet a reliance on row-oriented transactions can restrict performance on statistical operations. To enable high-performance statistical functions and in-process queries, DuckDb (<xref rid="vbaf105-B13" ref-type="bibr">Raasveldt and M&#x000fc;hleisen 2019</xref>) was implemented as a column-based storage engine that operates using chunked vectors of column data. Strict in-process operation allows DuckDb data to be stored in a file and accessed in a memory-efficient manner using SQL via the Python API. These two database engines have recently been profiled for use with several genomic file formats, without exploring scRNA-seq data (<xref rid="vbaf105-B7" ref-type="bibr">Kioroglou 2025</xref>). We believe the features of DuckDb nominate it as a powerful storage and processing engine for cell-by-gene feature matrices.</p><p>We developed AnnSQL to bridge the gap between AnnData objects and SQL databases for single-cell genomics analysis. AnnSQL converts each layer of the AnnData hierarchical object into an equivalent SQL table, using the Python DuckDb API. AnnSQL supports both in-memory and backed modes of AnnData, enabling larger than memory databases to be built with minimal computational resources. AnnSQL-instantiated datasets can be fluidly queried using SQL syntax, allowing aggregate and statistical functions to be performed on larger than memory datasets with exceptionally fast run times.</p></sec><sec><title>2 Materials and methods</title><sec><title>2.1 Package software structure</title><p>AnnSQL was built as an object-oriented Python package that parses the layer structure of typical AnnDataobjects into SQL tables (<xref rid="vbaf105-F1" ref-type="fig">Fig. 1C</xref>) and provides flexible parameters. All functionality presented in AnnSQL v1, exists in 3 classes: (1) The BuildDb class is used to construct both in-memory and on-diskdatabases using the DuckDb Python client API. (2) The MakeDb class can be instantiated to create an on-disk database from a properly formatted AnnData object and stored with the &#x0201c;.asql&#x0201d; file extension. (3) The class AnnSQL is the main access point to instantiate and interrogate a dataset. The package has methods for queries, allows multiple return types, and contains extended functionality to help with data preprocessing.</p><fig position="float" id="vbaf105-F1"><label>Figure 1.</label><caption><p>(A) AnnSQL workflow. AnnSQL converts AnnData objects using DuckDB to enable high-performance SQL queries. (B) Basic usage example using the pbmc68k reduced dataset provided with Scanpy. (C) The ERD of the database generated from the pbmc68k reduced dataset. (D) Runtime comparisons of six queries and filters (<xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S1A</xref>) for AnnSQL, AnnData (backed and non-backed modes displayed as on-disk and in-memory, respectively), and Seurat objects (in-memory) repeated six times for each of the six queries and filters at each library size. Shading represents 95% confidence intervals. Bottom lines represent statistical significance of each library size with respect to the comparison. Solid lines indicate significance and dashed lines indicate nonsignificance (***<italic toggle="yes">P</italic>&#x02009;&#x0003c;&#x02009;.001; paired <italic toggle="yes">t</italic>-test; Bonferroni corrected). Logos in <xref rid="vbaf105-F1" ref-type="fig">Fig. 1A </xref>both have open source licenses. MIT and BSD-3, respectively.</p></caption><graphic xlink:href="vbaf105f1" position="float"/></fig></sec><sec><title>2.2 Database construction</title><p>Each layer in a common single-cell AnnData object is a parameter in the AnnSQL and MakeDb classes. Both classes make calls to the BuildDb class to construct a relational database with the AnnData layers determined by the user (<italic toggle="yes">X</italic>, <italic toggle="yes">obs</italic>, <italic toggle="yes">var</italic>, <italic toggle="yes">var_names</italic>, <italic toggle="yes">obsm</italic>, <italic toggle="yes">varm</italic>, <italic toggle="yes">obsp</italic>, and <italic toggle="yes">uns</italic>). <italic toggle="yes">X</italic> is created as a table where each gene is a column cast as a FLOAT with the addition of a &#x0201c;cell_id&#x0201d; column to contain the cell barcode. The <italic toggle="yes">obs</italic> table structure is composed of columns for the &#x0201c;cell_id&#x0201d; and each <italic toggle="yes">obs</italic> property. The <italic toggle="yes">var</italic> table contains the vertical layer associated with the AnnData object where the auto incremented id represents the gene and each column represents <italic toggle="yes">var</italic> layer properties. Each <italic toggle="yes">obsm</italic>, <italic toggle="yes">varm</italic>, and <italic toggle="yes">obsp</italic> layer property is composed of a different data type or structure. To convert layers to SQL tables, we created a new table for each layer property. For example, the &#x0201c;X_pca&#x0201d; property of the <italic toggle="yes">obsm</italic> layer is translated into the table, &#x0201c;obsm_X_pca&#x0201d; containing the cell by PC matrix. Lastly, the <italic toggle="yes">uns</italic> AnnData layer is serialized and inserted into the &#x0201c;uns_raw&#x0201d; table. This table contains the property name defined by the key column, a serialized data value column, and the original &#x0201c;data_type&#x0201d; column, such that the data can be reconstructed. Lastly, a convenience view &#x0201c;adata&#x0201d; is created by joining the <italic toggle="yes">obs</italic> and <italic toggle="yes">X</italic> table. Developers can optionally bypass the view creation by using the &#x0201c;convenience_view&#x0201d; boolean parameter. Lastly, special characters in gene names or other table columns are stripped of non-sql safe characters and replaced with underscores.</p></sec><sec><title>2.3 Database query wrapper</title><p>The AnnSQL class contains several methods for updates, deletes, and queries. The class requires either a path to a previously built AnnSQL database or an AnnData object to load into memory. After instantiation, the query method interfaces with the database to return a pandas dataframe (default), AnnData, or Parquet file. The <italic toggle="yes">query_raw</italic> method opens a db connection and executes a SQL statement. Additionally, the methods <italic toggle="yes">show_settings</italic> and <italic toggle="yes">show_tables</italic> exist for convenience.</p></sec><sec><title>2.4 Extended functionality</title><p>AnnSQL contains functionality for basic preprocessing as methods within the AnnSQL class, which include the following: Total counts per library, counts per gene, data normalization, log transformations, gene expression variance calculation, PCA, UMAP, Leiden clustering, and differential expression, along with a variety of helper methods and plotting utilities; all documented at <ext-link xlink:href="https://docs.annsql.com" ext-link-type="uri">https://docs.annsql.com</ext-link>. To accomplish data total counts per library, calculate_total_counts iterates cells in chunks and adds the &#x0201c;total_counts&#x0201d; column to the <italic toggle="yes">X</italic> and then <italic toggle="yes">obs</italic> table. Calculating total gene counts is accomplished in the <italic toggle="yes">calculate_gene_counts</italic> method by adding a &#x0201c;total_gene_counts&#x0201d; column to the var table and using the internal SUM function. The <italic toggle="yes">expression_normalize</italic> method updates the <italic toggle="yes">X</italic> table in chunks by dividing gene counts by &#x0201c;total_counts&#x0201d; and then multiplying by the normalized value (default: 10&#x000a0;000). The <italic toggle="yes">expression_log</italic> method updates all values in the <italic toggle="yes">X</italic> table with the user-defined ln, log2, or log10 parameter options. Lastly, <italic toggle="yes">calculate_variable_genes</italic> uses the population variance function in DuckDb to calculate gene-specific expression and stores the result in the &#x0201c;variance&#x0201d; column of the <italic toggle="yes">var</italic> table. In chunk parameters, gene sample variance is calculated including Bessel&#x02019;s bias correction. The <italic toggle="yes">calculate_pca</italic> method determines principal components (PCs) for the data stored in the specified table. This method uses the top variable genes to perform PCA. The PCA calculation is performed as a hybrid of SQL and Python to create a covariance matrix and compute eigenvalues and eigenvectors, which are used to determine PCs for each cell. The results are stored in the <italic toggle="yes">PC_scores</italic> table and can be queried. After reducing the data size using PCA, we opted to implement UMAP and Leiden clustering methods as wrapper methods to existing &#x0201c;umap-learn&#x0201d; and &#x0201c;scikit-network&#x0201d; pip packages, respectively. The results of these operations are stored in the <italic toggle="yes">umap_embeddings</italic> table and as the &#x0201c;obs.leiden_clusters&#x0201d; field. Detailed descriptions of additional functionality can be found at <ext-link xlink:href="https://docs.annsql.com" ext-link-type="uri">https://docs.annsql.com</ext-link>.</p></sec><sec><title>2.5 Runtime analysis</title><p>Runtime tests were performed on simulated and Mouse Brain Atlas data (<xref rid="vbaf105-B8" ref-type="bibr">Langlieb <italic toggle="yes">et al.</italic> 2023</xref>). Simulated AnnData objects contained random expression values and saved as h5ad files ranging from 1000 to 250&#x000a0;000 cells. Each file contained 10&#x000a0;000 genes and an obs layer with random cell type assignments. File queries and filters were compared (<xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S1A</xref>) and generated the runtime results (<xref rid="vbaf105-F1" ref-type="fig">Fig.&#x000a0;1D</xref>). Additionally, a second set of <italic toggle="yes">in silico</italic> datasets were generated using Splatter, a sc/nRNA-seq simulator, with the same shapes as the randomly generated data. We applied the same analysis to these datasets and presented our findings in <xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S2A</xref>.</p><p>The Mouse Brain dataset was converted into an on-disk AnnSQL database using the MakeDb class and then queried and processed as described in <xref rid="vbaf105-T1" ref-type="table">Table&#x000a0;1</xref>. Filters are as follows:</p><table-wrap position="float" id="vbaf105-T1"><label>Table 1.</label><caption><p>Comparing operations on a 4.4 million cell dataset.<xref rid="tblfn1" ref-type="table-fn"><sup>a</sup></xref></p></caption><table frame="hsides" rules="groups"><colgroup span="1"><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="char" char="&#x000b1;" span="1"/><col valign="top" align="char" char="&#x000b1;" span="1"/><col valign="top" align="char" char="&#x000b1;" span="1"/><col valign="top" align="char" char="&#x000b1;" span="1"/></colgroup><thead><tr><th rowspan="2" colspan="1">Procedure</th><th rowspan="2" colspan="1">Approach</th><th colspan="2" rowspan="1">Laptop<hr/></th><th colspan="2" rowspan="1">HPC (s)<hr/></th></tr><tr><th rowspan="1" colspan="1">Runtime (s)</th><th rowspan="1" colspan="1">Memory (Mb)</th><th rowspan="1" colspan="1">Runtime (s)</th><th rowspan="1" colspan="1">Memory (Mb)</th></tr></thead><tbody><tr><td rowspan="4" colspan="1">Filtering</td><td rowspan="1" colspan="1">AnnSQL</td><td rowspan="1" colspan="1">0.23&#x02009;&#x000b1;&#x02009;0.01</td><td rowspan="1" colspan="1">147.3&#x02009;&#x000b1;&#x02009;34.2</td><td rowspan="1" colspan="1">0.99&#x02009;&#x000b1;&#x02009;0.14</td><td rowspan="1" colspan="1">321.6&#x02009;&#x000b1;&#x02009;2.8</td></tr><tr><td rowspan="1" colspan="1">AnnData (Backed)</td><td rowspan="1" colspan="1">171.6&#x02009;&#x000b1;&#x02009;11.3</td><td rowspan="1" colspan="1">89.6&#x02009;&#x000b1;&#x02009;0.1</td><td rowspan="1" colspan="1">149.0&#x02009;&#x000b1;&#x02009;17.5</td><td rowspan="1" colspan="1">788.6&#x02009;&#x000b1;&#x02009;67.3</td></tr><tr><td rowspan="1" colspan="1">AnnData (Memory)</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td rowspan="1" colspan="1">9.6&#x02009;&#x000b1;&#x02009;3.1</td><td rowspan="1" colspan="1">368&#x000a0;433.1&#x02009;&#x000b1;&#x02009;165.2</td></tr><tr><td rowspan="1" colspan="1">Seurat</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td></tr><tr><td rowspan="4" colspan="1">Total Library Counts</td><td rowspan="1" colspan="1">AnnSQL</td><td rowspan="1" colspan="1">257.4&#x02009;&#x000b1;&#x02009;8.0</td><td rowspan="1" colspan="1">3799.4&#x02009;&#x000b1;&#x02009;10.1</td><td rowspan="1" colspan="1">446.7&#x02009;&#x000b1;&#x02009;8.3</td><td rowspan="1" colspan="1">4347.4&#x02009;&#x000b1;&#x02009;52.7</td></tr><tr><td rowspan="1" colspan="1">AnnData (Backed)</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Not Supported</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Not Supported</italic>
</td></tr><tr><td rowspan="1" colspan="1">AnnData (Memory)</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td></tr><tr><td rowspan="1" colspan="1">Seurat</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td></tr><tr><td rowspan="4" colspan="1">Normalize Expression</td><td rowspan="1" colspan="1">AnnSQL</td><td rowspan="1" colspan="1">3924.7&#x02009;&#x000b1;&#x02009;59.3</td><td rowspan="1" colspan="1">29&#x000a0;407.8&#x02009;&#x000b1;&#x02009;21.5</td><td rowspan="1" colspan="1">10&#x000a0;922.6&#x02009;&#x000b1;&#x02009;178.2</td><td rowspan="1" colspan="1">56&#x000a0;965.9&#x02009;&#x000b1;&#x02009;29.9</td></tr><tr><td rowspan="1" colspan="1">AnnData (Backed)</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Not Supported</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Not Supported</italic>
</td></tr><tr><td rowspan="1" colspan="1">AnnData (Memory)</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td></tr><tr><td rowspan="1" colspan="1">Seurat</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td></tr><tr><td rowspan="4" colspan="1">Log Transform</td><td rowspan="1" colspan="1">AnnSQL</td><td rowspan="1" colspan="1">4057.4&#x02009;&#x000b1;&#x02009;65.0</td><td rowspan="1" colspan="1">29&#x000a0;879.3&#x02009;&#x000b1;&#x02009;21.7</td><td rowspan="1" colspan="1">12&#x000a0;739.6&#x02009;&#x000b1;&#x02009;166.9</td><td rowspan="1" colspan="1">29&#x000a0;813.2&#x02009;&#x000b1;&#x02009;124.6</td></tr><tr><td rowspan="1" colspan="1">AnnData (Backed)</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Not Supported</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Not Supported</italic>
</td></tr><tr><td rowspan="1" colspan="1">AnnData (Memory)</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td></tr><tr><td rowspan="1" colspan="1">Seurat</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td><td colspan="2" align="center" rowspan="1">
<italic toggle="yes">Memory Error</italic>
</td></tr></tbody></table><table-wrap-foot><fn id="tblfn1"><label>a</label><p>Runtime and memory usage (mean &#x000b1; SD; <italic toggle="yes">n</italic>&#x02009;=&#x02009;5) of procedures for equivalent AnnSQL and AnnData objects containing 4.4 million cells. Converting the dataset to a Seurat object failed due to memory constraints. Scanpy preprocessing functions were used for AnnData, while AnnSQL extended functionality methods were used for the AnnSQL database. &#x0201c;Memory Error&#x0201d; indicates the run exceeded available memory; &#x0201c;Not Supported&#x0201d; indicates the procedure is incompatible with AnnData in backed mode.</p></fn></table-wrap-foot></table-wrap><p>
<bold>AnnData</bold>
</p><p>
<italic toggle="yes">adata[adata[:,&#x0201c;ENSMUSG00000070880&#x0201d;].X&#x02009;&#x0003e;&#x02009;0, &#x0201c;ENSMUSG00000070880&#x0201d;]</italic>
</p><p>
<bold>AnnSQL</bold>
</p><p>
<italic toggle="yes">asql.query(&#x0201c;SELECT ENSMUSG00000070880 FROM X</italic>
</p><p>
<italic toggle="yes">WHERE ENSMUSG00000070880&#x02009;&#x0003e;&#x02009;0&#x0201d;)</italic>
</p><p>Runtime analyses were performed on an Ubuntu 24.04 laptop, containing 40&#x02009;Gb memory, 1Tb SSD Drive, and a 12th Gen Intel<sup>&#x000ae;</sup> Core&#x02122; i7-1255U&#x02009;&#x000d7;&#x02009;12 CPU or a HPC single node containing 46 CPUS (Intel<sup>&#x000ae;</sup> Xeon<sup>&#x000ae;</sup> Gold 6542Y), 512&#x02009;Gb memory and high-performance storage. Runtime scripts are in the &#x0201c;examples/analyses&#x0201d; repository.</p></sec></sec><sec><title>3 Results</title><sec><title>3.1 Package capabilities</title><p>The AnnSQL package enables SQL-based queries on AnnData objects, returning results as either an AnnData object, Pandas dataframe (<xref rid="vbaf105-B9" ref-type="bibr">McKinney 2010</xref>), or Parquet file (<xref rid="vbaf105-B16" ref-type="bibr">Vohra 2016</xref>), thus seamlessly supporting a variety of downstream analysis tools or pipelines. Functionally, AnnSQL captures the AnnData hierarchical H5 data structure and represents the data in a relational database using the in-process DuckDb engine (<xref rid="vbaf105-F1" ref-type="fig">Fig.&#x000a0;1A</xref>). AnnSQL supports in-memory and on-disk database representations, useful for smaller or larger datasets, respectively. AnnSQL databases are built using the MakeDb class that supports AnnData inputs from both backed and non-backed modes. Once a database has been created and instantiated using the AnnSQL class (<xref rid="vbaf105-F1" ref-type="fig">Fig.&#x000a0;1B</xref> and <xref rid="vbaf105-F1" ref-type="fig">C</xref>), the AnnSQL package provides methods for querying, updating, and deleting cell or genome-feature data, as well as extended functionality to perform common single-cell manipulations or analyses, such as normalization, log transforms, determining library or gene counts, calculating feature variance, principal component analysis (PCA), and differential expression.</p></sec><sec><title>3.2 Runtime estimates</title><p>To systematically compare runtime differences across AnnData filters and AnnSQL queries, we generated six increasing complex queries of synthetic scRNA-seq data and stratified our analysis by in-memory or on-disk modes for each method (<xref rid="vbaf105-F1" ref-type="fig">Fig.&#x000a0;1D</xref> and <xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S1A</xref>) (Section 2). In-memory comparison trials ranged from 1000 to 100&#x000a0;000 cells before reaching system memory limits, while on-disk trials ranged from 1000 to 250&#x000a0;000 cells. Each dataset contains a fully dense matrix (Section 2). Critically, AnnSQL runtimes were essentially unchanged across the full-range library sizes tested for both in-memory and on-disk. On-disk AnnData outperformed on-disk AnnSQL only for libraries &#x0003c;5000 cells, while queries of 250&#x000a0;000 cells were on average &#x0223c;400 times faster using AnnSQL (0.14 versus 57&#x02009;seconds). In-memory AnnData outperformed in-memory AnnSQL only for libraries with &#x0003c;45&#x000a0;000 cells and both methods achieved &#x0003c;0.01&#x02009;second runtimes with &#x0003c;75&#x000a0;000 cell libraries. Additionally, we repeated the same experiment using <italic toggle="yes">in silico</italic> datasets generated by the Splatter (<xref rid="vbaf105-B19" ref-type="bibr">Zappia <italic toggle="yes">et al.</italic> 2017</xref>) sc/nRNA-seq simulation tool. Runtimes of all comparisons decreased as each of these datasets contain sparser UMI counts (<xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S2A</xref>). These comparative runtime metrics illustrate the drastic speed improvements and size scalability of AnnSQL processing of large scRNA-seq datasets.</p></sec><sec><title>3.3 Querying and processing 4.4 million cells on a laptop</title><p>To illustrate AnnSQL runtime improvements, we analyzed a single-nucleus RNA-seq atlas of the mouse containing 4.4 million cells and annotations (<xref rid="vbaf105-B8" ref-type="bibr">Langlieb <italic toggle="yes">et al.</italic> 2023</xref>). First, we opened the atlas AnnData object in backed mode and created an on-disk AnnSQL database using the MakeDb class (Section 2). Next, we performed routine procedures (cell filtering, summing library feature counts, cell-count normalization, and cell-count log transformation) using either the original AnnData object (in-memory or on-disk/backed mode) or on-disk AnnSQL (using methods provided in our package) on both a laptop and a High-Performance Cluster (HPC) (<xref rid="vbaf105-T1" ref-type="table">Table&#x000a0;1</xref> and Section 2). Building a Seurat object based on the atlas dataset failed due to memory errors, and for all procedures other than filtering, AnnData analysis failed on both the laptop or HPC due to a lack of support for backed-mode or memory errors. Equivalent procedures using AnnSQL completed between &#x0223c;4.28 and 67&#x02009;min on a laptop and were up to 3&#x000d7; faster than on the HPC. While backed-mode (but not in-memory) filtering could be accomplished on a laptop using AnnData, this procedure was &#x0223c;746&#x000d7; faster using AnnSQL. The HPC did enable filtering using in-memory AnnData, but was still &#x0223c;42&#x000d7; faster on a laptop with AnnSQL. These data illustrate how AnnSQL performance enhancements allow users to access and manipulate atlas-scale scRNA-seq data from their personal computer with ease.</p></sec></sec><sec><title>4 Discussion</title><p>Here, we introduce AnnSQL for analysis of single-cell genomics data using SQL syntax and showcase query and preprocessing performance using large datasets with minimal computational resources. AnnSQL uses the in-process DuckDb engine and provides extended functionality to showcase how vectorized queries of the column-based storage engine benefit single-cell genomics applications. In future releases, extended functionality methods can be further improved by utilizing DuckDb user-defined functions. Additionally, the DuckDb client API supports programming languages popular in genomics research and development (including Java, R, C++, Julia, and cmd libraries).</p><p>AnnSQL runtime comparisons highlight impressive performance improvements achieved that help democratize access to large-scale single-cell RNA-seq data, enabling laptop-based analysis of millions of cells datasets. The ease and clarity of SQL syntax, along with Python-based wrapper functions, further lowers the analysis barriers. We do note that for small-scale datasets (&#x0003c;45&#x000a0;000 cells), AnnData slightly outperforms AnnSQL operations, but minor differences in runtime (&#x0003c;&#x02009;0.1&#x02009;seconds) might be tolerated if users prefer SQL-based data access.</p><p>In developing AnnSQL, we intentionally mirrored the AnnData layered structure for interpretability. While an ideal H5-based structure, AnnData is a nonoptimal structure for a relational database (<xref rid="vbaf105-B3" ref-type="bibr">Codd 1970</xref>). Future work converting AnnData objects into an optimized normal formed database may further decrease runtimes (<xref rid="vbaf105-B6" ref-type="bibr">Kent 1983</xref>).</p><p>While the use of SQL for single-cell genomics data storage and analysis has yet to be extensively explored, our results indicate that SQL-based databases may be increasingly valuable as datasets continue to grow. We suspect this lack of attention was due to either the technical knowledge necessary for database configuration or the resources necessary to process a cell by genomic feature matrix in a typical implementation [such as SQLite or MySql (<xref rid="vbaf105-B10" ref-type="bibr">Oracle Corporation 2025</xref>)]. Our AnnSQL results suggest column-based SQL approaches for filtering or processing single-cell data should be considered when (i) fluid SQL syntax is preferred; (ii) dataset size exceeds system memory; or (iii) when minimal computational resources are desired for exploring large datasets without down sampling.</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material id="sup1" position="float" content-type="local-data"><label>vbaf105_Supplementary_Data</label><media xlink:href="vbaf105_supplementary_data.zip"/></supplementary-material></sec></body><back><ack id="ack1"><title>Acknowledgements</title><p>The authors thank Connor Frankston, Zach Goode, Dr Guanming Wu, Dr Lamya Ben Ameur in addition to the members of the Saunders lab, Andrew Adey lab, and Brian O&#x02019;Roak lab for helpful advice and/or discussions, as well as Theresa Provitola for design assistance with the AnnSQL logo.</p></ack><sec><title>Supplementary data</title><p>
<xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics Advances</italic> online.</p></sec><sec sec-type="COI-statement"><title>Conflict of interest</title><p>None declared.</p></sec><sec><title>Funding</title><p>This work has been supported by the NIH Brain Initiative (R01 MH130464); Sloan Foundation, and Simons Foundation Autism Research Initiative.</p></sec><sec sec-type="data-availability"><title>Data availability</title><p>The data in this article is available in the examples directory of the repository found at: <ext-link xlink:href="https://github.com/ArpiarSaundersLab/annsql" ext-link-type="uri">https://github.com/ArpiarSaundersLab/annsql</ext-link>. The Python package can be installed via Pypi using the command &#x0201c;pip install annsql.&#x0201d;</p></sec><ref-list id="ref1"><title>References</title><ref id="vbaf105-B2"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Butler</surname>
<given-names>A</given-names>
</string-name>, <string-name><surname>Hoffman</surname><given-names>P</given-names></string-name>, <string-name><surname>Smibert</surname><given-names>P</given-names></string-name></person-group>
<etal>et al</etal>
<article-title>Integrating single-cell transcriptomic data across different conditions, technologies, and species</article-title>. <source>Nat Biotechnol</source><year>2018</year>;<volume>36</volume>:<fpage>411</fpage>&#x02013;<lpage>20</lpage>. <pub-id pub-id-type="doi">10.1038/nbt.4096</pub-id><pub-id pub-id-type="pmid">29608179</pub-id>
</mixed-citation></ref><ref id="vbaf105-B3"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Codd</surname>
<given-names>EF.</given-names>
</string-name>
</person-group>
<article-title>A relational model of data for large shared data banks</article-title>. <source>Commun ACM</source><year>1970</year>;<volume>13</volume>:<fpage>377</fpage>&#x02013;<lpage>87</lpage>. <pub-id pub-id-type="doi">10.1145/362384.362685</pub-id></mixed-citation></ref><ref id="vbaf105-B4"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Gaffney</surname>
<given-names>KP</given-names>
</string-name>, <string-name><surname>Prammer</surname><given-names>M</given-names></string-name>, <string-name><surname>Brasfield</surname><given-names>L</given-names></string-name></person-group>
<etal>et al</etal>
<article-title>SQLite: past, present, and future</article-title>. <source>Proc VLDB Endow</source><year>2022</year>;<volume>15</volume>:<fpage>3535</fpage>&#x02013;<lpage>47</lpage>. <pub-id pub-id-type="doi">10.14778/3554821.3554842</pub-id></mixed-citation></ref><ref id="vbaf105-B5"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Heumos</surname>
<given-names>L</given-names>
</string-name>, <string-name><surname>Schaar</surname><given-names>AC</given-names></string-name>, <string-name><surname>Lance</surname><given-names>C</given-names></string-name></person-group>, <collab>Single-cell Best Practices Consortium</collab> et al <article-title>Best practices for single-cell analysis across modalities</article-title>. <source>Nat Rev Genet</source><year>2023</year>;<volume>24</volume>:<fpage>550</fpage>&#x02013;<lpage>72</lpage>. <pub-id pub-id-type="doi">10.1038/s41576-023-00586-w</pub-id><pub-id pub-id-type="pmid">37002403</pub-id>
</mixed-citation></ref><ref id="vbaf105-B6"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Kent</surname>
<given-names>W.</given-names>
</string-name>
</person-group>
<article-title>A simple guide to five normal forms in relational database theory</article-title>. <source>Commun ACM</source><year>1983</year>;<volume>26</volume>:<fpage>120</fpage>&#x02013;<lpage>5</lpage>. <pub-id pub-id-type="doi">10.1145/358024.358054</pub-id></mixed-citation></ref><ref id="vbaf105-B7"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Kioroglou</surname>
<given-names>D.</given-names>
</string-name>
</person-group>
<article-title>Omilayers: a Python package for efficient data management to support multi-omic analysis</article-title>. <source>BMC Bioinformatics</source><year>2025</year>;<volume>26</volume>:<fpage>40</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-025-06067-7</pub-id><pub-id pub-id-type="pmid">39915756</pub-id>
</mixed-citation></ref><ref id="vbaf105-B8"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Langlieb</surname>
<given-names>J</given-names>
</string-name>, <string-name><surname>Sachdev</surname><given-names>NS</given-names></string-name>, <string-name><surname>Balderrama</surname><given-names>KS</given-names></string-name></person-group>
<etal>et al</etal>
<article-title>The molecular cytoarchitecture of the adult mouse brain</article-title>. <source>Nature</source><year>2023</year>;<volume>624</volume>:<fpage>333</fpage>&#x02013;<lpage>42</lpage>. <pub-id pub-id-type="doi">10.1038/s41586-023-06818-7</pub-id><pub-id pub-id-type="pmid">38092915</pub-id>
</mixed-citation></ref><ref id="vbaf105-B9"><mixed-citation publication-type="other">McKinney W. Data structures for statistical computing in Python. In: van der Walt S, Millman J (eds), <italic toggle="yes">Proceedings of the 9th Python in Science Conference,</italic> SciPy 2010, Austin, Texas, June 28&#x02013;July 3, (pp. 56&#x02013;61). 2010. <pub-id pub-id-type="doi">10.25080/Majora-92bf1922-00a</pub-id></mixed-citation></ref><ref id="vbaf105-B11"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Nayak</surname>
<given-names>R</given-names>
</string-name>, <string-name><surname>Hasija</surname><given-names>Y.</given-names></string-name></person-group>
<article-title>A hitchhiker&#x02019;s guide to single-cell transcriptomics and data analysis pipelines</article-title>. <source>Genomics</source><year>2021</year>;<volume>113</volume>:<fpage>606</fpage>&#x02013;<lpage>19</lpage>. <pub-id pub-id-type="doi">10.1016/j.ygeno.2021.01.007</pub-id><pub-id pub-id-type="pmid">33485955</pub-id>
</mixed-citation></ref><ref id="vbaf105-B10"><mixed-citation publication-type="other">
<collab>Oracle Corporation</collab>. MySQL 8.4 Reference Manual. 2025. <ext-link xlink:href="https://dev.mysql.com/doc/en/" ext-link-type="uri">https://dev.mysql.com/doc/en/</ext-link></mixed-citation></ref><ref id="vbaf105-B12"><mixed-citation publication-type="other">Plattner H. A common database approach for OLTP and OLAP using an in-memory column database. In: <italic toggle="yes">Proceedings of the 2009 ACM SIGMOD International Conference on Management of data (SIGMOD '09)</italic>. New York, NY, USA: Association for Computing Machinery, 2009, 1&#x02013;2. <pub-id pub-id-type="doi">10.1145/1559845.1559846</pub-id></mixed-citation></ref><ref id="vbaf105-B13"><mixed-citation publication-type="other">Raasveldt M, M&#x000fc;hleisen H. DuckDB: an embeddable analytical database. In: <italic toggle="yes">Proceedings of the 2019 International Conference on Management of Data (SIGMOD '19)</italic> (pp. 1981&#x02013;1984). ACM, 2019. <pub-id pub-id-type="doi">10.1145/3299869.3320212</pub-id></mixed-citation></ref><ref id="vbaf105-B14"><mixed-citation publication-type="other">
<collab>The HDF Group</collab>. Hierarchical Data Format, version 5 [Computer software]. <ext-link xlink:href="https://github.com/HDFGroup/hdf5" ext-link-type="uri">https://github.com/HDFGroup/hdf5</ext-link>. <year>2020</year>/2024 (Original work published 2020).</mixed-citation></ref><ref id="vbaf105-B15"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Virshup</surname>
<given-names>I</given-names>
</string-name>, <string-name><surname>Rybakov</surname><given-names>S</given-names></string-name>, <string-name><surname>Theis</surname><given-names>FJ</given-names></string-name></person-group>
<etal>et al</etal>
<article-title>anndata: access and store annotated datamatrices</article-title>. <source>JOSS</source><year>2024</year>;<volume>9</volume>:<fpage>4371</fpage>.</mixed-citation></ref><ref id="vbaf105-B16"><mixed-citation publication-type="book">Vohra D. Apache Parquet. In: Vohra D (ed.), <italic toggle="yes">Practical Hadoop Ecosystem: A Definitive Guide to Hadoop-Related Frameworks and Tools</italic>. New York, NY, USA: Apress, 2016, 325&#x02013;35. <pub-id pub-id-type="doi">10.1007/978-1-4842-2199-0_8</pub-id></mixed-citation></ref><ref id="vbaf105-B17"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Wen</surname>
<given-names>L</given-names>
</string-name>, <string-name><surname>Li</surname><given-names>G</given-names></string-name>, <string-name><surname>Huang</surname><given-names>T</given-names></string-name></person-group>
<etal>et al</etal>
<article-title>Single-cell technologies: from research to application</article-title>. <source>Innovation (Camb)</source><year>2022</year>;<volume>3</volume>:<fpage>100342</fpage>. <pub-id pub-id-type="doi">10.1016/j.xinn.2022.100342</pub-id><pub-id pub-id-type="pmid">36353677</pub-id>
</mixed-citation></ref><ref id="vbaf105-B18"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Wolf</surname>
<given-names>FA</given-names>
</string-name>, <string-name><surname>Angerer</surname><given-names>P</given-names></string-name>, <string-name><surname>Theis</surname><given-names>FJ.</given-names></string-name></person-group>
<article-title>SCANPY: large-scale single-cell gene expression data analysis</article-title>. <source>Genome Biol</source><year>2018</year>;<volume>19</volume>:<fpage>15</fpage>. <pub-id pub-id-type="doi">10.1186/s13059-017-1382-0</pub-id><pub-id pub-id-type="pmid">29409532</pub-id>
</mixed-citation></ref><ref id="vbaf105-B19"><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Zappia</surname>
<given-names>L</given-names>
</string-name>, <string-name><surname>Phipson</surname><given-names>B</given-names></string-name>, <string-name><surname>Oshlack</surname><given-names>A.</given-names></string-name></person-group>
<article-title>Splatter: simulation of single-cell RNA sequencing data</article-title>. <source>Genome Biol</source><year>2017</year>;<volume>18</volume>:<fpage>174</fpage>. <pub-id pub-id-type="doi">10.1186/s13059-017-1305-0</pub-id><pub-id pub-id-type="pmid">28899397</pub-id>
</mixed-citation></ref></ref-list></back></article>