<!DOCTYPE article
PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN" "JATS-archivearticle1-3-mathml3.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3"><?properties open_access?><processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats"><restricted-by>pmc</restricted-by></processing-meta><front><journal-meta><journal-id journal-id-type="nlm-ta">Empir Softw Eng</journal-id><journal-id journal-id-type="iso-abbrev">Empir Softw Eng</journal-id><journal-title-group><journal-title>Empirical Software Engineering</journal-title></journal-title-group><issn pub-type="ppub">1382-3256</issn><issn pub-type="epub">1573-7616</issn><publisher><publisher-name>Springer US</publisher-name><publisher-loc>New York</publisher-loc></publisher></journal-meta>
<article-meta><article-id pub-id-type="pmc">PMC11972194</article-id><article-id pub-id-type="publisher-id">10636</article-id><article-id pub-id-type="doi">10.1007/s10664-025-10636-y</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>On the effects of program slicing for vulnerability detection during code inspection</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-3207-7662</contrib-id><name><surname>Papotti</surname><given-names>Aurora</given-names></name><address><email>a.papotti@vu.nl</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-7189-2817</contrib-id><name><surname>Tuma</surname><given-names>Katja</given-names></name><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1091-8486</contrib-id><name><surname>Massacci</surname><given-names>Fabio</given-names></name><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="aff" rid="Aff2">2</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/008xxew50</institution-id><institution-id institution-id-type="GRID">grid.12380.38</institution-id><institution-id institution-id-type="ISNI">0000 0004 1754 9227</institution-id><institution>Foundational Security, Afdeling Informatica, </institution><institution>Vrije Universiteit, </institution></institution-wrap>Amsterdam, NL the Netherlands </aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/05trd4x28</institution-id><institution-id institution-id-type="GRID">grid.11696.39</institution-id><institution-id institution-id-type="ISNI">0000 0004 1937 0351</institution-id><institution>Dipartimento di Ingegneria e Scienza dell&#x02019;Informazione, </institution><institution>Universit&#x000e0; di Trento, </institution></institution-wrap>Trento, IT Italy </aff></contrib-group><author-notes><fn fn-type="com"><p>Communicated by: Massimiliano Di Penta.</p></fn></author-notes><pub-date pub-type="epub"><day>5</day><month>4</month><year>2025</year></pub-date><pub-date pub-type="pmc-release"><day>5</day><month>4</month><year>2025</year></pub-date><pub-date pub-type="ppub"><year>2025</year></pub-date><volume>30</volume><issue>3</issue><elocation-id>93</elocation-id><history><date date-type="accepted"><day>7</day><month>3</month><year>2025</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s) 2025</copyright-statement><copyright-year>2025</copyright-year><license><ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p></license></permissions><abstract id="Abs1"><p id="Par1">Slicing is a fault localization technique that has been proposed to support debugging and program comprehension. Yet, its empirical effectiveness during code inspection by humans has received limited attention. The goal of our study is two-fold. First, we aim to define what it means for a code reviewer to identify the vulnerable lines correctly. Second, we investigate whether reducing the number of to-be-inspected lines by method-level slicing supports code reviewers in detecting security vulnerabilities. We propose a novel approach based on the notion of a <inline-formula id="IEq1"><alternatives><tex-math id="d33e168">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e173"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq1.gif"/></alternatives></inline-formula>-neighborhood (intuitively based on the idea of the context size of the command git&#x000a0; diff) to define correctly identified lines. Then, we conducted a multi-year controlled experiment (2017-2023) in which MSc students attending security courses (<inline-formula id="IEq2"><alternatives><tex-math id="d33e180">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$n=236$$\end{document}</tex-math><mml:math id="d33e185"><mml:mrow><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>236</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq2.gif"/></alternatives></inline-formula>) were tasked with identifying vulnerable lines in original or sliced Java files from Apache Tomcat. We provide perfect seed lines for a slicing algorithm to control for confounding factors. Each treatment differs in the pair (Vulnerability, Original/Sliced) with a balanced design with vulnerabilities from the OWASP Top 10 2017: A1 (Injection), A5 (Broken Access Control), A6 (Security Misconfiguration), and A7 (Cross-Site Scripting). To generate smaller slices for human consumption, we used a variant of intra-procedural thin slicing. We report the results for <inline-formula id="IEq3"><alternatives><tex-math id="d33e192">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e197"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq3.gif"/></alternatives></inline-formula> which corresponds to exactly matching the vulnerable ground truth lines, and <inline-formula id="IEq4"><alternatives><tex-math id="d33e204">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e209"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq4.gif"/></alternatives></inline-formula> which represents the scenario of identifying the vulnerable area. For both cases, we found that slicing helps in &#x02018;finding something&#x02019; (the participant has found at least some vulnerable lines) as opposed to &#x02018;finding nothing&#x02019;. For the case of <inline-formula id="IEq5"><alternatives><tex-math id="d33e217">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e222"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq5.gif"/></alternatives></inline-formula> analyzing a slice and analyzing the original file are statistically equivalent from the perspective of lines found by those who found something. With <inline-formula id="IEq6"><alternatives><tex-math id="d33e229">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e234"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq6.gif"/></alternatives></inline-formula> slicing helps to find more vulnerabilities compared to analyzing an original file, as we would normally expect. Given the type of population, additional experiments are necessary to be generalized to experienced developers.</p></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>program slicing</kwd><kwd>vulnerability</kwd><kwd>code review</kwd><kwd>program comprehension</kwd><kwd>controlled experiment</kwd></kwd-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100010663</institution-id><institution>H2020 European Research Council</institution></institution-wrap></funding-source><award-id>952647</award-id></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100019180</institution-id><institution>HORIZON EUROPE European Research Council</institution></institution-wrap></funding-source><award-id>Sec4AI4Se</award-id></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100010364</institution-id><institution>Nederlandse Oogonderzoek Stichting</institution></institution-wrap></funding-source><award-id>NWA.1215.18.006</award-id></award-group></funding-group><funding-group><award-group><funding-source><institution>HEWSTI</institution></funding-source><award-id>KIC1.VE01.20.00</award-id></award-group></funding-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; Springer Science+Business Media, LLC, part of Springer Nature 2025</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Introduction</title><p id="Par2">Developers are often struggling to deliver secure products, either due to a lack of resources, difficulty in prioritizing security, or knowledge gaps&#x000a0;(Weir et&#x000a0;al. <xref ref-type="bibr" rid="CR85">2023</xref>). Therefore, it is interesting to study to what extent existing techniques can be used for developers without a strong security background to be able to quickly detect the most common vulnerabilities. As an example, source code is inspected for security as part of code review activity, and using static analysis tools (e.g., Linters and heuristic checkers) is a common industry practice to support this manual task. In this paper, we follow Hirsch and Hofer (<xref ref-type="bibr" rid="CR37">2021</xref>) and focus on the fault localization phase (as opposed to fault remediation phase).</p><p id="Par3">Among the different techniques used for fault localization&#x000a0;(Wong et&#x000a0;al. <xref ref-type="bibr" rid="CR88">2016</xref>) slicing has obtained some positive results in the identification of failures in programs. Weiser proposed the notion of slicing in 1979&#x000a0;(Weiser <xref ref-type="bibr" rid="CR86">1981</xref>): extracting program parts based on some special criteria to improve further processing. The purpose of slicing was at first to facilitate debugging, then, with the emergence of new algorithms and techniques, it became helpful in many aspects of the software development lifecycle&#x000a0;(Xu et&#x000a0;al. <xref ref-type="bibr" rid="CR91">2005</xref>): software testing, software maintenance, program comprehension&#x000a0;(Harman and Hierons <xref ref-type="bibr" rid="CR35">2001</xref>), etc. Recently, slicing has been used as novel approach for detecting automatically vulnerable lines of code&#x000a0;(Fu and Tantithamthavorn <xref ref-type="bibr" rid="CR29">2022</xref>; Hin et&#x000a0;al. <xref ref-type="bibr" rid="CR36">2022</xref>; Yu-Tao et&#x000a0;al. <xref ref-type="bibr" rid="CR93">2023</xref>).</p><p id="Par4">Detecting vulnerabilities is a hard task, and giving the developers a slice of the original file (for example built on the seed identified by a static analyzer or a machine learning algorithm) should help to find them. It seems obvious: a sliced program is by construction smaller than the original program and thus finding something by inspection should be easier as well. As we shall see, the obvious might not necessarily be always true.</p><p id="Par5">To answer this question, we performed a multi-year experiment with <inline-formula id="IEq7"><alternatives><tex-math id="d33e289">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$n=236$$\end{document}</tex-math><mml:math id="d33e294"><mml:mrow><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>236</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq7.gif"/></alternatives></inline-formula> MSc students reviewing four large real-life Java files from Apache Tomcat with a CVE among the most common Top 10 OWASP 2017<xref ref-type="fn" rid="Fn1">1</xref> considering the four groups A1(Injection), A5(Broken Access Control), A6 (Security Misconfiguration) and A7 (Cross-Site Scripting). For simplicity, we refer to the four vulnerability types as path traversal (A5-A6), user injection (A1), XSS (A7), DoS (A5-A6). A combination of original and sliced files was presented to each participant to obtain an orthogonal balanced design. The participants submitted the line numbers that they identified as vulnerable for each project.</p><p id="Par7">Vulnerable fragments are typically small and involve few lines in otherwise large files (e.g. Dashevskyi et&#x000a0;al. <xref ref-type="bibr" rid="CR22">2018</xref>; Bao et&#x000a0;al. <xref ref-type="bibr" rid="CR10">2022</xref>) and hence having a formal criteria to match the lines identified by the inspector and the lines identified by the security expert is critical. While several metrics (e.g. EXAM, Recall@10, etc.) exist to measure the <italic>(many) lines proposed by a tool</italic> Li and Zhang (<xref ref-type="bibr" rid="CR44">2017</xref>),&#x000a0;Li et&#x000a0;al. (<xref ref-type="bibr" rid="CR43">2019</xref>),&#x000a0;Li et&#x000a0;al. (<xref ref-type="bibr" rid="CR45">2021</xref>),&#x000a0;Sohn and Yoo (<xref ref-type="bibr" rid="CR71">2017</xref>), to the best of our knowledge, no formal method exists for the <italic>(few) lines identified by a human</italic>. Only qualitative criteria are reported in the literature on human studies on code reviews (e.g. Braz et&#x000a0;al. <xref ref-type="bibr" rid="CR14">2022</xref>). On the one hand, choosing the participants&#x02019; answers to exactly match the ground truth as narrowly identified by a security expert would dramatically reduce the number of correct responses even if the participants comprehended the program and essentially found the vulnerability. On the other hand, accepting as correct all lines potentially related would lead to overoptimistic results and make us conclude that slicing always works. The solution to this challenge is not uniformly agreed upon in program comprehension experiments. We propose in this paper the first such formal metric based on the intuition of the git diff context: a line in the ground truth is considered found if the code inspector suggested a line at distance <inline-formula id="IEq8"><alternatives><tex-math id="d33e337">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e342"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq8.gif"/></alternatives></inline-formula> (=0, 1,...3, ...) from the former.</p><p id="Par8">We analyzed the data collected for two different values of <inline-formula id="IEq9"><alternatives><tex-math id="d33e348">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e353"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq9.gif"/></alternatives></inline-formula>-neighborhood: (i) <inline-formula id="IEq10"><alternatives><tex-math id="d33e357">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e362"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq10.gif"/></alternatives></inline-formula> to describe the case of exactly matching the ground truth vulnerable lines, (ii) and <inline-formula id="IEq11"><alternatives><tex-math id="d33e369">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e374"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq11.gif"/></alternatives></inline-formula> to represent the scenario of identifying the vulnerable line relying on the value of the git diff command. For both cases we observed that slicing has a statistically significant effect in finding some lines of code related to the vulnerability as opposed to finding no related lines. However, for the case of <inline-formula id="IEq12"><alternatives><tex-math id="d33e384">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e389"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq12.gif"/></alternatives></inline-formula> by using the same methodology used by the Food and Drug Administration (FDA) and the European Medicines Agency (EMA) for establishing the bio-equivalence between a branded version of a drug and its generic version, we also found that, once an inspector found something, being shown a slice is statistically equivalent to being shown the original file (the obvious is not always true). Contrarily, when considering <inline-formula id="IEq13"><alternatives><tex-math id="d33e397">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e402"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq13.gif"/></alternatives></inline-formula>, the two sample groups (original files vs sliced files) are not statistically equivalent, and the number of TPs for the slice treatment is larger than the number of TPs for the original treatment. This finding is in line with the common expectation as less line of code should make it easier to identify the vulnerabilities. Yet, using Master students as participants is a potential threat to the generalizability of the results. Therefore, more experiment are needed with experienced developers.</p><sec id="FPar1" sec-type="data-availability"><title>Data availability statement</title><p id="Par9">The replication package is available on zenodo at this link: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.15022147">https://doi.org/10.5281/zenodo.15022147</ext-link>. It contains the raw data of the participant&#x02019;s responses, the reviewers may check the results. The tool used to create the slices is available on GitHub at this link: <ext-link ext-link-type="uri" xlink:href="https://github.com/standash/foss-vuln-tracker/tree/master/repoman">https://github.com/standash/foss-vuln-tracker/tree/master/repoman</ext-link>.</p></sec></sec><sec id="Sec2"><title>Background and related work</title><sec id="FPar2"><title>Developers vs. Security</title><p id="Par10">Several studies proposed and improved tools to support developers in vulnerability detection&#x000a0;(Ayewah and Pugh <xref ref-type="bibr" rid="CR7">2008</xref>; Ayewah et&#x000a0;al. <xref ref-type="bibr" rid="CR8">2008</xref>; Smith et&#x000a0;al. <xref ref-type="bibr" rid="CR69">2015</xref>). Smith et&#x000a0;al. (<xref ref-type="bibr" rid="CR70">2018</xref>) reports an exploratory study with novice and experienced software developers, highlighting strategic techniques to successfully detect vulnerabilities, and help developers identify them through static analysis tools. Developers still find these tools confusing and are still not widely adopted&#x000a0;(Tahaei and Vaniea <xref ref-type="bibr" rid="CR76">2019</xref>).</p><p id="Par11">Studies on developer-centered security have attempted to adapt Human-Computer Interaction methodologies and well-established usable security measures to software development, addressing developers&#x02019; needs&#x000a0;(Green and Smith <xref ref-type="bibr" rid="CR32">2016</xref>; Pieczul et&#x000a0;al. <xref ref-type="bibr" rid="CR53">2017</xref>; Wurster and Van&#x000a0;Oorschot <xref ref-type="bibr" rid="CR89">2008</xref>). Naiakshina et&#x000a0;al. (<xref ref-type="bibr" rid="CR49">2017</xref>, <xref ref-type="bibr" rid="CR50">2018</xref>) assigned 40 Computer Science students into two groups and they received two different task descriptions: one did not mention security, the other requested to implement a security solution. The students in the first group did not store passwords securely.</p><p id="Par12">Besides using tools for the identification of vulnerabilities, organizations are adopting modern code inspection techniques&#x000a0;(Cohen <xref ref-type="bibr" rid="CR20">2010</xref>) trying to reduce the time spent on code inspection. Across companies&#x000a0;(Bacchelli and Bird <xref ref-type="bibr" rid="CR9">2013</xref>; Sadowski et&#x000a0;al. <xref ref-type="bibr" rid="CR61">2018</xref>),&#x000a0;and community-driven projects&#x000a0;(Rigby and Bird <xref ref-type="bibr" rid="CR57">2013</xref>; Rigby et&#x000a0;al. <xref ref-type="bibr" rid="CR58">2014</xref>) modern code inspection or change-based inspection&#x000a0;(Baum et&#x000a0;al. <xref ref-type="bibr" rid="CR11">2016</xref>) is widely used. However, Tahaei et al.&#x02019;s survey&#x000a0;(<xref ref-type="bibr" rid="CR76">2019</xref>) shows that code inspection is less studied in developer-centered security: only one code inspection study is reported&#x000a0;(Edmundson et&#x000a0;al. <xref ref-type="bibr" rid="CR25">2013</xref>). Only recently, some more studies have been performed. We discuss them in the next subsection.</p><graphic position="anchor" xlink:href="10664_2025_10636_Figa_HTML" id="MO1"/></sec><sec id="FPar3"><title>Code Inspection</title><p id="Par13">Code inspections have received increasing attention in the past years. Kollanus and Koskinen (<xref ref-type="bibr" rid="CR41">2009</xref>) shows several empirical studies on code inspection that have been conducted over the years. The survey reports the results on 153 articles with a high impact publication from 1980 to 2008. The authors claim that the real issue with code inspection is its weak implementation in the software industry, and they suggest focusing more on empirical studies to understand why there is a lack of implementation and management of inspections in practice.</p><p id="Par14">Indeed, relatively few studies within our related work search investigated the implementation and management of inspections in practice. Empirical studies are needed especially to solve these issues. Such gained body of knowledge can create a good basis for further studies.</p><p id="Par15">Recently, there have been some studies on checklists for code inspections. Rong et&#x000a0;al. (<xref ref-type="bibr" rid="CR59">2012</xref>) conducted a study with students, and they claim that checklists helped the participants during code inspection. In the study&#x000a0;(Chong et&#x000a0;al. <xref ref-type="bibr" rid="CR19">2021</xref>), the students were able to anticipate potential defects and create relatively good code inspection checklists. Gon&#x000e7;alves et al.&#x000a0;(<xref ref-type="bibr" rid="CR30">2020</xref>) explored whether inspection checklists and guidance improve code inspection performances.</p><p id="Par16">A study conducted by Braz et&#x000a0;al. (<xref ref-type="bibr" rid="CR14">2022</xref>), analyzes both experimental designs: <italic>(i)</italic> asking for secure coding practices, and <italic>(ii)</italic> providing checklists. A total of 150 developers took part in the experiment online with three different treatments. In the baseline treatment, the participants performed a code inspection without any special instructions. In the second treatment, the participants were informed to perform the inspection from a security perspective. The last treatment is similar to the second one with the addition of security checklists provided to the participants. The results obtained show that when asked to focus on the security perspective, the probability of vulnerability detection increases. However, no significant results have been obtained regarding the use of security checklists.</p><graphic position="anchor" xlink:href="10664_2025_10636_Figb_HTML" id="MO2"/></sec><sec id="FPar4"><title>Slicing and Program Comprehension</title><p id="Par17">From the perspective of supporting debugging, several studies proposed program slicing as a fault localization technique&#x000a0;(Ang et&#x000a0;al. <xref ref-type="bibr" rid="CR5">2017</xref>) and different algorithms have been proposed to compute slices. They vary from Weiser&#x02019;s syntax-preserving static slicing to amorphous slicing which is not syntax-preserving. The different algorithms can be based on data-flow or information-flow graphs&#x000a0;(Xu et&#x000a0;al. <xref ref-type="bibr" rid="CR91">2005</xref>).</p><p id="Par18">In terms of effectiveness, Wong et al.&#x02019;s survey&#x000a0;(<xref ref-type="bibr" rid="CR88">2016</xref>) compared slicing techniques to fault localization techniques highlighting their weaknesses and strengths in the identification failures. Also, Reis et&#x000a0;al. (<xref ref-type="bibr" rid="CR56">2019</xref>) argued that dynamic slicing combined with spectrum-based fault localization increases the performances in debugging.</p><p id="Par19">In a recent large-scale study, Soremekun et&#x000a0;al. (<xref ref-type="bibr" rid="CR73">2021</xref>) analyzed 457 bugs (369 single faults and 88 multiple faults) in 46 open source C programs, to compare the effectiveness of statistical fault localization against dynamic slicing. They concluded that dynamic slicing is more effective for programs with single faults. However, this study was purely automated, using proxy measures for attention, and did not involve human participants.</p><p id="Par20">Moreover slicing program has been used in recent approaches for detecting vulnerable lines of code&#x000a0;(Salimi and Kharrazi <xref ref-type="bibr" rid="CR62">2022</xref>; Fu and Tantithamthavorn <xref ref-type="bibr" rid="CR29">2022</xref>; Hin et&#x000a0;al. <xref ref-type="bibr" rid="CR36">2022</xref>; Yu-Tao et&#x000a0;al. <xref ref-type="bibr" rid="CR93">2023</xref>).</p><p id="Par21">&#x000a0; <graphic position="anchor" xlink:href="10664_2025_10636_Figc_HTML" id="MO3"/></p></sec><sec id="FPar5"><title>Experimental Methods with Developers</title><p id="Par22">Controlled experiments are often used to empirically evaluate and study new techniques and approaches. Over the years there have been papers showing experimental designs to study new solutions to support developers on debugging and fault localization&#x000a0;(B&#x000f6;hme et&#x000a0;al. <xref ref-type="bibr" rid="CR13">2017</xref>; Beller et&#x000a0;al. <xref ref-type="bibr" rid="CR12">2018</xref>; Zhou et&#x000a0;al. <xref ref-type="bibr" rid="CR95">2021</xref>; Alaboudi and LaToza <xref ref-type="bibr" rid="CR3">2020</xref>).</p><p id="Par23">Controlled experiments are one type among the different empirical studies (e.g. case studies, surveys, etc.), and to conduct them, the researchers must navigate a large space for design decisions.</p><p id="Par24">Several studies focus on giving guidelines when designing a controlled experiment for supporting program comprehension&#x000a0;(Di&#x000a0;Penta et&#x000a0;al. <xref ref-type="bibr" rid="CR23">2007</xref>; Dunsmore and Roper <xref ref-type="bibr" rid="CR24">2000</xref>; Rajlich and Cowan <xref ref-type="bibr" rid="CR54">1997</xref>; Rajlich et&#x000a0;al. <xref ref-type="bibr" rid="CR55">1994</xref>; Feigenspan et&#x000a0;al. <xref ref-type="bibr" rid="CR26">2011</xref>; Siegmund and Schumann <xref ref-type="bibr" rid="CR66">2015</xref>). Among others, these guidelines suggest important rules such as: <italic>(i)</italic> identify the key variables to measure, <italic>(ii)</italic> select the appropriate subject population, <italic>(iii)</italic> standardize the experimental design format to allow replication, and <italic>(iv)</italic> provide procedures and criteria for packaging the materials and results to facilitate replication.</p><p id="Par25">Among the issues highlighted, Siegmund and Schumann (<xref ref-type="bibr" rid="CR66">2015</xref>) discuss which parameters should be taken into account while designing a controlled experiment, and other studies show which measures should be considered&#x000a0;(Feigenspan et&#x000a0;al. <xref ref-type="bibr" rid="CR26">2011</xref>; Rajlich and Cowan <xref ref-type="bibr" rid="CR54">1997</xref>). In particular, Sul&#x000ed;r (<xref ref-type="bibr" rid="CR75">2019</xref>) claim that only 15% of the studies use real tasks from issue trackers, and sometimes they are modified to fit the purpose.</p><graphic position="anchor" xlink:href="10664_2025_10636_Figd_HTML" id="MO4"/></sec></sec><sec id="Sec3"><title>Research methodology</title><p id="Par26">In this section, we introduce our research questions and detail our experimental design.</p><sec id="Sec4"><title>Research questions</title><p id="Par27">We structure our study around three research questions. We aim to define a methodological design of experiments to establish a new metric to evaluate fault localization by humans. The experiment on eye-tracking by Uwano et&#x000a0;al. (<xref ref-type="bibr" rid="CR83">2006</xref>) shows that code inspectors, after a first scan of the entire code, mainly focus on some portions of the code but still fluctuate around the area. Irrelevant fluctuations might then be reflected in the answers. For example, an inspector might mark the beginning and the end of an if-block without marking the if statement itself. Still, that would be a clear indication of where the problem was. Hence, we state our first research question as follows:<disp-quote><p><bold>RQ1</bold>: What does it mean for a human inspector to identify a vulnerable fragment in a file spanning a thousand lines of code?</p></disp-quote>If slicing can help find vulnerabilities, then from a company&#x02019;s perspective it could make sense to invest resources (training of developers, consultants, integration of toolchains, etc.) to develop and deploy a plug-in on a developer&#x02019;s IDE. Indeed, Hirsch and Hofer (<xref ref-type="bibr" rid="CR37">2021</xref>) suggest that programmers often use IDE built-in tools for debugging, therefore, before investments into tools integration are made, evidence of slicing supporting code inspectors would be useful. Therefore, we state our second research question as follows:<disp-quote><p><bold>RQ2:</bold> Does a method-level slicing program help code inspectors identify more vulnerable code lines than inspecting the full source code?</p></disp-quote>Finally, since vulnerabilities are widely different, we also wanted to investigate whether some vulnerability types are easier to detect during code inspection. We formulate our third and last research question as follows:<disp-quote><p><bold>RQ3:</bold> Which vulnerabilities are better identified by method-level slicing?</p></disp-quote> The choice of a measure of success is critical to provide a result that is informative for the concrete experiment at hand. Precision and recall as ratios are informative when used in the framework of ML&#x000a0;(Chakraborty et&#x000a0;al. <xref ref-type="bibr" rid="CR18">2022</xref>) or information retrieval of vulnerabilities&#x000a0;(Pashchenko et&#x000a0;al. <xref ref-type="bibr" rid="CR52">2022</xref>; Cadariu et&#x000a0;al. <xref ref-type="bibr" rid="CR16">2015</xref>) where both numerator and denominator are large numbers. In a code review or inspection set up each participant has to report a handful of lines of code. For example in CVE-2012-2733 (See further in Table&#x000a0;<xref rid="Tab4" ref-type="table">4</xref>) there are three vulnerable lines to be identified (459, 462, 463). Thus, a difference between 100% recall to a 66% recall might correspond to a difference in the identification of 1 line of code. Precision and recall would thus provide misleading information.</p><p id="Par28">The same considerations apply to the Jaccard index or other metrics of overlap between images (e.g. Crum et&#x000a0;al. <xref ref-type="bibr" rid="CR21">2006</xref>) that considers the ratio between the numbers of several hundred pixels or voxels (3D volume elements). A participant reporting lines 459-463 for the mentioned example for CVE-2012-2733 would score a Jaccard index of 60% (3 correct lines overlapping with the 5 suggested) when any developer reviewing the result would consider the vulnerability to have been correctly identified.</p><p id="Par29">Other metrics such as top-1, and EXAM focus more on evaluating the tools&#x02019; performance in fault localization, which is different from the goal of our study as we want to evaluate the humans in identifying the vulnerable source lines of code. Among the existing techniques, the most relevant ones are EXAM, Top-N, Mean First Rank (MFR), and Mean Average Rank (MAR) which are summarized in Table&#x000a0;<xref rid="Tab1" ref-type="table">1</xref>. We highlight the difference of these metrics from our custom metric whose input is a human, and not a tool.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Metrics for fault localization</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Metric</th><th align="left">Definition</th><th align="left">Input</th></tr></thead><tbody><tr><td align="left">EXAM</td><td align="left">The percentage of code that a developer has to examine until the first fault is located&#x000a0;(Meng et&#x000a0;al. <xref ref-type="bibr" rid="CR47">2022</xref>)</td><td align="left">Tool</td></tr><tr><td align="left">Top-N</td><td align="left">It is the number of faulty codes for which the fault localization successfully identified the fault within the top N positions&#x000a0;(Meng et&#x000a0;al. <xref ref-type="bibr" rid="CR47">2022</xref>)</td><td align="left">Tool</td></tr><tr><td align="left">MFR</td><td align="left">The mean of the highest faulty statement&#x02019;s rank of each fault&#x000a0;(Meng et&#x000a0;al. <xref ref-type="bibr" rid="CR47">2022</xref>)</td><td align="left">Tool</td></tr><tr><td align="left">MAR</td><td align="left">The mean of the average rank of all the faults of a project&#x000a0;(Meng et&#x000a0;al. <xref ref-type="bibr" rid="CR47">2022</xref>)</td><td align="left">Tool</td></tr><tr><td align="left"><inline-formula id="IEq14"><alternatives><tex-math id="d33e753">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta }$$\end{document}</tex-math><mml:math id="d33e758"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq14.gif"/></alternatives></inline-formula></td><td align="left">Each vulnerable line which is distant at most <inline-formula id="IEq15"><alternatives><tex-math id="d33e768">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e773"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq15.gif"/></alternatives></inline-formula>-lines from a line suggested by a participant (this paper)</td><td align="left">Human</td></tr></tbody></table><table-wrap-foot><p>We summarize the most relevant existing techniques for fault localization and we compare them with our own metric (last row)</p></table-wrap-foot></table-wrap></p><p id="Par30">The techniques reported in Table&#x000a0;<xref rid="Tab1" ref-type="table">1</xref> have been used in previous fault localization studies&#x000a0;Li and Zhang (<xref ref-type="bibr" rid="CR44">2017</xref>),&#x000a0;Li et&#x000a0;al. (<xref ref-type="bibr" rid="CR43">2019</xref>),&#x000a0;Li et&#x000a0;al. (<xref ref-type="bibr" rid="CR45">2021</xref>),&#x000a0;Sohn and Yoo (<xref ref-type="bibr" rid="CR71">2017</xref>). They have also been largely used to evaluate the most common fault localization techniques such as Tarantula&#x000a0;(Jones and Harrold <xref ref-type="bibr" rid="CR39">2005</xref>), and Ochiai&#x000a0;(Abreu et&#x000a0;al. <xref ref-type="bibr" rid="CR1">2006</xref>). However these metrics are tailored to evaluate tool techniques, and they do not apply to our study as Ochiai&#x000a0;(Abreu et&#x000a0;al. <xref ref-type="bibr" rid="CR1">2006</xref>) requires more runs as it calculates the fraction of the number of times a faulty line is executed over the total number of runs. In our case, we only have a human manually inspecting a piece of source code, and we want to evaluate their capability of inspecting the vulnerability.</p></sec><sec id="Sec5"><title>Measuring True Positives identified by Humans</title><p id="Par31">As we mentioned in Section&#x000a0;<xref rid="Sec1" ref-type="sec">1</xref>, our first challenge was choosing a neighborhood <inline-formula id="IEq16"><alternatives><tex-math id="d33e815">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e820"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq16.gif"/></alternatives></inline-formula>. Choosing it too big would lead to unrealistic results. Too small could mean counting too many false positives, even if, for practical purposes, the participants essentially identified the code region where the vulnerability was.</p><p id="Par32">Consider the following concrete example from CVE-2012-2733 where Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref> illustrates the actual lines of code.<fig id="Fig1"><label>Fig. 1</label><caption><p>Extract of code with the vulnerable lines (459, 462, 463) from CVE-2012-2733 (Denial of Service)</p></caption><graphic xlink:href="10664_2025_10636_Fig1_HTML" id="MO5"/></fig></p><p id="Par33">The security experts identified three lines as the lines responsible for the vulnerability and one participant suggested other four different lines. The set <italic>GT</italic> is the ground truth, the set of vulnerable lines as assessed by a security expert, the set <italic>Participant</italic> is populated by a participant&#x02019;s answer.<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="d33e844">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} GT= &#x00026;  \{ 459, 462, 463 \} \end{aligned}$$\end{document}</tex-math><mml:math id="d33e850" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>=</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>459</mml:mn><mml:mo>,</mml:mo><mml:mn>462</mml:mn><mml:mo>,</mml:mo><mml:mn>463</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula><disp-formula id="Equ2"><label>2</label><alternatives><tex-math id="d33e871">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} Participant= &#x00026;  \{ \underline{457}, \underline{458}, \underline{459}, \underline{500} \} \end{aligned}$$\end{document}</tex-math><mml:math id="d33e877" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:munder><mml:mn>457</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo>,</mml:mo><mml:munder><mml:mn>458</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo>,</mml:mo><mml:munder><mml:mn>459</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo>,</mml:mo><mml:munder><mml:mn>500</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ2.gif" position="anchor"/></alternatives></disp-formula>The key problem is devising a reasonable evaluation of the lines 457,&#x000a0;458 because they are not the actual vulnerable lines (so they should not count as truly true positive), but they are also extremely close to the line 459 (identified by the security experts). In this case, among almost a thousand lines of code, the participant identified the vulnerability region, therefore, it should not be considered a false positive.</p><sec id="FPar6"><title>Traditional metrics.</title><p id="Par34">If we use precision, recall, or the Jaccard Index we would have<disp-formula id="Equ3"><label>3</label><alternatives><tex-math id="d33e923">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} P=GT\cap Participant/Participant = 1/4=25\% \end{aligned}$$\end{document}</tex-math><mml:math id="d33e929" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>&#x02229;</mml:mo><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mn>4</mml:mn><mml:mo>=</mml:mo><mml:mn>25</mml:mn><mml:mo>%</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ3.gif" position="anchor"/></alternatives></disp-formula><disp-formula id="Equ4"><label>4</label><alternatives><tex-math id="d33e976">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} R=GT\cap Participant/GT=1/3=33\% \end{aligned}$$\end{document}</tex-math><mml:math id="d33e982" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>R</mml:mi><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>&#x02229;</mml:mo><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn><mml:mo>=</mml:mo><mml:mn>33</mml:mn><mml:mo>%</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ4.gif" position="anchor"/></alternatives></disp-formula><disp-formula id="Equ5"><label>5</label><alternatives><tex-math id="d33e1019">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} J=GT\cap Participant/GT\cup Participant=1/6=16\% \end{aligned}$$\end{document}</tex-math><mml:math id="d33e1025" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>J</mml:mi><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>&#x02229;</mml:mo><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>&#x0222a;</mml:mo><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mn>6</mml:mn><mml:mo>=</mml:mo><mml:mn>16</mml:mn><mml:mo>%</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ5.gif" position="anchor"/></alternatives></disp-formula>Those numbers are far from the intuitive understanding of what is concretely happening in the inspection of a file with over 800 lines of code. The participant identified the region: 1 clear TP, essentially 2 out of 3 visible in a git context, and 1 clear FP. Precision, recall, and the Jaccard index are <italic>summary</italic> indicators that they are reliable when the numerator and denominator are large numbers derived from large samples. However, this is not applicable in our case: the difference in +1 or -1 line of code makes those summary indicators widely swing.</p></sec><sec id="FPar7"><title>A local but still coarse grained metric</title><p id="Par35">. As an initial attempt, we created a <inline-formula id="IEq17"><alternatives><tex-math id="d33e1083">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e1088"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq17.gif"/></alternatives></inline-formula>-neighborhood by adding all lines away from <inline-formula id="IEq18"><alternatives><tex-math id="d33e1092">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e1097"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq18.gif"/></alternatives></inline-formula> from the Ground Truth by <inline-formula id="IEq19"><alternatives><tex-math id="d33e1101">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e1106"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq19.gif"/></alternatives></inline-formula> line numbers.</p><p id="Par36">The Ground truth would have thus been <inline-formula id="IEq20"><alternatives><tex-math id="d33e1112">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text{ neighbor}_{\delta }\left( GT\right) $$\end{document}</tex-math><mml:math id="d33e1117"><mml:mrow><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mfenced close=")" open="("><mml:mi>G</mml:mi><mml:mi>T</mml:mi></mml:mfenced></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq20.gif"/></alternatives></inline-formula>. This made it easier to test potential TP (<inline-formula id="IEq21"><alternatives><tex-math id="d33e1128">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Participant\cap \text{ neighbor}_{\delta }\left( GT\right) $$\end{document}</tex-math><mml:math id="d33e1133"><mml:mrow><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo>&#x02229;</mml:mo><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mfenced close=")" open="("><mml:mi>G</mml:mi><mml:mi>T</mml:mi></mml:mfenced></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq21.gif"/></alternatives></inline-formula>) but we realized that it would have inflated the number of potential positives up to <inline-formula id="IEq22"><alternatives><tex-math id="d33e1157">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$2\cdot \delta \cdot |GT|$$\end{document}</tex-math><mml:math id="d33e1162"><mml:mrow><mml:mn>2</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:mi>&#x003b4;</mml:mi><mml:mo>&#x000b7;</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq22.gif"/></alternatives></inline-formula> and also generated a large number of FN. The FP rate would have been instead meaningful since it indicates lines that are really far off from the target (<inline-formula id="IEq23"><alternatives><tex-math id="d33e1176">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Participant\setminus \text{ neighbor}_{\delta }\left( GT\right) $$\end{document}</tex-math><mml:math id="d33e1181"><mml:mrow><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo lspace="0.15em" rspace="0.15em" stretchy="false">\</mml:mo><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mfenced close=")" open="("><mml:mi>G</mml:mi><mml:mi>T</mml:mi></mml:mfenced></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq23.gif"/></alternatives></inline-formula>).</p><p id="Par37">In our example the 3-neighborhood would have been the interval of ground truth lines +/- 3 lines. In this particular example, the 3-neighborhood interval is 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466. Any participant&#x02019;s answer line falling in this interval would have been considered valid as identification for the vulnerable lines of the ground truth.</p></sec><sec id="FPar8"><title>Our proposed metric</title><p id="Par38">Therefore, we designed a more precise classification of the TP that would also avoid inflating the FN. <def-list><def-item><term><inline-formula id="IEq24"><alternatives><tex-math id="d33e1215">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_\delta =$$\end{document}</tex-math><mml:math id="d33e1220"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq24.gif"/></alternatives></inline-formula></term><def><p id="Par39">all GT lines whose <inline-formula id="IEq25"><alternatives><tex-math id="d33e1231">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e1236"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq25.gif"/></alternatives></inline-formula>-neighborhood intersect the lines suggested by a participant <inline-formula id="IEq26"><alternatives><tex-math id="d33e1240">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_\delta =\left| \left\{ \ell \in GT: Participant \cap \text{ neighbor}_{\delta }\left( \ell \right) \right\} \right| $$\end{document}</tex-math><mml:math id="d33e1245"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mfenced close="|" open="|"><mml:mfenced close="}" open="{"><mml:mi>&#x02113;</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>:</mml:mo><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo>&#x02229;</mml:mo><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mfenced close=")" open="("><mml:mi>&#x02113;</mml:mi></mml:mfenced></mml:mfenced></mml:mfenced></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq26.gif"/></alternatives></inline-formula></p></def></def-item><def-item><term><inline-formula id="IEq27"><alternatives><tex-math id="d33e1281">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FP_\delta =$$\end{document}</tex-math><mml:math id="d33e1286"><mml:mrow><mml:mi>F</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq27.gif"/></alternatives></inline-formula></term><def><p id="Par40">all remaining lines suggested by a participant that are not in the <inline-formula id="IEq28"><alternatives><tex-math id="d33e1297">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e1302"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq28.gif"/></alternatives></inline-formula>-neighborhood of the entire GT.</p></def></def-item><def-item><term><inline-formula id="IEq29"><alternatives><tex-math id="d33e1308">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FN_\delta =$$\end{document}</tex-math><mml:math id="d33e1313"><mml:mrow><mml:mi>F</mml:mi><mml:msub><mml:mi>N</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq29.gif"/></alternatives></inline-formula></term><def><p id="Par41">all remaining lines in GT that are not TPs.</p></def></def-item></def-list></p><p id="Par42">The key idea is that we count as TP the lines that identify a region. If the region is the same, then we should count all lines pointing to the same region of a vulnerable line as a single TP. The more vulnerable lines fell into the region identified by the participants, the better but this should not needlessly inflate the number of either TPs or FPs.</p><p id="Par43">Using again the concrete example from CVE-2012-2733, with <inline-formula id="IEq30"><alternatives><tex-math id="d33e1328">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$GT = \{459, 462,463\}$$\end{document}</tex-math><mml:math id="d33e1333"><mml:mrow><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>459</mml:mn><mml:mo>,</mml:mo><mml:mn>462</mml:mn><mml:mo>,</mml:mo><mml:mn>463</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq30.gif"/></alternatives></inline-formula> and <inline-formula id="IEq31"><alternatives><tex-math id="d33e1349">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Participant = \{457,458,459,500\}$$\end{document}</tex-math><mml:math id="d33e1354"><mml:mrow><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>457</mml:mn><mml:mo>,</mml:mo><mml:mn>458</mml:mn><mml:mo>,</mml:mo><mml:mn>459</mml:mn><mml:mo>,</mml:mo><mml:mn>500</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq31.gif"/></alternatives></inline-formula>, in Table&#x000a0;<xref rid="Tab2" ref-type="table">2</xref> we show the result that we would obtain with <inline-formula id="IEq32"><alternatives><tex-math id="d33e1385">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta =0$$\end{document}</tex-math><mml:math id="d33e1390"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq32.gif"/></alternatives></inline-formula> and <inline-formula id="IEq33"><alternatives><tex-math id="d33e1397">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta =3$$\end{document}</tex-math><mml:math id="d33e1402"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq33.gif"/></alternatives></inline-formula>.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Illustration metrics application</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left" colspan="3"><inline-formula id="IEq34"><alternatives><tex-math id="d33e1428">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e1433"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq34.gif"/></alternatives></inline-formula></th><th align="left" colspan="3"><inline-formula id="IEq35"><alternatives><tex-math id="d33e1441">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e1446"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq35.gif"/></alternatives></inline-formula></th></tr><tr><th align="left"/><th align="left" colspan="6">GT lines</th></tr><tr><th align="left">P lines</th><th align="left">459</th><th align="left">462</th><th align="left">463</th><th align="left">459</th><th align="left">462</th><th align="left">463</th></tr></thead><tbody><tr><td align="left">457</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02713;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td></tr><tr><td align="left">458</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02713;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td></tr><tr><td align="left">459</td><td align="left">&#x02713;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02713;</td><td align="left">&#x02713;</td><td align="left">&#x02717;</td></tr><tr><td align="left">500</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td><td align="left">&#x02717;</td></tr><tr><td align="left"/><td align="left" colspan="6">Metric</td></tr><tr><td align="left"/><td align="left">TP</td><td align="left">FP</td><td align="left">FN</td><td align="left">TP</td><td align="left">FP</td><td align="left">FN</td></tr><tr><td align="left">Total</td><td align="left">1</td><td align="left">3</td><td align="left">2</td><td align="left">2</td><td align="left">1</td><td align="left">1</td></tr></tbody></table><table-wrap-foot><p>We show the concrete example of CVE-2012-2733. Each row corresponds to a line from the <inline-formula id="IEq36"><alternatives><tex-math id="d33e1568">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Participant = \{457,458,459,500\}$$\end{document}</tex-math><mml:math id="d33e1573"><mml:mrow><mml:mi>P</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>457</mml:mn><mml:mo>,</mml:mo><mml:mn>458</mml:mn><mml:mo>,</mml:mo><mml:mn>459</mml:mn><mml:mo>,</mml:mo><mml:mn>500</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq36.gif"/></alternatives></inline-formula> variable, and each column corresponds to a line from the <inline-formula id="IEq37"><alternatives><tex-math id="d33e1601">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$GT = \{459,462,463\}$$\end{document}</tex-math><mml:math id="d33e1606"><mml:mrow><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>459</mml:mn><mml:mo>,</mml:mo><mml:mn>462</mml:mn><mml:mo>,</mml:mo><mml:mn>463</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq37.gif"/></alternatives></inline-formula> variable. On the left side of the table, we show the results for <inline-formula id="IEq38"><alternatives><tex-math id="d33e1622">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e1627"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq38.gif"/></alternatives></inline-formula>, and on the right side the results for <inline-formula id="IEq39"><alternatives><tex-math id="d33e1634">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e1639"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq39.gif"/></alternatives></inline-formula>. We indicate with &#x02713;if a P line falls in the <inline-formula id="IEq40"><alternatives><tex-math id="d33e1646">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e1651"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq40.gif"/></alternatives></inline-formula>-neighbor of a GT line, otherwise we use the symbol &#x02717;. At the bottom of the table, we report the final result for the metrics TP, FP, and FN</p></table-wrap-foot></table-wrap></p><p id="Par44">For the case of <inline-formula id="IEq41"><alternatives><tex-math id="d33e1657">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e1662"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq41.gif"/></alternatives></inline-formula> we have <inline-formula id="IEq42"><alternatives><tex-math id="d33e1669">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta =0} = 1$$\end{document}</tex-math><mml:math id="d33e1674"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq42.gif"/></alternatives></inline-formula> for the line 459, which exactly matches the ground truth line, <inline-formula id="IEq43"><alternatives><tex-math id="d33e1687">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FP_{\delta =0} = 3$$\end{document}</tex-math><mml:math id="d33e1692"><mml:mrow><mml:mi>F</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq43.gif"/></alternatives></inline-formula> for the lines <inline-formula id="IEq44"><alternatives><tex-math id="d33e1705">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{457,458,500\}$$\end{document}</tex-math><mml:math id="d33e1710"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>457</mml:mn><mml:mo>,</mml:mo><mml:mn>458</mml:mn><mml:mo>,</mml:mo><mml:mn>500</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq44.gif"/></alternatives></inline-formula> as they do not match any of the ground truth lines, and <inline-formula id="IEq45"><alternatives><tex-math id="d33e1723">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FN_{\delta =0} = 2$$\end{document}</tex-math><mml:math id="d33e1728"><mml:mrow><mml:mi>F</mml:mi><mml:msub><mml:mi>N</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq45.gif"/></alternatives></inline-formula> on the remaining missed lines <inline-formula id="IEq46"><alternatives><tex-math id="d33e1742">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{462,463\}$$\end{document}</tex-math><mml:math id="d33e1747"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>462</mml:mn><mml:mo>,</mml:mo><mml:mn>463</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq46.gif"/></alternatives></inline-formula> in the GT.</p><p id="Par45">We can then compute the <inline-formula id="IEq47"><alternatives><tex-math id="d33e1760">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta =3$$\end{document}</tex-math><mml:math id="d33e1765"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq47.gif"/></alternatives></inline-formula> neighborhood of the ground truth <italic>GT</italic> for the three lines indicated by the expert.<disp-formula id="Equ6"><label>6</label><alternatives><tex-math id="d33e1775">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \text{ neighbor}_{3}\left( 459\right)= &#x00026;  \left\{ 456, \underline{457}, \underline{458}, \underline{{\textbf {459}}}, 460, 461, 462\right\} \end{aligned}$$\end{document}</tex-math><mml:math id="d33e1781" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mn>3</mml:mn></mml:msub><mml:mfenced close=")" open="("><mml:mn>459</mml:mn></mml:mfenced><mml:mo>=</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mfenced close="}" open="{"><mml:mn>456</mml:mn><mml:mo>,</mml:mo><mml:munder><mml:mn>457</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo>,</mml:mo><mml:munder><mml:mn>458</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo>,</mml:mo><mml:munder><mml:mn mathvariant="bold">459</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo>,</mml:mo><mml:mn>460</mml:mn><mml:mo>,</mml:mo><mml:mn>461</mml:mn><mml:mo>,</mml:mo><mml:mn>462</mml:mn></mml:mfenced></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ6.gif" position="anchor"/></alternatives></disp-formula><disp-formula id="Equ7"><label>7</label><alternatives><tex-math id="d33e1818">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \text{ neighbor}_{3}\left( 462\right)= &#x00026;  \left\{ \underline{459}, 460, 461, {\textbf {462}}, 463, 464, 465\right\} \end{aligned}$$\end{document}</tex-math><mml:math id="d33e1824" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mn>3</mml:mn></mml:msub><mml:mfenced close=")" open="("><mml:mn>462</mml:mn></mml:mfenced><mml:mo>=</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mfenced close="}" open="{"><mml:munder><mml:mn>459</mml:mn><mml:mo>&#x0005f;</mml:mo></mml:munder><mml:mo>,</mml:mo><mml:mn>460</mml:mn><mml:mo>,</mml:mo><mml:mn>461</mml:mn><mml:mo>,</mml:mo><mml:mn mathvariant="bold">462</mml:mn><mml:mo>,</mml:mo><mml:mn>463</mml:mn><mml:mo>,</mml:mo><mml:mn>464</mml:mn><mml:mo>,</mml:mo><mml:mn>465</mml:mn></mml:mfenced></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ7.gif" position="anchor"/></alternatives></disp-formula><disp-formula id="Equ8"><label>8</label><alternatives><tex-math id="d33e1857">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \text{ neighbor}_{3}\left( 463\right)= &#x00026;  \left\{ 460, 461, 462, {\textbf {463}}, 464, 465, 466\right\} \end{aligned}$$\end{document}</tex-math><mml:math id="d33e1863" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mn>3</mml:mn></mml:msub><mml:mfenced close=")" open="("><mml:mn>463</mml:mn></mml:mfenced><mml:mo>=</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mfenced close="}" open="{"><mml:mn>460</mml:mn><mml:mo>,</mml:mo><mml:mn>461</mml:mn><mml:mo>,</mml:mo><mml:mn>462</mml:mn><mml:mo>,</mml:mo><mml:mn mathvariant="bold">463</mml:mn><mml:mo>,</mml:mo><mml:mn>464</mml:mn><mml:mo>,</mml:mo><mml:mn>465</mml:mn><mml:mo>,</mml:mo><mml:mn>466</mml:mn></mml:mfenced></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="10664_2025_10636_Article_Equ8.gif" position="anchor"/></alternatives></disp-formula>To visualize the result of the computation we mark with boldface the lines of the ground truth and underline the lines identified by the participant. For the case of <inline-formula id="IEq48"><alternatives><tex-math id="d33e1895">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e1900"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq48.gif"/></alternatives></inline-formula>, we have <inline-formula id="IEq49"><alternatives><tex-math id="d33e1908">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta =3}=2$$\end{document}</tex-math><mml:math id="d33e1913"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq49.gif"/></alternatives></inline-formula> for the lines <inline-formula id="IEq50"><alternatives><tex-math id="d33e1926">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{457, 458, 459 \}$$\end{document}</tex-math><mml:math id="d33e1931"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>457</mml:mn><mml:mo>,</mml:mo><mml:mn>458</mml:mn><mml:mo>,</mml:mo><mml:mn>459</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq50.gif"/></alternatives></inline-formula> which falls into the 3-neighborhood of the lines <inline-formula id="IEq51"><alternatives><tex-math id="d33e1944">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{459, 462\}$$\end{document}</tex-math><mml:math id="d33e1949"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>459</mml:mn><mml:mo>,</mml:mo><mml:mn>462</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq51.gif"/></alternatives></inline-formula>, <inline-formula id="IEq52"><alternatives><tex-math id="d33e1960">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FP_{\delta =3}=1$$\end{document}</tex-math><mml:math id="d33e1965"><mml:mrow><mml:mi>F</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq52.gif"/></alternatives></inline-formula> corresponding to line <inline-formula id="IEq53"><alternatives><tex-math id="d33e1978">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{ 500 \}$$\end{document}</tex-math><mml:math id="d33e1983"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>500</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq53.gif"/></alternatives></inline-formula> which fall in none of <inline-formula id="IEq54"><alternatives><tex-math id="d33e1992">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text{ neighbor}_{3}\left( 459\right) $$\end{document}</tex-math><mml:math id="d33e1997"><mml:mrow><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mn>3</mml:mn></mml:msub><mml:mfenced close=")" open="("><mml:mn>459</mml:mn></mml:mfenced></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq54.gif"/></alternatives></inline-formula>, <inline-formula id="IEq55"><alternatives><tex-math id="d33e2008">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text{ neighbor}_{3}\left( 462\right) $$\end{document}</tex-math><mml:math id="d33e2013"><mml:mrow><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mn>3</mml:mn></mml:msub><mml:mfenced close=")" open="("><mml:mn>462</mml:mn></mml:mfenced></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq55.gif"/></alternatives></inline-formula>, or <inline-formula id="IEq56"><alternatives><tex-math id="d33e2023">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text{ neighbor}_{3}\left( 463\right) $$\end{document}</tex-math><mml:math id="d33e2028"><mml:mrow><mml:mspace width="0.333333em"/><mml:msub><mml:mtext>neighbor</mml:mtext><mml:mn>3</mml:mn></mml:msub><mml:mfenced close=")" open="("><mml:mn>463</mml:mn></mml:mfenced></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq56.gif"/></alternatives></inline-formula> and <inline-formula id="IEq57"><alternatives><tex-math id="d33e2038">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FN_3=1$$\end{document}</tex-math><mml:math id="d33e2043"><mml:mrow><mml:mi>F</mml:mi><mml:msub><mml:mi>N</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq57.gif"/></alternatives></inline-formula> on the remaining missed line <inline-formula id="IEq58"><alternatives><tex-math id="d33e2053">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{463\}$$\end{document}</tex-math><mml:math id="d33e2058"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>463</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq58.gif"/></alternatives></inline-formula> in the GT. Moreover, since line <inline-formula id="IEq59"><alternatives><tex-math id="d33e2067">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{459\}$$\end{document}</tex-math><mml:math id="d33e2072"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>459</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq59.gif"/></alternatives></inline-formula> falls into both the 3-neighborhood of the lines <inline-formula id="IEq60"><alternatives><tex-math id="d33e2081">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{459, 462\}$$\end{document}</tex-math><mml:math id="d33e2086"><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mn>459</mml:mn><mml:mo>,</mml:mo><mml:mn>462</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq60.gif"/></alternatives></inline-formula>, we count it as one single <italic>TP</italic>.</p></sec></sec><sec id="Sec6"><title>Experimental design</title><p id="Par46">Figure&#x000a0;<xref rid="Fig2" ref-type="fig">2</xref> summarizes the experimental protocol that we designed.</p><p id="Par47">If we consider having <italic>k</italic> factors, <inline-formula id="IEq61"><alternatives><tex-math id="d33e2113">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\ell $$\end{document}</tex-math><mml:math id="d33e2118"><mml:mi>&#x02113;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq61.gif"/></alternatives></inline-formula> levels, in a full factorial design we test all the possible conditions which are equal to <inline-formula id="IEq62"><alternatives><tex-math id="d33e2122">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\ell ^{k}$$\end{document}</tex-math><mml:math id="d33e2127"><mml:msup><mml:mi>&#x02113;</mml:mi><mml:mi>k</mml:mi></mml:msup></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq62.gif"/></alternatives></inline-formula>. Even if this design reveals all the combinations, it is time-consuming and requires many subjects. In our scenario we compare sliced files and original files, therefore, we have <inline-formula id="IEq63"><alternatives><tex-math id="d33e2133">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\ell =2$$\end{document}</tex-math><mml:math id="d33e2138"><mml:mrow><mml:mi>&#x02113;</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq63.gif"/></alternatives></inline-formula> and <inline-formula id="IEq64"><alternatives><tex-math id="d33e2145">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k=4$$\end{document}</tex-math><mml:math id="d33e2150"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>4</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq64.gif"/></alternatives></inline-formula> factors, one for each vulnerability type (path, user, XSS, DoS). Therefore, our scenario would yield 16 different conditions. As our goal is to compare subjects that did not identify the vulnerable lines vs subjects that identified at least some vulnerable lines, this would have required two additional conditions for each scenario. Such an experimental setup would require too many conditions (<italic>n</italic>) for an experiment with human subjects because obtaining some statistical confidence would require making sure that at least 5 and possibly 15 participants are assigned to each condition (at least <inline-formula id="IEq65"><alternatives><tex-math id="d33e2161">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$n=2^{4}\times 2 \times 5-15=145$$\end{document}</tex-math><mml:math id="d33e2166"><mml:mrow><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mn>2</mml:mn><mml:mn>4</mml:mn></mml:msup><mml:mo>&#x000d7;</mml:mo><mml:mn>2</mml:mn><mml:mo>&#x000d7;</mml:mo><mml:mn>5</mml:mn><mml:mo>-</mml:mo><mml:mn>15</mml:mn><mml:mo>=</mml:mo><mml:mn>145</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq65.gif"/></alternatives></inline-formula>).<fig id="Fig2"><label>Fig. 2</label><caption><p>Steps of our experiment</p></caption><graphic xlink:href="10664_2025_10636_Fig2_HTML" id="MO6"/></fig></p><p id="Par48">An alternative is to use crossover designs, common in software engineering experimentation. Since subjects apply more than one treatment, this kind of experiment requires fewer participants and controls the variability among subjects. Vegas et&#x000a0;al. (<xref ref-type="bibr" rid="CR84">2015</xref>) argue that crossover experiments can yield valid results, therefore, we decided to design a balanced crossover experiment. In our experiment, each treatment differs in the pair <italic>(Vulnerability, Type of Code)</italic>. Hence, we opted for the orthogonal array experiment, where the number of treatments is then <inline-formula id="IEq66"><alternatives><tex-math id="d33e2198">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(k-1)\ell $$\end{document}</tex-math><mml:math id="d33e2203"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mi>&#x02113;</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq66.gif"/></alternatives></inline-formula>. Massacci et&#x000a0;al. (<xref ref-type="bibr" rid="CR46">2024</xref>) formally analyzed this particular form of design which makes possible to control for learning effect. This means that the experimental unit is the pair <italic>(participant, vulnerability scenario)</italic>. Therefore, for each participant, there will be two data points for the slice intervention and two data points for the full intervention (a total of four data pairs for each participant), as discussed by Massacci et&#x000a0;al. (<xref ref-type="bibr" rid="CR46">2024</xref>). Therefore, if we consider the case of three slice interventions in which no vulnerable lines were found, two data points could come from the same student, the third one from a different student, or all three data points could come from three different students.</p><p id="Par49">Therefore, we designed 6 different groups, each of them to be tested for the cases when some vulnerable lines have and have not been found. Each subject is randomly assigned to execute four different assessments, each described in a square in Fig.&#x000a0;<xref rid="Fig2" ref-type="fig">2</xref>.</p><p id="Par50">We gave each participant an equal share of full and slice source code for two reasons. <italic>(i)</italic> Slice intervention reduces the time of code inspection, Jaber et&#x000a0;al. (<xref ref-type="bibr" rid="CR38">2020</xref>) show that program slicing techniques reduce the time of code inspection process. Therefore, assigning the participants to only full treatments, or slice treatments would have led to an unbalanced experiment design, as inspecting a slice of code takes less time than inspecting the full source code. <italic>(ii)</italic> Moreover, the experimental time is fixed and is the same for all the participants. Splitting the participants into two groups (full treatment and slice treatment) would lead to unfair results as inspecting a slice of code takes less time and the participants would have more time to inspect the code and find more vulnerabilities.</p></sec><sec id="Sec7"><title>Experimental protocol</title><sec id="FPar9"><title>Selection of Participants</title><p id="Par51">Participants are by convenience sampling as MSc Students attending Class 1 at University 1, and Class 2 at University 2. Both classes were elective security courses. The objectives of both classes included performing and designing experiments of attack and defense to analyze techniques to improve code inspection. Students had to analyze and present the results to the class.</p></sec><sec id="FPar10"><title>Training</title><p id="Par52">The first part of the experiment consists of a training phase on the detection of vulnerabilities in source code. Its purpose is to fill the security knowledge gaps of the participants since not all of them have a strong cybersecurity background.</p><p id="Par53">The duration of the training is an important experiment parameter but there is not enough consensus in the literature regarding the length of the training. In the field of threat analysis and security requirements, training activities sometimes last several hours&#x000a0;(Scandariato et&#x000a0;al. <xref ref-type="bibr" rid="CR64">215</xref>; Wuyts et&#x000a0;al. <xref ref-type="bibr" rid="CR90">2014</xref>) or even days (Tuma and Scandariato <xref ref-type="bibr" rid="CR82">2018</xref>). In the domain of APR tools, Chong et&#x000a0;al. (<xref ref-type="bibr" rid="CR19">2021</xref>) included training of several weekly lectures of 60 minutes. In contrast, Tao et&#x000a0;al. (<xref ref-type="bibr" rid="CR78">2014</xref>) designed only a ten minute tutorial. Other studies planned an introduction, instruction, or a tutorial for their participants, however, these works do not mention the duration of their training phase (Naiakshina et&#x000a0;al. <xref ref-type="bibr" rid="CR49">2017</xref>; Cambronero et&#x000a0;al. <xref ref-type="bibr" rid="CR17">2019</xref>; Zhang et&#x000a0;al. <xref ref-type="bibr" rid="CR94">2022</xref>; Fry et&#x000a0;al. <xref ref-type="bibr" rid="CR28">2012</xref>). Other works do not mention any training for their participants (Rong et&#x000a0;al. <xref ref-type="bibr" rid="CR59">2012</xref>; Gon&#x000e7;alves et&#x000a0;al. <xref ref-type="bibr" rid="CR30">2020</xref>).</p><p id="Par54">We based our training design on previous studies where professionals were involved, and the minimum training duration for these works was 1.5 hours (Allodi et&#x000a0;al. <xref ref-type="bibr" rid="CR4">2020</xref>; Gramatica et&#x000a0;al. <xref ref-type="bibr" rid="CR31">2015</xref>; Tuma et&#x000a0;al. <xref ref-type="bibr" rid="CR81">2021</xref>). In the industry reality, this is the average duration for a typical session of professional training phases<xref ref-type="fn" rid="Fn2">2</xref>. Moreover, the survey reported by Kollanus and Koskinen (<xref ref-type="bibr" rid="CR41">2009</xref>) also report that &#x0201c;overview meetings&#x0201d; are frequently used in software inspection publications. The term <italic>meeting</italic> does not suggest presentations of 10 or 30 minutes, nor day-long events, therefore, we concluded that the duration of 1.5 hours was reasonable.</p><p id="Par56">The training was performed through the support of the platform Qualtrics. We created a survey that has two goals: <italic>(i)</italic> to register the participants and assign them to the different groups and <italic>(ii)</italic> show five different videos that we recorded. The first video is a general introduction to security vulnerabilities, the following four videos cover in detail each vulnerability type that we selected for the experiment: user injection, XSS, path traversal, and denial of service. The participants&#x02019; objectives achieved at the end of the training are gaining knowledge about <italic>(i)</italic> 4 specific vulnerability types, and <italic>(ii)</italic> identifying them into programming code also supported by simple checklists. In particular, to offset potential issues due to individual usages of checklist (see e.g. Braz et&#x000a0;al. <xref ref-type="bibr" rid="CR14">2022</xref>), each training section was concluded with a simple checklist that participants could use. We report the example of denial of service in Fig.&#x000a0;<xref rid="Fig3" ref-type="fig">3</xref>.</p><p id="Par57">The training Qualtrics survey was released to the students one day before the experiment, and it was accessible until two hours before the start of the experiment, therefore, they had 24 hours in total to complete and submit the survey. One hour and a half is the total duration of the five training videos.</p><p id="Par58">Once the students successfully submitted the survey, they received an email with a link to a Google Drive folder containing all the training material such as lecture videos, digital copies of lecture slides, technical documentation, etc. to be consulted at any time, also during the execution of the experiment.</p><p>
<fig id="Fig3"><label>Fig. 3</label><caption><p>Denial of Service: how to find it checklist</p></caption><graphic xlink:href="10664_2025_10636_Fig3_HTML" id="MO7"/></fig>
</p></sec><sec id="FPar11"><title>Randomization</title><p id="Par60">We used the training Qualtrics survey system to randomly assign the students to one of the six treatments. The treatments differ in the pair <italic>(Type of Vulnerability, Type of Code)</italic>. We collected the variables <italic>Assignment to a Vulnerability Treatment</italic> and <italic>Assignment to a Type of Code Treatment</italic>. The first describes the assignment of each participant to a type of vulnerability, given the variable assignment to a type of code. The second describes the assignment of each participant to a type of code: <italic>(i)</italic> slice of code, or <italic>(ii)</italic> original file code.</p><p id="Par61"><bold>Experiment</bold>. The participants performed the experiment in a laboratory located on campus, and they had a maximum of 100 minutes to complete it (which allowed, on average, 25 minutes for each vulnerability). The participants were separated into different rooms according to their treatment group to avoid spillover effects. Each room was supervised by an experimenter whose role does not go beyond the supervision of the room and the technical support, s/he couldn&#x02019;t reply to questions regarding the solution of the correct vulnerable lines. S/he however controlled that participants did not talk to each other. We assumed that the participants would not have used the internet or chat messages to talk to each other. We discuss this issue further in the threat to validity.</p><p id="Par62">The participants were tasked with identifying the vulnerabilities in the code files provided through a link to a Google Drive folder. Each treatment had a link to a different folder. The code files provided to the students were simply non-runnable Java code. Once the participants downloaded the four files, they could open the files, and inspect the code using the IDE they were more comfortable with. The participants submitted their answers through the Qualtrics survey by writing the number of the vulnerable lines identified. Moreover, to have a deeper level of analysis and understanding of the answer reported, and to avoid doubts about the reliability of the results, the participants were asked to explain why they deemed certain lines as vulnerable. The participants could follow the recommendations to perform code inspection provided during the training (e.g. see Fig.&#x000a0;<xref rid="Fig3" ref-type="fig">3</xref>).</p><p>
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Experimental Variables</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Name</th><th align="left">Description</th><th align="left">Operationalize</th></tr></thead><tbody><tr><td align="left" colspan="3">
<italic>Independent variables (design)</italic>
</td></tr><tr><td align="left">Assignment to a Vulnerability Treatment</td><td align="left">Random assignments of the participants to a vulnerability (path traversal, user injection, XSS, DoS).</td><td align="left">Nominal (A)</td></tr><tr><td align="left">Assignment to a Type of Code Treatment</td><td align="left">Random assignments of the participants to a type of code (full vs. slice).</td><td align="left">Nominal (A)</td></tr><tr><td align="left" colspan="3">
<italic>Background variables</italic>
</td></tr><tr><td align="left">Knowledge of Java</td><td align="left">Self-reported concrete experience on Java.</td><td align="left">Ordinal scale (B)</td></tr><tr><td align="left">Knowledge of Security Vulnerabilities</td><td align="left">Self-reported concrete experience on vulnerability assessment.</td><td align="left">Ordinal scale (B)</td></tr><tr><td align="left">Knowledge of SW Development IDE</td><td align="left">Self-reported concrete experience on software development IDE.</td><td align="left">Ordinal scale (B)</td></tr><tr><td align="left" colspan="3">
<italic>Dependent variables</italic>
</td></tr><tr><td align="left">Vulnerable Lines Found</td><td align="left">Number of correct vulnerable lines identified by the participants.</td><td align="left">Ratio (C)</td></tr></tbody></table><table-wrap-foot><p><bold>(A)</bold> Automatically performed by the Qualtrics submission tool; <bold>(B)</bold> Multiple choice: no experience, attended a tutorial, attended a course, company internship, professional practice; <bold>(C)</bold> Text insertion of the interval of the vulnerable lines</p></table-wrap-foot></table-wrap>
</p></sec></sec><sec id="Sec8"><title>Measurement plan</title><p id="Par64">Table&#x000a0;<xref rid="Tab3" ref-type="table">3</xref> shows the independent and dependent variables of the experiment. The survey used to collect the data included three parts: the <italic>Background</italic> section included questions on knowledge of Java, knowledge of security vulnerabilities, and years of experience in coding, and code inspection; the <italic>Experiment</italic> section was used to collect the experimental data;</p><sec id="FPar12"><title>Training Compliance</title><p id="Par65">Initially the format of the experiment was slightly different as the training was conducted in person. Due to the Covid pandemic, we were forced to switch the experiment to an online format. To assure the quality of the data we collected quality control measures as <italic>Time spent on the video</italic>, <italic>Perception</italic> questions on the usefulness of the training material, difficulty of the questions, and an open question to provide additional comments to improve the experiment process. Since the purpose of the training is to train participants on security vulnerabilities detection into source code, we collected the variable <italic>Time spent on the video</italic> to check whether the students watched the training video/material. To guarantee the quality of the data we decided to keep the perception questions in the survey also after the end of the pandemic period.</p></sec><sec id="FPar13"><title>Experimental Background</title><p id="Par66">The objective is to ascertain whether the participants have any experience in different contexts (e.g. University projects, personal developed projects, or professional experience) that might impact the result of the experiments. We collected the variables <italic>Knowledge of Java</italic> and <italic>Knowledge of Security Vulnerabilities</italic> asking if they attended a tutorial, a full course, have done vulnerability assessment in an internship, or have true professional expertise.</p></sec><sec id="FPar14"><title>Experimental Outcome</title><p id="Par67">Moreover, to answer to RQ1 and RQ2 we need to know the number of correct vulnerable lines identified by the participants, which is measured through the variable <italic>Vulnerable Lines Found</italic>. We collected the participants&#x02019; responses, and we implemented a Python script to count the number of correct vulnerable lines that have been reported. A vulnerable line is considered correct if it is included in the ground truth interval (see Section&#x000a0;<xref rid="Sec4" ref-type="sec">3.1</xref>).</p></sec></sec><sec id="Sec9"><title>Analysis procedure</title><sec id="FPar15"><title>Statistical Tests</title><p id="Par68">To answer our research questions we want to determine whether there is a statistically different distribution between the slicing and control. As common to many computer science experiments and in particular on the analysis of security vulnerabilities which are rare and hard to find, we expected to have an excess of zeros. In other words, we expected our dataset to be divided between those who &#x0201c;found nothing&#x0201d; and those who &#x0201c;found something&#x0201d;. We, therefore, followed Lachenbruch&#x02019;s statistical recommendations to correctly analyze datasets with an excess of zeros (Lachenbruch <xref ref-type="bibr" rid="CR42">2002</xref>) and split the analysis into two parts: a discrete test (a <inline-formula id="IEq67"><alternatives><tex-math id="d33e2524">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\chi ^2$$\end{document}</tex-math><mml:math id="d33e2529"><mml:msup><mml:mi>&#x003c7;</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq67.gif"/></alternatives></inline-formula> contingency table test) to test the differences between those that &#x0201c;found something&#x0201d; and those that &#x0201c;found nothing&#x0201d; and a test for an ordinal or continuous variable (t-test, Mann-Withney U test, or Kruskal-Wallis H test) to distinguish among those that found something.</p><p id="Par69">As we considered the possibility of no effect, we used TOST (Two One-Sided Tests) as a test of equivalence which was initially proposed by Schuirmann (<xref ref-type="bibr" rid="CR65">1981</xref>) and is widely used in pharmacological and food sciences to check whether the two treatments are equivalent within a specified range (either as an additive constant or as a ratio)&#x000a0;(Food and Drug Administration <xref ref-type="bibr" rid="CR27">2001</xref>; Meyners <xref ref-type="bibr" rid="CR48">2012</xref>). For the US Food and Drug Administration and the European Medicine Agency, two drugs are considered equivalent if their respective distributions <italic>x</italic> and <italic>y</italic> are such that <inline-formula id="IEq68"><alternatives><tex-math id="d33e2553">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$x \cdot \rho &#x0003c; y$$\end{document}</tex-math><mml:math id="d33e2558"><mml:mrow><mml:mi>x</mml:mi><mml:mo>&#x000b7;</mml:mo><mml:mi>&#x003c1;</mml:mi><mml:mo>&#x0003c;</mml:mo><mml:mi>y</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq68.gif"/></alternatives></inline-formula> (one-sided test) and <inline-formula id="IEq69"><alternatives><tex-math id="d33e2567">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$y &#x0003c; x \cdot 1/\rho $$\end{document}</tex-math><mml:math id="d33e2572"><mml:mrow><mml:mi>y</mml:mi><mml:mo>&#x0003c;</mml:mo><mml:mi>x</mml:mi><mml:mo>&#x000b7;</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mi>&#x003c1;</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq69.gif"/></alternatives></inline-formula> (the second one-sided test) for <inline-formula id="IEq70"><alternatives><tex-math id="d33e2584">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\rho = 0.8$$\end{document}</tex-math><mml:math id="d33e2589"><mml:mrow><mml:mi>&#x003c1;</mml:mi><mml:mo>=</mml:mo><mml:mn>0.8</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq70.gif"/></alternatives></inline-formula>. The results of the two tests are conservatively combined by taking the maximum of the two <italic>p</italic>-values. The underlying directional test can be either the Mann-Whitney U (MWU) test or the t-test depending on the conditions at hand. In our study, to answer RQ2 and RQ3, we used MWU test. The null hypothesis for RQ2 is that there is no difference between the two groups original files and slice files. Similar for RQ3 but considering one type of vulnerability at a time. For both research questions, we set as p-value (threshold) 0.05. To be conservative, we adopt the value of <inline-formula id="IEq71"><alternatives><tex-math id="d33e2599">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\rho $$\end{document}</tex-math><mml:math id="d33e2604"><mml:mi>&#x003c1;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq71.gif"/></alternatives></inline-formula> used by the FDA and EMA.</p></sec><sec id="FPar16"><title>Measures of Success</title><p id="Par70">We proposed an innovative solution based on the intersection between the <inline-formula id="IEq72"><alternatives><tex-math id="d33e2612">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e2617"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq72.gif"/></alternatives></inline-formula>-neighborhood (in terms of lines of code) of the vulnerable lines and the lines identified by the participant. Given the criticality of this issue, we dedicate a full section to it (&#x000a7;<xref rid="Sec4" ref-type="sec">3.1</xref>).</p></sec></sec><sec id="Sec10"><title>Compliance with ethical standards</title><p id="Par71">The students received a bonus point for the course for participating in the experiment. The ethical procedure was followed and it determined that a full ethical review was not necessary. In particular, this was determined because (i) upfront, opt-in consent was asked, (ii) no personal or sensitive information was involved, (iii) it did not pose potential risks to either participants or researchers, (iv) the confidentiality of the participants was guaranteed by collecting data by GDPR compliant tool and removing their details before processing the data for the analysis, (v) the incentives to participate were minimal, (vi) and the participants were minimally deceived and thoroughly debriefed afterward (they actually had full access to the anonymized data). There was no monetary compensation, and the participants received compensation in terms of a coursework bonus. Such value was minimal (less than 2% of the final grade), and the participants could deny the consent, and still obtain the participation bonus. The personal details were only collected to grant the coursework bonus.</p></sec></sec><sec id="Sec11"><title>Experimental objects</title><p id="Par72">The experimental objects consist of the slicing tool to generate the slice source codes and the dataset of the vulnerabilities selected.</p><sec id="Sec12"><title>Slicing algorithm</title><p id="Par73">In practice, the seed would need to be identified first and a wrong localization might change the result. To control for this factor, we provided the perfect seed lines to the slicing algorithm by a manual review of the diff between a vulnerable method and its security fixing commit as suggested in the literature (Dashevskyi et&#x000a0;al. <xref ref-type="bibr" rid="CR22">2018</xref>; Salimi and Kharrazi <xref ref-type="bibr" rid="CR62">2022</xref>; Bui et&#x000a0;al. <xref ref-type="bibr" rid="CR15">2024</xref>). In this way we can focus on studying whether the output of a method-level slicing algorithm, improves participants&#x02019; effectiveness in identifying vulnerabilities. The choice of the slicing algorithm may also influence the results: some algorithms generate larger but more accurate slices (Salimi and Kharrazi <xref ref-type="bibr" rid="CR62">2022</xref>), others, such as intra-procedural thin slicing, have less accurate but smaller slices (Sridharan et&#x000a0;al. <xref ref-type="bibr" rid="CR74">2007</xref>; Dashevskyi et&#x000a0;al. <xref ref-type="bibr" rid="CR22">2018</xref>). The former is more suitable for automated processing, the latter for human reading, and hence our choice.</p><p id="Par74">To generate the slices from the original source codes, we used the slicing tool implemented by Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>). Compared to the original slicing algorithm by Weiser (<xref ref-type="bibr" rid="CR87">1984</xref>) that requires the resulting slices to be executable, the adaption proposed by Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) does not have this requirement, they have deliberately sacrificed the precision in favor of scalability.</p><p id="Par75">The authors did not use a traditional program slicing&#x000a0;(Weiser <xref ref-type="bibr" rid="CR86">1981</xref>) for extracting vulnerable code as <italic>&#x02018;traditional slices often grow too large&#x02019;</italic>&#x000a0;(Sridharan et&#x000a0;al. <xref ref-type="bibr" rid="CR74">2007</xref>). Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>), Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) implemented a generalized intra-procedural version of <italic>thin slicing</italic> introduced by Sridharan et&#x000a0;al. (<xref ref-type="bibr" rid="CR74">2007</xref>), for finding relevant vulnerable source code statements with the SZZ approach adapted from &#x0015a;liwerski (<xref ref-type="bibr" rid="CR68">2005</xref>) for tracking the vulnerable code back to its introduction. The resulting slices are limited to intra-procedural boundaries since the analysis of the vulnerability fixes proposed in Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) suggests that security fixes are rather &#x02018;local&#x02019;. In their case, the lines modified during a vulnerability fix are <italic>seeds</italic>, and, similarly, to the study from Sridharan et&#x000a0;al. (<xref ref-type="bibr" rid="CR74">2007</xref>), a slice includes a set of <italic>producer statements</italic> for these seeds. A producer statement is an assignment of a value to a certain variable. To identify simple dependencies between statements they look for relevance relations between variables in them. They also include a set of <italic>explainer statements</italic> that are relevant to the <italic>seeds</italic>. An explainer statement can be a statement that represents the expressions in the condition branches under which a producer statement will be executed (control flow). Otherwise, an explainer statement can correspond to a method call that has a parameter to which a value flows from a producer statement (sink).</p><p id="Par76">An alternative would be to use JoanAudit&#x000a0;Thom&#x000e9; et&#x000a0;al. (<xref ref-type="bibr" rid="CR80">2017</xref>)&#x000a0;Thom&#x000e9; et&#x000a0;al. (<xref ref-type="bibr" rid="CR79">2018</xref>) which is a static analysis tool for auditing Web applications and Web services for common injection vulnerabilities. It also applies program slicing technique and generates an HTML report to guide security auditors audit the source code. The tool by itself works on entire projects and therefore produce a large report. Since our study focuses in understanding whether a slice helps the users&#x02019; task of identifying vulnerabilities in a single file we used the thin-slicing tool for building a slice from a seed proposed by Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) which is generalized intraprocedural version of thin slicing introduced by Sridharan et&#x000a0;al. (<xref ref-type="bibr" rid="CR74">2007</xref>), which improves over the notion of statement relevance of the original slicing by Weiser and avoid the collection of more accurate, but potentially very large slices as would be generated by Thom&#x000e9; et&#x000a0;al. (<xref ref-type="bibr" rid="CR80">2017</xref>); Salimi and Kharrazi (<xref ref-type="bibr" rid="CR62">2022</xref>)</p><p id="Par77">The Algorithm&#x000a0;1 from Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) is used for recursively finding a set of source code statements that are affected by the <italic>Seeds</italic> (a forward slice). Similarly the Algorithm&#x000a0;2 is used for recursively finding a set of source code statements that affect the <italic>Seeds</italic> (a backward slice).</p><p id="Par78">
<fig position="anchor" id="Fige"><label>Algorithm 1</label><caption><p>Forward Slices Computation</p></caption><graphic position="anchor" xlink:href="10664_2025_10636_Fige_HTML" id="MO8"/></fig>
</p><p id="Par79">
<fig position="anchor" id="Figf"><label>Algorithm 2</label><caption><p>Backward Slices Computation</p></caption><graphic position="anchor" xlink:href="10664_2025_10636_Figf_HTML" id="MO9"/></fig>
</p><p id="Par80">As a first step they start with the set of seed statements <italic>Seeds</italic> as the slicing criteria, where every criterion can be represented as a tuple <inline-formula id="IEq87"><alternatives><tex-math id="d33e2769">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\langle s, V\rangle $$\end{document}</tex-math><mml:math id="d33e2774"><mml:mrow><mml:mo stretchy="false">&#x027e8;</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="false">&#x027e9;</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq87.gif"/></alternatives></inline-formula> (similarly to Weiser&#x02019;s slicing criterion&#x000a0;Weiser <xref ref-type="bibr" rid="CR87">1984</xref>) where <italic>s</italic> is the seed statement, and <italic>V</italic> is the set of variables of interest in that statement: for each seed statement <italic>s</italic>, the set <italic>V</italic> consists of the variables which values are used in <italic>s</italic>.</p><p id="Par81">Then, for every seed statement <italic>s</italic>, they iteratively identify other statements that contain relevant variables that are dependent on (Algorithm&#x000a0;1) or influence (Algorithm&#x000a0;2) the set of relevant variables <italic>V</italic> in <italic>s</italic>. The final slice includes all statements in the method for which there is at least one variable that is relevant to the seeds and, thus, will contain a union of statements returned by Algorithm&#x000a0;1 and Algorithm&#x000a0;2 (<inline-formula id="IEq88"><alternatives><tex-math id="d33e2815">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Forward(Seed) \cup Backward(Seed)$$\end{document}</tex-math><mml:math id="d33e2820"><mml:mrow><mml:mi>F</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>w</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>d</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>S</mml:mi><mml:mi>e</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>&#x0222a;</mml:mo><mml:mi>B</mml:mi><mml:mi>a</mml:mi><mml:mi>c</mml:mi><mml:mi>k</mml:mi><mml:mi>w</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>d</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>S</mml:mi><mml:mi>e</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq88.gif"/></alternatives></inline-formula>).</p><p id="Par82">To identify the relevant statements for the slices the algorithms make use of the following constructions.</p><sec id="FPar17"><title>Producer statements</title><p id="Par83">&#x0201c;[...] statement <italic>s</italic> is a producer for statement <italic>t</italic> if <italic>s</italic> is part of a chain of assignments that computes and copies a value to <italic>t</italic>&#x0201d;&#x000a0;(Sridharan et&#x000a0;al. <xref ref-type="bibr" rid="CR74">2007</xref>). This is an assignment of a value to a certain variable: <inline-formula id="IEq89"><alternatives><tex-math id="d33e2881">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$t\in \text{ def }(s)$$\end{document}</tex-math><mml:math id="d33e2886"><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>def</mml:mtext><mml:mspace width="0.333333em"/><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq89.gif"/></alternatives></inline-formula>.</p></sec><sec id="FPar18"><title>Explainer Control flow statements</title><p id="Par84">the statements that represent the expressions in the condition branches under which a producer statement will be executed (this concept is taken from&#x000a0;Sridharan et&#x000a0;al. <xref ref-type="bibr" rid="CR74">2007</xref> as well). A statement <italic>s</italic> is control dependent on a conditional expression <italic>e</italic> if <italic>e</italic> can affect whether <italic>s</italic> is executed. A statement <italic>s</italic> is flow dependent on a statement <italic>t</italic> if it reads from some variable <italic>v</italic> that is defined or changed at <italic>t</italic>, or there exists a control flow path from <italic>t</italic> to <italic>s</italic> on which <italic>v</italic> is not re-defined.</p></sec><sec id="FPar19"><title>Explainer Sink statements</title><p id="Par85">represents a statement that corresponds to a method call that has a parameter to which a value flows from a producer statement. Therefore, a statement <italic>s</italic> is a relevant sink of the statement <italic>t</italic> if <italic>s</italic> is a method call and <italic>s</italic> is flow-dependent upon <italic>t</italic>. In symbols <inline-formula id="IEq90"><alternatives><tex-math id="d33e2962">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text {ref}\!\left( {s}\right) \cap Forward(t)\ne \emptyset $$\end{document}</tex-math><mml:math id="d33e2967"><mml:mrow><mml:mtext>ref</mml:mtext><mml:mspace width="-0.166667em"/><mml:mfenced close=")" open="("><mml:mi>s</mml:mi></mml:mfenced><mml:mo>&#x02229;</mml:mo><mml:mi>F</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>w</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>d</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>&#x02260;</mml:mo><mml:mi mathvariant="normal">&#x02205;</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq90.gif"/></alternatives></inline-formula> for forward slicing and similarly for backward slicing.</p><p id="Par86">Further explanations are provided in the paper&#x000a0;(Dashevskyi et&#x000a0;al. <xref ref-type="bibr" rid="CR22">2018</xref>).</p></sec></sec><sec id="Sec13"><title>Selection of vulnerability types</title><p id="Par87">As our study is a multi-year study that we performed for the first time in 2017, we relied on the OWASP top ten 2017<xref ref-type="fn" rid="Fn3">3</xref> to select the security vulnerabilities. To remain consistent through the years and not change the experiment setup, we used the same rank through the years.</p><p id="Par89">The type of vulnerabilities (and their corresponding CVEs) were selected based on several criteria: (i) simplicity, (ii) vulnerabilities due to lack of resources, and (iii) limit to vulnerabilities that can be identified by inspecting the program source files.</p><p id="Par90">For example, there are many security vulnerabilities not affected by intervention but rather due to a lack of development resources (e.g. <italic>A9: Using Components with Known Vulnerabilities</italic>, or <italic>A10: Insufficient Logging &#x00026; Monitoring</italic>). Others are not related to errors to be found in programs (e.g. <italic>A6: Security Misconfiguration</italic> for what concerns configuration files or <italic>A3: Sensitive Data Exposure</italic> where the data has not been encrypted but the program is otherwise perfectly &#x0201c;correct&#x0201d;). Other vulnerabilities are too complex for an experiment as they require specialized knowledge to understand the syntax, while conceptually they do not introduce a new type of vulnerability. For example <italic>A4: XML External Entities (XXE)</italic> and <italic>A8: Insecure Deserialization</italic> require already specialized skills from the developer in terms of XML processing or distributed data processing.</p></sec><sec id="Sec14"><title>Selection of concrete vulnerabilities</title><p id="Par91">For the experiment, we selected four CVEs (shown in Table 4&#x000a0;Dashevskyi et&#x000a0;al. <xref ref-type="bibr" rid="CR22">2018</xref>) for each vulnerability type we selected from OWASP top ten 2017: CVE-2008-2370 (Path Traversal), CVE-2009-0580 (Injection), CVE-2014-1904 (XSS), CVE-2012-2733 (DoS). The list of vulnerabilities and the vulnerable lines ground truth for the original files are reported in Table&#x000a0;<xref rid="Tab4" ref-type="table">4</xref>. We selected these vulnerabilities for simplicity as the lines affected are few, moreover, all the vulnerabilities are Apache Tomcat exploits, which is a popular technology and a known technology for the participants. Moreover, we decided to select the vulnerabilities from the same project because we wanted to avoid significant variations of coding styles and changes among the vulnerabilities, this increases the internal validity of the design. However, it poses some threats to the generalizability of the results. Information on the provided material can be found in the link to the replication package&#x000a0;(Aurora&#x000a0;Papotti and Fabio&#x000a0;Massacci <xref ref-type="bibr" rid="CR6">2023</xref>).</p><p id="Par92">We selected source codes coming from original repositories, therefore, we determined the vulnerable lines by inspecting the fixing commit of the developers in the project. According to the studies&#x000a0;(Nguyen et&#x000a0;al. <xref ref-type="bibr" rid="CR51">2016</xref>; Bao et&#x000a0;al. <xref ref-type="bibr" rid="CR10">2022</xref>) the lines changed or deleted by developers may be considered responsible for the vulnerability, these lines are called <italic>seeds</italic> in the algorithm of Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>). This is also in line with the assumption <italic>&#x0201c;EA2. Using Fix Locations as Root Cause Bug Diagnosis (aka &#x0201c;Fix Location&#x0201d;)&#x0201d;</italic> in Soremekun et&#x000a0;al. (<xref ref-type="bibr" rid="CR72">2023</xref>): fix locations are used as substitute fault locations to determine the ground truth.</p><p id="Par93">Hence, we used the selection algorithm proposed by Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>), and with the help of two security researchers with several years of experience, we reviewed the fix commit and identified the vulnerable lines, which are reported in Table&#x000a0;<xref rid="Tab4" ref-type="table">4</xref>. We chose this algorithm because it does not require the build of the entire project, also our main contribution is not the choice of the slicing algorithm as we already provide the perfect seed lines to it (Fig. <xref rid="Fig4" ref-type="fig">4</xref>).<table-wrap id="Tab4"><label>Table 4</label><caption><p>Vulnerable Lines Security Vulnerabilities Dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">File Name</th><th align="left">Vulnerable Lines</th></tr></thead><tbody><tr><td align="left">CVE-2008-2370</td><td align="left">ApplicationContext.java</td><td align="left">[368, 383...388, 432, 846, 853,</td></tr><tr><td align="left"/><td align="left"/><td align="left">854, 859, 860, 864]</td></tr><tr><td align="left">CVE-2009-0580</td><td align="left">MemoryRealm.java</td><td align="left">[144, 147, 151, 287, 290]</td></tr><tr><td align="left">CVE-2014-1904</td><td align="left">FormTag.java</td><td align="left">[441, 444, 450, 451]</td></tr><tr><td align="left">CVE-2012-2733</td><td align="left">InternalNioInputBuffer.java</td><td align="left">[459, 462, 463]</td></tr></tbody></table></table-wrap></p><p id="Par94">
<fig id="Fig4"><label>Fig. 4</label><caption><p>Number of vulnerabilities found by each participant for different values of <inline-formula id="IEq91"><alternatives><tex-math id="d33e3142">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e3147"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq91.gif"/></alternatives></inline-formula></p></caption><graphic xlink:href="10664_2025_10636_Fig4_HTML" id="MO10"/></fig>
</p></sec></sec><sec id="Sec15"><title>Results</title><p id="Par95">In this section, we report the results of our investigation. In Section&#x000a0;<xref rid="Sec16" ref-type="sec">5.1</xref> we describe our population, in particular the background (e.g. knowledge of java and vulnerability assessment), and we provide a validation whether our population is a good sample to answer our research questions. Section&#x000a0;<xref rid="Sec17" ref-type="sec">5.2</xref> focuses on answering RQ1, instead in the sections&#x000a0;<xref rid="Sec18" ref-type="sec">5.3</xref> and &#x000a0;<xref rid="Sec19" ref-type="sec">5.4</xref> we answer respectively to RQ2 and R3, reporting the results both for <inline-formula id="IEq92"><alternatives><tex-math id="d33e3169">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3174"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq92.gif"/></alternatives></inline-formula> and <inline-formula id="IEq93"><alternatives><tex-math id="d33e3182">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3187"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq93.gif"/></alternatives></inline-formula>. Moreover, when reporting these results, we decided to exclude the participants that declared to not have any experience with Java.</p><p id="Par96">As we observed, both for <inline-formula id="IEq94"><alternatives><tex-math id="d33e3196">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3201"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq94.gif"/></alternatives></inline-formula> and <inline-formula id="IEq95"><alternatives><tex-math id="d33e3208">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3213"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq95.gif"/></alternatives></inline-formula>, a large number of TPs equal zero (corresponding to cases in which the participants did not identify the vulnerability). Therefore, the choice of the combined test turned out to be appropriate. The statistical analysis was performed according to the choice of statistical tests explained in Section&#x000a0;<xref rid="Sec9" ref-type="sec">3.6</xref>.</p><sec id="Sec16"><title>Validation of participants data</title><p id="Par97">A total of 264 Computer Science master&#x02019;s students participated in the experiments which were collected across six years (from 2017 to 2023). Among them, 103 were enrolled in the course 1 from University 1, the others in the course 2 from University 2. As a population, this is consistent with several other studies&#x000a0;(Naiakshina et&#x000a0;al. <xref ref-type="bibr" rid="CR49">2017</xref>, <xref ref-type="bibr" rid="CR50">2018</xref>; Rong et&#x000a0;al. <xref ref-type="bibr" rid="CR59">2012</xref>; Chong et&#x000a0;al. <xref ref-type="bibr" rid="CR19">2021</xref>).</p><p id="Par98">To validate their experience we looked first at their Java expertise and security expertise as collected during the Background phase (see <xref rid="Sec8" ref-type="sec">3.5</xref>). The scale values went from <italic>&#x0201c;No experience with Java / Vulnerability Assessment&#x0201d;</italic> to <italic>&#x0201c;Strong experience with Java / Vulnerability Assessment through project performed outside University&#x0201d;</italic>. This information is missing for 42 students to an experimenter&#x02019;s error while collecting the data (data was optional).</p><p id="Par99">Both groups from either University have written several programs in Java in hands-on labs or during short internships. There&#x02019;s a slight difference in the Vulnerability Assessment&#x02019;s experience: students from University 1 have a stronger experience due to a mandatory course in their study plan on Security Testing.</p><sec id="FPar20"><title>Knowledge of Java</title><p id="Par100">Most of the participants from University 1 (42%) have written several programs in hands-on labs or during short internships. Some students (21%) have developed some significant projects, and others (21%) declared to have attended a course/tutorial. Finally, some students (15%) have attended only a couple of lectures. Several students from University 2 (42%) used Java as part of university projects and only 20% of the students reported having no experience. Some students (20%) said they developed several projects, and some (17%) developed Java projects outside the university context. As mentioned above, this data was missing for 42 participants (from University 1). As the population did not differ through the years we think that the reported participant background is very likely accurate despite the missing data points.</p></sec><sec id="FPar21"><title>Knowledge of Vulnerability Assessment</title><p id="Par101">Most of the students from University 1 have attended a course/tutorial on buffer overflow or software testing (48%), few have used vulnerability and network scanners (7%) during professional experiences, and some have used a fuzzer or vulnerability scanner in hands-on labs or during short internships (29%). Few students attended a course on hacking and security (16%). Most of the students from University 2 (49%) have no experience with vulnerability assessment; some performed vulnerability assessment (33%) as part of university projects. Few students (11%) performed vulnerability detection outside of university projects, or (7%) identified them for several projects.</p><p id="Par102">We investigated how many vulnerabilities (both for the cases <inline-formula id="IEq96"><alternatives><tex-math id="d33e3262">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3267"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq96.gif"/></alternatives></inline-formula> and <inline-formula id="IEq97"><alternatives><tex-math id="d33e3274">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3279"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq97.gif"/></alternatives></inline-formula>) each participant found. For <inline-formula id="IEq98"><alternatives><tex-math id="d33e3286">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3291"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq98.gif"/></alternatives></inline-formula>, 29 students (11% of the total number of students) did not detect any vulnerability, which corresponds to 58 data participants, vulnerability pair, instead, for <inline-formula id="IEq99"><alternatives><tex-math id="d33e3298">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3303"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq99.gif"/></alternatives></inline-formula> only 11 students ((4%) of the total number of students) identified zero vulnerabilities corresponding to 44 data participant, vulnerability pair. Therefore, we consider our population a good sample to answer our research questions because the vast majority of people find some vulnerabilities in the code.</p></sec></sec><sec id="Sec17"><title>RQ1. Choosing the right <inline-formula id="IEq100"><alternatives><tex-math id="d33e3313">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e3318"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq100.gif"/></alternatives></inline-formula></title><p id="Par103">In this section, we denote the number of pairs <italic>(participant, vulnerability scenario)</italic> for which zero vulnerable lines were found by <inline-formula id="IEq101"><alternatives><tex-math id="d33e3326">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP = 0)$$\end{document}</tex-math><mml:math id="d33e3331"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq101.gif"/></alternatives></inline-formula>, and for which some vulnerable lines were found by <inline-formula id="IEq102"><alternatives><tex-math id="d33e3344">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e3349"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq102.gif"/></alternatives></inline-formula></p><p id="Par104">Figure&#x000a0;<xref rid="Fig5" ref-type="fig">5</xref> shows how the TP mean across all vulnerabilities varies for different values of <inline-formula id="IEq103"><alternatives><tex-math id="d33e3366">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\delta }$$\end{document}</tex-math><mml:math id="d33e3371"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq103.gif"/></alternatives></inline-formula>-neighborhood from 1 to 9. We observe that values of <inline-formula id="IEq104"><alternatives><tex-math id="d33e3375">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta &#x0003e; 3$$\end{document}</tex-math><mml:math id="d33e3380"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq104.gif"/></alternatives></inline-formula> lead to a too large number of TPs, resulting in overoptimistic results. To answer RQ2(&#x000a7;&#x000a0;<xref rid="Sec18" ref-type="sec">5.3</xref>) and RQ3(&#x000a7;&#x000a0;<xref rid="Sec19" ref-type="sec">5.4</xref>) we decided to analyze the data for <inline-formula id="IEq105"><alternatives><tex-math id="d33e3394">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3399"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq105.gif"/></alternatives></inline-formula> because it represents the case in which the participants identify exactly the vulnerable lines, and for <inline-formula id="IEq106"><alternatives><tex-math id="d33e3406">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3411"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq106.gif"/></alternatives></inline-formula> as it corresponds to the case in which the participants identified the vulnerable area around the ground truth vulnerable lines. Moreover, as we mentioned in Section&#x000a0;<xref rid="Sec1" ref-type="sec">1</xref><inline-formula id="IEq107"><alternatives><tex-math id="d33e3420">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3425"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq107.gif"/></alternatives></inline-formula> is the same value used for the command git diff<xref ref-type="fn" rid="Fn4">4</xref>.<fig id="Fig5"><label>Fig. 5</label><caption><p>TP across all vulnerabilities grouped by file type. The figure shows on the y axis the mean of the number of TP lines found across all the pairs <italic>(participant, vulnerability scenario)</italic></p></caption><graphic xlink:href="10664_2025_10636_Fig5_HTML" id="MO11"/></fig></p></sec><sec id="Sec18"><title>RQ2. Slicing effectiveness</title><p id="Par106">Table&#x000a0;<xref rid="Tab5" ref-type="table">5</xref> shows the number of (participant, vulnerability scenario) pairs for which zero vulnerable lines were found, (denoted by <inline-formula id="IEq108"><alternatives><tex-math id="d33e3457">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP = 0)$$\end{document}</tex-math><mml:math id="d33e3462"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq108.gif"/></alternatives></inline-formula> and for which some vulnerable lines were found (denoted by <inline-formula id="IEq109"><alternatives><tex-math id="d33e3475">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e3480"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq109.gif"/></alternatives></inline-formula> for <inline-formula id="IEq110"><alternatives><tex-math id="d33e3493">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3498"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq110.gif"/></alternatives></inline-formula> and <inline-formula id="IEq111"><alternatives><tex-math id="d33e3505">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3510"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq111.gif"/></alternatives></inline-formula> for the original files treatment, and the sliced files treatment. In the following section, we first report the results obtained for <inline-formula id="IEq112"><alternatives><tex-math id="d33e3518">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3523"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq112.gif"/></alternatives></inline-formula>, and then for <inline-formula id="IEq113"><alternatives><tex-math id="d33e3530">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3535"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq113.gif"/></alternatives></inline-formula>.<table-wrap id="Tab5"><label>Table 5</label><caption><p>Number of <inline-formula id="IEq114"><alternatives><tex-math id="d33e3548">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP_{\delta }=0)$$\end{document}</tex-math><mml:math id="d33e3553"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq114.gif"/></alternatives></inline-formula> and <inline-formula id="IEq115"><alternatives><tex-math id="d33e3568">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP_{\delta }&#x0003e;0)$$\end{document}</tex-math><mml:math id="d33e3573"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq115.gif"/></alternatives></inline-formula> per vulnerability</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left" colspan="2">Original</th><th align="left" colspan="2">Slice</th></tr></thead><tbody><tr><td align="left" colspan="5"><inline-formula id="IEq116"><alternatives><tex-math id="d33e3605">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e3610"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq116.gif"/></alternatives></inline-formula></td></tr><tr><td align="left"/><td align="left"><inline-formula id="IEq117"><alternatives><tex-math id="d33e3620">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP = 0)$$\end{document}</tex-math><mml:math id="d33e3625"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq117.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq118"><alternatives><tex-math id="d33e3639">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e3644"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq118.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq119"><alternatives><tex-math id="d33e3658">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP = 0)$$\end{document}</tex-math><mml:math id="d33e3663"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq119.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq120"><alternatives><tex-math id="d33e3677">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e3682"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq120.gif"/></alternatives></inline-formula></td></tr><tr><td align="left">path</td><td align="left">85</td><td align="left">47</td><td align="left">36</td><td align="left">96</td></tr><tr><td align="left">user</td><td align="left">70</td><td align="left">63</td><td align="left">29</td><td align="left">102</td></tr><tr><td align="left">XSS</td><td align="left">89</td><td align="left">44</td><td align="left">61</td><td align="left">70</td></tr><tr><td align="left">DoS</td><td align="left">105</td><td align="left">25</td><td align="left">83</td><td align="left">51</td></tr><tr><td align="left">Total</td><td align="left">349</td><td align="left">179</td><td align="left">209</td><td align="left">319</td></tr><tr><td align="left" colspan="5"><inline-formula id="IEq121"><alternatives><tex-math id="d33e3752">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e3757"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq121.gif"/></alternatives></inline-formula></td></tr><tr><td align="left"/><td align="left"><inline-formula id="IEq122"><alternatives><tex-math id="d33e3767">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP = 0)$$\end{document}</tex-math><mml:math id="d33e3772"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq122.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq123"><alternatives><tex-math id="d33e3786">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e3791"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq123.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq124"><alternatives><tex-math id="d33e3805">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP = 0)$$\end{document}</tex-math><mml:math id="d33e3810"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq124.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq125"><alternatives><tex-math id="d33e3824">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e3829"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq125.gif"/></alternatives></inline-formula></td></tr><tr><td align="left">path</td><td align="left">82</td><td align="left">50</td><td align="left">12</td><td align="left">120</td></tr><tr><td align="left">user</td><td align="left">61</td><td align="left">72</td><td align="left">12</td><td align="left">119</td></tr><tr><td align="left">XSS</td><td align="left">62</td><td align="left">71</td><td align="left">44</td><td align="left">87</td></tr><tr><td align="left">DoS</td><td align="left">102</td><td align="left">28</td><td align="left">81</td><td align="left">53</td></tr><tr><td align="left">Total</td><td align="left">307</td><td align="left">221</td><td align="left">149</td><td align="left">379</td></tr></tbody></table><table-wrap-foot><p>For each vulnerability (the table&#x02019;s rows), we report in the second and third columns the numbers <inline-formula id="IEq126"><alternatives><tex-math id="d33e3900">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta =[0,3]}=0$$\end{document}</tex-math><mml:math id="d33e3905"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq126.gif"/></alternatives></inline-formula> and <inline-formula id="IEq127"><alternatives><tex-math id="d33e3924">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta =[0,3]}&#x0003e;0$$\end{document}</tex-math><mml:math id="d33e3929"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq127.gif"/></alternatives></inline-formula> for the original file. Instead, the third and fourth columns report the number <inline-formula id="IEq128"><alternatives><tex-math id="d33e3948">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta =[0,3]}=0$$\end{document}</tex-math><mml:math id="d33e3953"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq128.gif"/></alternatives></inline-formula> and <inline-formula id="IEq129"><alternatives><tex-math id="d33e3972">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta =[0,3]}&#x0003e;0$$\end{document}</tex-math><mml:math id="d33e3977"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq129.gif"/></alternatives></inline-formula> for the sliced file</p></table-wrap-foot></table-wrap></p><sec id="FPar22"><title>Identifying the exact vulnerable lines (<inline-formula id="IEq130"><alternatives><tex-math id="d33e3999">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf {\delta } = \textbf{0}$$\end{document}</tex-math><mml:math id="d33e4004"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn mathvariant="bold">0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq130.gif"/></alternatives></inline-formula>)</title><p id="Par107">. We first used a Chi-squared test on the overall findings (values from the total row from Table&#x000a0;<xref rid="Tab5" ref-type="table">5</xref>). We obtained <inline-formula id="IEq131"><alternatives><tex-math id="d33e4017">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\chi ^2_{\delta =0}(1056, df=1)= 73.42, p = 1.05 \cdot 10^{-17}$$\end{document}</tex-math><mml:math id="d33e4022"><mml:mrow><mml:msubsup><mml:mi>&#x003c7;</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mn>2</mml:mn></mml:msubsup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1056</mml:mn><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>73.42</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>1.05</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>17</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq131.gif"/></alternatives></inline-formula> with an odds ratio of 2.98x, so it is three times easier to find a vulnerability when inspecting a slice of the original code.</p><p id="Par108">Using the Agresti-Coull-Wilson rule for confidence interval&#x000a0;(Agresti and Coull <xref ref-type="bibr" rid="CR2">1998</xref>), the 95% C.I. of the probability of identifying the vulnerability if the original file is given to a participant is [0.29,&#x000a0;0.38] while the 95% C.I. of the probability of identifying it if a sliced file is supplied is [0.56,&#x000a0;0.65].</p><p id="Par109">We also performed two Chi-squared tests on the two different groups (original treatment vs slice treatment) to verify if there is a difference between the types of vulnerabilities. For the original files we obtained <inline-formula id="IEq132"><alternatives><tex-math id="d33e4063">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\chi ^2_{\delta =0}(528, df=3) = 23.46, p = 3.24 \cdot 10^{-05}$$\end{document}</tex-math><mml:math id="d33e4068"><mml:mrow><mml:msubsup><mml:mi>&#x003c7;</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mn>2</mml:mn></mml:msubsup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>528</mml:mn><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>23.46</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>3.24</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>05</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq132.gif"/></alternatives></inline-formula>. The odds ratios are not very different (all just above two): using the findings on the DoS vulnerability as a reference we found that only for user vulnerability the odds ratio is larger than three (3.8x).</p><p id="Par110">For the sliced files we obtained <inline-formula id="IEq133"><alternatives><tex-math id="d33e4104">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\chi ^2(528, df=3) = 55.71, p= 4.84 \cdot 10^{-12}$$\end{document}</tex-math><mml:math id="d33e4109"><mml:mrow><mml:msup><mml:mi>&#x003c7;</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>528</mml:mn><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>55.71</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>4.84</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>12</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq133.gif"/></alternatives></inline-formula>. The odds ratios are slightly different: using again the findings on DoS as a reference line we found that finding the user vulnerability is easier with an odds ratio of 5.7x.</p><p id="Par111">We further investigated these results by analyzing only the data <italic>(participant, vulnerability scenario)</italic> pairs with <inline-formula id="IEq134"><alternatives><tex-math id="d33e4144">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e4149"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq134.gif"/></alternatives></inline-formula>. We performed a test of normality on each vector for the two different treatments (i.e. one array for the original files, and one array for the slice files), Removing the data <italic>(participant, vulnerability scenario)</italic> pairs for which TP is equal zero. We obtained <inline-formula id="IEq135"><alternatives><tex-math id="d33e4165">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {N}(179) = 45.42, p = 1.37 \cdot 10^{-10}$$\end{document}</tex-math><mml:math id="d33e4170"><mml:mrow><mml:mi mathvariant="script">N</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>179</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>45.42</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>1.37</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq135.gif"/></alternatives></inline-formula> for the original files, and <inline-formula id="IEq136"><alternatives><tex-math id="d33e4194">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {N}(319) = 81.83, p = 1.70 \cdot 10^{-18}$$\end{document}</tex-math><mml:math id="d33e4199"><mml:mrow><mml:mi mathvariant="script">N</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>319</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>81.83</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>1.70</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>18</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq136.gif"/></alternatives></inline-formula> for the slice files. Finally, we used TOST to investigate the similarity of the two groups. We used the Mann-Whitney U test (<inline-formula id="IEq137"><alternatives><tex-math id="d33e4224">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$lowerbound = 0.8$$\end{document}</tex-math><mml:math id="d33e4229"><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>0.8</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq137.gif"/></alternatives></inline-formula>) to check the equivalence between the means of the two samples. As result we obtained <inline-formula id="IEq138"><alternatives><tex-math id="d33e4246">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$U_{lower\_bound} = 20931, p = 2.34 \cdot 10^{-07}, U_{upper\_bound} = 17397, p = 8.09 \cdot 10^{-14}$$\end{document}</tex-math><mml:math id="d33e4251"><mml:mrow><mml:msub><mml:mi>U</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>_</mml:mi><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>20931</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>2.34</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>07</mml:mn></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mi>U</mml:mi><mml:mrow><mml:mi>u</mml:mi><mml:mi>p</mml:mi><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>_</mml:mi><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>17397</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>8.09</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>14</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq138.gif"/></alternatives></inline-formula>. So the sliced and original files are statistically equivalent.</p><p id="Par112">From the results we obtained for <inline-formula id="IEq139"><alternatives><tex-math id="d33e4311">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e4316"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq139.gif"/></alternatives></inline-formula>, we can conclude that slicing is only useful for &#x02018;finding something&#x02019; as opposed to &#x02018;finding nothing&#x02019;. When we say <italic>&#x0201c;once participants find something there is no difference between inspecting the original file or a slice&#x0201d;</italic>, we consider the code inspection scenario in which a code reviewer has identified <italic>some</italic> of the vulnerable lines (<inline-formula id="IEq140"><alternatives><tex-math id="d33e4329">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP_{\delta } &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e4334"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq140.gif"/></alternatives></inline-formula>). Of course there might be cases in which the participants have identified just one line <inline-formula id="IEq141"><alternatives><tex-math id="d33e4349">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta } =1$$\end{document}</tex-math><mml:math id="d33e4354"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq141.gif"/></alternatives></inline-formula> or cases in which the participants have identified all vulnerable lines <inline-formula id="IEq142"><alternatives><tex-math id="d33e4365">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta } =GT$$\end{document}</tex-math><mml:math id="d33e4370"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mi>T</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq142.gif"/></alternatives></inline-formula>. A priori, before running the experiment, slicing could have helped also in this case and participants exposed to the slices could have found significantly more vulnerable lines than participants exposed to the full file. Once we consider only the participants that identified at least one vulnerable line (i.e. we exclude the participant data point with <inline-formula id="IEq143"><alternatives><tex-math id="d33e4381">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP_\delta =0)$$\end{document}</tex-math><mml:math id="d33e4386"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq143.gif"/></alternatives></inline-formula> for a specific vulnerability), there is a significant equivalence between the two groups of participants with <inline-formula id="IEq144"><alternatives><tex-math id="d33e4401">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP_{\delta } &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e4406"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq144.gif"/></alternatives></inline-formula> for the slice, and of participants with <inline-formula id="IEq145"><alternatives><tex-math id="d33e4421">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP_{\delta } &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e4426"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mi>&#x003b4;</mml:mi></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq145.gif"/></alternatives></inline-formula> for the full. Therefore, once a participant &#x02018;found something&#x02019; (at least one vulnerable line of that type), the number of additionally found lines (TPs) on a slice are statistically equivalent to the number of additionally found lines (TPs) on a full file. This scenario can be compared to the first step of fault localization which is identifying whether there is a vulnerability. The second scenario which is identifying all lines characterizing the vulnerability is the second phase of fault localization.</p></sec><sec id="FPar23"><title>Identifying the vulnerable area (<inline-formula id="IEq146"><alternatives><tex-math id="d33e4444">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf {\delta } = \textbf{3}$$\end{document}</tex-math><mml:math id="d33e4449"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn mathvariant="bold">3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq146.gif"/></alternatives></inline-formula></title><p id="Par113">. As for <inline-formula id="IEq147"><alternatives><tex-math id="d33e4458">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0 $$\end{document}</tex-math><mml:math id="d33e4463"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq147.gif"/></alternatives></inline-formula>, we first performed a Chi-squared test on the overall findings and we obtained <inline-formula id="IEq148"><alternatives><tex-math id="d33e4470">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\chi ^2_{\delta =3}(1056, df=1)= 95.14, p = 1.77 \cdot 10^{-22}$$\end{document}</tex-math><mml:math id="d33e4475"><mml:mrow><mml:msubsup><mml:mi>&#x003c7;</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow><mml:mn>2</mml:mn></mml:msubsup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1056</mml:mn><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>95.14</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>1.77</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>22</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq148.gif"/></alternatives></inline-formula> with an odds ration of 3.5x, so it is three and a half time easier to find a vulnerability when inspecting a slice of the original code.</p><p id="Par114">When using the Agresti-Coull-Wilson rule, the 95% C.I. of the probability of identifying the vulnerability if the original file is given to a participant is [0.38,&#x000a0;0.46] while the 95% C.I. probability of identifying it if a sliced file is supplied is [0.68,&#x000a0;0.75].</p><p id="Par115">The Chi-squared test&#x02019;s results for the original files is <inline-formula id="IEq149"><alternatives><tex-math id="d33e4513">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\chi ^2_{\delta =0}(528, df=3) = 38.41, p = 2.31 \cdot 10^{-08}$$\end{document}</tex-math><mml:math id="d33e4518"><mml:mrow><mml:msubsup><mml:mi>&#x003c7;</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mn>2</mml:mn></mml:msubsup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>528</mml:mn><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>38.41</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>2.31</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>08</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq149.gif"/></alternatives></inline-formula>. The odds ratios (using DoS vulnerability as baseline), are not different for the vulnerabilities user and XSS (just above four). Instead, we found that for the vulnerability path, there is an odds ratio of 2.2x.</p><p id="Par116">For the sliced files we obtained <inline-formula id="IEq150"><alternatives><tex-math id="d33e4554">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\chi ^2(528, df=3) = 117.91, p= 2.18 \cdot 10^{-25}$$\end{document}</tex-math><mml:math id="d33e4559"><mml:mrow><mml:msup><mml:mi>&#x003c7;</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>528</mml:mn><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>117.91</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>2.18</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>25</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq150.gif"/></alternatives></inline-formula>. Using again DoS as a reference line, the odds ratios for path and user are just above fifteen, instead for the vulnerability XSS the odds ratio is 3x.</p><p id="Par117">We then analyzed only the data for <inline-formula id="IEq151"><alternatives><tex-math id="d33e4591">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e4596"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq151.gif"/></alternatives></inline-formula>, and we performed a test of normality for the two different treatments (original vs. slice). We obtained <inline-formula id="IEq152"><alternatives><tex-math id="d33e4609">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {N}(221) = 48.45, p = 3.02 \cdot 10^{-11}$$\end{document}</tex-math><mml:math id="d33e4614"><mml:mrow><mml:mi mathvariant="script">N</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>221</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>48.45</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>3.02</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>11</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq152.gif"/></alternatives></inline-formula> for the original files, and <inline-formula id="IEq153"><alternatives><tex-math id="d33e4638">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {N}(379) = 133.15, p = 1.22 \cdot 10^{-29}$$\end{document}</tex-math><mml:math id="d33e4643"><mml:mrow><mml:mi mathvariant="script">N</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>379</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>133.15</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>1.22</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>29</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq153.gif"/></alternatives></inline-formula> for the slice files. Finally, we used TOST to investigate the similarity of the two groups. We used the Mann-Whitney U test (<inline-formula id="IEq154"><alternatives><tex-math id="d33e4667">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$lowerbound = 0.8$$\end{document}</tex-math><mml:math id="d33e4672"><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>0.8</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq154.gif"/></alternatives></inline-formula>) to check the equivalence between the means of the two samples. As result we obtained <inline-formula id="IEq155"><alternatives><tex-math id="d33e4689">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$U_{lower\_bound} = 50080, p = 0.99, U_{upper\_bound} = 17364, p = 6.77 \cdot 10^{-34}$$\end{document}</tex-math><mml:math id="d33e4694"><mml:mrow><mml:msub><mml:mi>U</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>_</mml:mi><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>50080</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>0.99</mml:mn><mml:mo>,</mml:mo><mml:msub><mml:mi>U</mml:mi><mml:mrow><mml:mi>u</mml:mi><mml:mi>p</mml:mi><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>_</mml:mi><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>17364</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>6.77</mml:mn><mml:mo>&#x000b7;</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>-</mml:mo><mml:mn>34</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq155.gif"/></alternatives></inline-formula>. Contrarily from the result we obtained with <inline-formula id="IEq156"><alternatives><tex-math id="d33e4747">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e4752"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq156.gif"/></alternatives></inline-formula>, the two groups are not statistically equivalent.</p><p id="Par118">With <inline-formula id="IEq157"><alternatives><tex-math id="d33e4761">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e4766"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq157.gif"/></alternatives></inline-formula>, as for <inline-formula id="IEq158"><alternatives><tex-math id="d33e4773">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e4778"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq158.gif"/></alternatives></inline-formula>, we observe that slicing is useful to &#x02018;find something&#x02019; as the Chi-squared test is statistically significant. However, contrarily from the observations for <inline-formula id="IEq159"><alternatives><tex-math id="d33e4785">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e4790"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq159.gif"/></alternatives></inline-formula>, when we consider the participants that found at least one vulnerability, for slicing treatments more vulnerabilities have been identified. This result aligns with our expectations as inspecting fewer lines of code should make it easier to identify a vulnerability.</p><p id="Par119">We further discuss these results in Section&#x000a0;<xref rid="Sec22" ref-type="sec">8</xref>.</p></sec></sec><sec id="Sec19"><title>RQ3. Slicing usefulness for each vulnerability type</title><p id="Par120">Table&#x000a0;<xref rid="Tab6" ref-type="table">6</xref> shows the mean value and the standard deviation (in the brackets) for the number of TP, FP, and FN that respect the condition <inline-formula id="IEq160"><alternatives><tex-math id="d33e4809">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP &#x0003e; 0$$\end{document}</tex-math><mml:math id="d33e4814"><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq160.gif"/></alternatives></inline-formula>. Instead, Table&#x000a0;<xref rid="Tab7" ref-type="table">7</xref> shows the result of the four TOST tests that we performed for each vulnerability type. We report and discuss these results first for <inline-formula id="IEq161"><alternatives><tex-math id="d33e4825">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e4830"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq161.gif"/></alternatives></inline-formula>, and then for <inline-formula id="IEq162"><alternatives><tex-math id="d33e4837">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e4842"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq162.gif"/></alternatives></inline-formula>.<table-wrap id="Tab6"><label>Table 6</label><caption><p>Table descriptive statistics of TP greater than zero</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left"><italic>n</italic></th><th align="left"><inline-formula id="IEq163"><alternatives><tex-math id="d33e4870">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP\mu (\sigma )$$\end{document}</tex-math><mml:math id="d33e4875"><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mi>&#x003bc;</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>&#x003c3;</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq163.gif"/></alternatives></inline-formula></th><th align="left"><inline-formula id="IEq164"><alternatives><tex-math id="d33e4888">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FP\mu (\sigma )$$\end{document}</tex-math><mml:math id="d33e4893"><mml:mrow><mml:mi>F</mml:mi><mml:mi>P</mml:mi><mml:mi>&#x003bc;</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>&#x003c3;</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq164.gif"/></alternatives></inline-formula></th><th align="left"><inline-formula id="IEq165"><alternatives><tex-math id="d33e4906">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$FN\mu (\sigma )$$\end{document}</tex-math><mml:math id="d33e4911"><mml:mrow><mml:mi>F</mml:mi><mml:mi>N</mml:mi><mml:mi>&#x003bc;</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>&#x003c3;</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq165.gif"/></alternatives></inline-formula></th></tr></thead><tbody><tr><td align="left" colspan="5"><inline-formula id="IEq166"><alternatives><tex-math id="d33e4926">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e4931"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq166.gif"/></alternatives></inline-formula></td></tr><tr><td align="left" colspan="5">Original</td></tr><tr><td align="left">path</td><td align="left">47</td><td align="left">2.17 (1.46)</td><td align="left">3.18 (2.79)</td><td align="left">12.23 (1.36)</td></tr><tr><td align="left">user</td><td align="left">63</td><td align="left">1.56 (0.87)</td><td align="left">2.47 (2.14)</td><td align="left">4.29 (0.91)</td></tr><tr><td align="left">XSS</td><td align="left">44</td><td align="left">2.02 (0.84)</td><td align="left">3.09 (3.61)</td><td align="left">3.36 (1.03)</td></tr><tr><td align="left">DoS</td><td align="left">25</td><td align="left">1.72 (0.66)</td><td align="left">3.00 (2.69)</td><td align="left">2.73 (0.62)</td></tr><tr><td align="left">TOT</td><td align="left">179</td><td align="left"/><td align="left"/><td align="left"/></tr><tr><td align="left" colspan="5">Slice</td></tr><tr><td align="left">path</td><td align="left">96</td><td align="left">2.11 (1.38)</td><td align="left">2.02 (1.21)</td><td align="left">11.46 (1.51)</td></tr><tr><td align="left">user</td><td align="left">102</td><td align="left">1.93 (0.98)</td><td align="left">1.71 (1.00)</td><td align="left">3.55 (1.11)</td></tr><tr><td align="left">XSS</td><td align="left">70</td><td align="left">1.99 (1.13)</td><td align="left">2.25 (1.54)</td><td align="left">3.24 (0.93)</td></tr><tr><td align="left">DoS</td><td align="left">51</td><td align="left">1.75 (0.65)</td><td align="left">2.46 (1.72)</td><td align="left">2.44 (0.81)</td></tr><tr><td align="left">TOT</td><td align="left">319</td><td align="left"/><td align="left"/><td align="left"/></tr><tr><td align="left" colspan="5"><inline-formula id="IEq167"><alternatives><tex-math id="d33e5051">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e5056"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq167.gif"/></alternatives></inline-formula></td></tr><tr><td align="left" colspan="5">Original</td></tr><tr><td align="left">path</td><td align="left">50</td><td align="left">3.20 (1.89)</td><td align="left">2.28 (3.42)</td><td align="left">0.003 (0.05)</td></tr><tr><td align="left">user</td><td align="left">72</td><td align="left">2.00 (0.99)</td><td align="left">1.38 (1.97)</td><td align="left">0.003 (0.05)</td></tr><tr><td align="left">XSS</td><td align="left">71</td><td align="left">2.66 (1.05)</td><td align="left">1.92 (4.03)</td><td align="left">0.002 (0.04)</td></tr><tr><td align="left">DoS</td><td align="left">28</td><td align="left">2.68 (0.54)</td><td align="left">1.71 (2.25)</td><td align="left">0.001 (0.03)</td></tr><tr><td align="left">TOT</td><td align="left">221</td><td align="left"/><td align="left"/><td align="left"/></tr><tr><td align="left" colspan="5">Slice</td></tr><tr><td align="left">path</td><td align="left">120</td><td align="left">4.61 (2.55)</td><td align="left">0.28 (0.57)</td><td align="left">0.005 (0.07)</td></tr><tr><td align="left">user</td><td align="left">119</td><td align="left">3.14 (1.29)</td><td align="left">0.41 (0.59)</td><td align="left">0.003 (0.05)</td></tr><tr><td align="left">XSS</td><td align="left">87</td><td align="left">3.44 (1.16)</td><td align="left">1.49 (1.56)</td><td align="left">0.002 (0.04)</td></tr><tr><td align="left">DoS</td><td align="left">53</td><td align="left">2.96 (0.19)</td><td align="left">1.42 (1.59)</td><td align="left">0.0002 (0.01)</td></tr><tr><td align="left">TOT</td><td align="left">379</td><td align="left"/><td align="left"/><td align="left"/></tr></tbody></table><table-wrap-foot><p>For each vulnerability (rows of the table) we report the mean value of TP, FP, and FN and the standard deviation value (in the brackets) for the original files. We report the same metrics for the sliced files. At the top of the table, we report the results for <inline-formula id="IEq168"><alternatives><tex-math id="d33e5176">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e5181"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq168.gif"/></alternatives></inline-formula>, and at the bottom for <inline-formula id="IEq169"><alternatives><tex-math id="d33e5188">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e5193"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq169.gif"/></alternatives></inline-formula>, and we consider only the <italic>n</italic> data point with <inline-formula id="IEq170"><alternatives><tex-math id="d33e5203">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\#(TP_{\delta =3} &#x0003e; 0)$$\end{document}</tex-math><mml:math id="d33e5208"><mml:mrow><mml:mo>#</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq170.gif"/></alternatives></inline-formula>, which are the second and fourth column of Table&#x000a0;<xref rid="Tab5" ref-type="table">5</xref>. While the original data was balanced, the number of files in which something was found by slicing is higher than the number of original files in which at least one vulnerability was found, as implied by RQ2</p></table-wrap-foot></table-wrap><table-wrap id="Tab7"><label>Table 7</label><caption><p>Equivalent test results for each vulnerability type</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left" colspan="2">Lower Bound</th><th align="left" colspan="2">Upper Bound</th><th align="left"/></tr><tr><th align="left"/><th align="left">statistic</th><th align="left">p-value</th><th align="left">statistic</th><th align="left">p-value</th><th align="left">equivalent</th></tr></thead><tbody><tr><td align="left" colspan="6"><inline-formula id="IEq171"><alternatives><tex-math id="d33e5265">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e5270"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq171.gif"/></alternatives></inline-formula></td></tr><tr><td align="left">path</td><td align="left">1597</td><td align="left">1.95e-03</td><td align="left">1553</td><td align="left">1.04e-03</td><td align="left">yes</td></tr><tr><td align="left">user</td><td align="left">2821</td><td align="left">0.08</td><td align="left">1294</td><td align="left">2.45e-11</td><td align="left">no</td></tr><tr><td align="left">XSS</td><td align="left">994</td><td align="left">6.14e-04</td><td align="left">1236</td><td align="left">0.03</td><td align="left">yes</td></tr><tr><td align="left">DoS</td><td align="left">392</td><td align="left">2.58e-03</td><td align="left">363</td><td align="left">8.79e-04</td><td align="left">yes</td></tr><tr><td align="left" colspan="6"><inline-formula id="IEq172"><alternatives><tex-math id="d33e5331">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e5336"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq172.gif"/></alternatives></inline-formula></td></tr><tr><td align="left">path</td><td align="left">3429</td><td align="left">0.92</td><td align="left">1436</td><td align="left">3.84e-08</td><td align="left">no</td></tr><tr><td align="left">user</td><td align="left">5555</td><td align="left">0.99</td><td align="left">1193</td><td align="left">1.29e-17</td><td align="left">no</td></tr><tr><td align="left">XSS</td><td align="left">3467</td><td align="left">0.91</td><td align="left">1014</td><td align="left">1.19e-14</td><td align="left">no</td></tr><tr><td align="left">DoS</td><td align="left">410</td><td align="left">6.14e-05</td><td align="left">40</td><td align="left">2.21e-16</td><td align="left">yes</td></tr></tbody></table><table-wrap-foot><p>For each vulnerability type, we performed a TOST test for equivalence comparing the original files with the sliced files by considering the number of <inline-formula id="IEq173"><alternatives><tex-math id="d33e5397">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta =3} &#x0003e;0$$\end{document}</tex-math><mml:math id="d33e5402"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq173.gif"/></alternatives></inline-formula>. For each vulnerability, we report the results of the Mann-Whitney U test for both lower bound and upper bound. We can observe that there is essentially no difference between the two sample groups for the vulnerabilities path, user, XSS. Instead, there is a difference for the vulnerability DoS which is only equivalent at the 10% confidence level for the lower bound</p></table-wrap-foot></table-wrap></p><sec id="FPar24"><title>Identifying the exact vulnerable lines (<inline-formula id="IEq174"><alternatives><tex-math id="d33e5418">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf {\delta } = \textbf{0}$$\end{document}</tex-math><mml:math id="d33e5423"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn mathvariant="bold">0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq174.gif"/></alternatives></inline-formula>)</title><p id="Par121">Table&#x000a0;<xref rid="Tab6" ref-type="table">6</xref> shows the mean and standard deviation of TPs, FPs, and FNs, for the two treatments (original files vs sliced files) considering <inline-formula id="IEq175"><alternatives><tex-math id="d33e5436">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP_{\delta = 0} &#x0003e; 0$$\end{document}</tex-math><mml:math id="d33e5441"><mml:mrow><mml:mi>T</mml:mi><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq175.gif"/></alternatives></inline-formula>. We notice that the TP&#x02019;s mean values from original and slice are close, and there is no increment in the values. This result is in line with the findings of RQ2 for <inline-formula id="IEq176"><alternatives><tex-math id="d33e5454">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e5459"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq176.gif"/></alternatives></inline-formula>. We further investigated the data by using TOST to verify whether slicing intervention is more effective in identifying certain types of vulnerabilities than others. As in Section&#x000a0;<xref rid="Sec18" ref-type="sec">5.3</xref> we used the Mann-Whithney U test (<inline-formula id="IEq177"><alternatives><tex-math id="d33e5469">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$lowerbound = 0.8$$\end{document}</tex-math><mml:math id="d33e5474"><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>0.8</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq177.gif"/></alternatives></inline-formula> ) to check the similarity between the samples. We report the results of the four TOST tests for each vulnerability type for <inline-formula id="IEq178"><alternatives><tex-math id="d33e5492">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e5497"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq178.gif"/></alternatives></inline-formula> in Table&#x000a0;<xref rid="Tab7" ref-type="table">7</xref>. We observe that for the vulnerabilities path, XSS, and DoS there is essentially no difference, except for the user vulnerability. This could be explained by the fact that the user vulnerability is characterized by a specific pattern, therefore, it is easier for the participants to identify it when inspecting fewer lines of code.</p></sec><sec id="FPar25"><title>Identifying the vulnerable area (<inline-formula id="IEq179"><alternatives><tex-math id="d33e5510">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf {\delta } = \textbf{3}$$\end{document}</tex-math><mml:math id="d33e5515"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn mathvariant="bold">3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq179.gif"/></alternatives></inline-formula>)</title><p id="Par122">. Contrarily from the findings with <inline-formula id="IEq180"><alternatives><tex-math id="d33e5525">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e5530"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq180.gif"/></alternatives></inline-formula>, in Table&#x000a0;<xref rid="Tab6" ref-type="table">6</xref> we can notice an increment of the TP&#x02019;s mean values for the slice treatment, therefore, it suggests slicing intervention is effective in identifying certain types of vulnerabilities. Again we used TOST for further investigation, and from the results reported in Table&#x000a0;<xref rid="Tab7" ref-type="table">7</xref> we can notice there is a difference for the vulnerabilities path, user, XSS. Instead, as for <inline-formula id="IEq181"><alternatives><tex-math id="d33e5543">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e5548"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq181.gif"/></alternatives></inline-formula>, there is no difference between the two groups for the DoS vulnerability. Despite this case which could be explained by the fact that normally a DoS vulnerability is not characterized by a specific pattern, therefore it is harder to identify it, the findings are in line with those from RQ2.</p></sec></sec></sec><sec id="Sec20"><title>Qualitative analysis of Participants Justifications</title><p id="Par123">We collected the participants&#x02019; motivations for the last two years we performed the experiment and in this section we report the result of a coding analysis of these justifications.</p><sec id="FPar26"><title>Codebook Development</title><p id="Par124">To analyze the motivation responses of the participants, we have adopted the <italic>applied thematic analysis</italic>&#x000a0;(Guest <xref ref-type="bibr" rid="CR34">2012</xref>), following the principle of emergence&#x000a0;(Gregory et&#x000a0;al. <xref ref-type="bibr" rid="CR33">2015</xref>), according to which the data gain their relevance in the analysis through systematic generation and iterative conceptualization of codes and concepts. Eventually, all justifications are analyzed and classified according to the categories (codes) so identified.</p><p id="Par125">During a first phase, the first and third author reviewed jointly a samples of justifications for each vulnerable scenario to identify a first set of emerging codes. Those were consolidated into a codding book which is reported in Table&#x000a0;<xref rid="Tab8" ref-type="table">8</xref>. It lists the codes identified in our study, also showing some examples.<table-wrap id="Tab8"><label>Table 8</label><caption><p>Codes used in the study</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Code</th><th align="left">Guide</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left">Methods,Variables</td><td align="left">Identifiers of the fragment of the program are mentioned (e.g. a specific variable name, a method name etc.)</td><td align="left">"uri", thus "mapuri", thus "child" path is not normalized. This could be exploited with a path traversal attack.</td></tr><tr><td align="left">Lines number</td><td align="left">A specific line number is mentioned</td><td align="left">normalize checks if "/../" appears at the beginning of the string but it doesn&#x02019;t check if "/../" appears in other parts of the string,which could lead to a path traversal. Line 76 normalize is called and line 95 returns object based on unsafe path</td></tr><tr><td align="left">Relevant keywords</td><td align="left">Some keyword related to the type of attack are mentioned.</td><td align="left">I think that these lines of code are vulnerable because the code takes as input a path and replies with an URL to that resource. It could be possible for an user to input a specific path that will be processed by the code incorrectly.</td></tr><tr><td align="left">Vulnerability text</td><td align="left">The text is specific to the vulnerability in question</td><td align="left">Line 144 - Injection: the function authenticate accepts user input without sanitization and uses it to access the data storage. Lines 186-191 and 195 - Injection: the function addUser doesn&#x02019;t sanitize the inputs and adds them to the storage</td></tr><tr><td align="left">Security text</td><td align="left">The text is security related but it is not the right answer</td><td align="left">65: Validated is not explicitly initialized as false before the check is performed, 62: if plaintext string ends up being compared, can&#x02019;t ignore case; 93: wild guess that the md refers to MD hashing algorithm which isn&#x02019;t secure</td></tr><tr><td align="left">Potential exploit</td><td align="left">The possible attack that could be carried out is mentioned</td><td align="left">Line 144 - Injection: the function authenticate accepts user input without sanitization and uses it to access the data storage. Lines 186-191 and 195 - Injection: the function addUser doesn&#x02019;t sanitize the inputs and adds them to the storage</td></tr><tr><td align="left">I don&#x02019;t find it</td><td align="left">The participant does not find the vulnerability</td><td align="left">Couldn&#x02019;t find any vulnerable lines</td></tr><tr><td align="left">Unclear answer</td><td align="left">The response is too vague and generic.</td><td align="left">Information Disclosure</td></tr></tbody></table></table-wrap></p><p id="Par126">Then the second author confirmed the coding book guidelines by further checking a smaller additional sample. Finally, the first author marked all justifications and an independent researcher, not author of this paper, checked the coded justifications. Additional conflicts where discussed by the first and third author. All coded justifications were eventually agreed. To avoid any confirmation bias the coders only looked at the information on the type of vulnerability (e.g. XSS vs Path Traversal) <italic>without knowing</italic> which lines were formally inserted in the response, and whether the lines proposed by the participant were actually vulnerable or not according to the ground truth.</p><p id="Par127">Several of the codes are self evident: <italic>Methods/Variables identifiers are mentioned</italic> or <italic>Lines number are mentioned</italic> mark justifications in which specific identifiers from the source codes or specific lines are mentioned in the justifications. It is possible that the lines mentioned by the participants in the justifications would be different from the lines they inserted in the formal response. This is immaterial to the idea behind the code that they have considered specific fragment of code in their reasoning (wrong or right as they might have been).</p><p id="Par128">The idea behind the code <italic>Relevant Keywords are mentioned</italic> has also been used in industry to identify vulnerability fixing commits when mining software repositories (Sabetta <xref ref-type="bibr" rid="CR60">2024</xref>). The key idea is that the justification mentions some specific keywords related to the type of attack that are not necessarily identifier mentioned in the source code. For user injection, we expect the presence of keywords about &#x02019;user controlled input&#x02019; and &#x02019;sanitization&#x02019;. For XSS, we expect some text mentioning &#x02019;HTTP&#x02019; or &#x02019;forms&#x02019; being manipulated. For path traversal, we should have some sentences mentioning paths and accessing directories. For DoS something about buffer overflow or not controlling loop variables or anything related to disrupt a service.</p><p id="Par129">
<table-wrap id="Tab9"><label>Table 9</label><caption><p>Co-occurences of codes across responses</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">% Total</th><th align="left">V.M.</th><th align="left">L.N.</th><th align="left">R.K.</th><th align="left">T.V.</th><th align="left">T.S.</th><th align="left">P.E.</th><th align="left">N.F.</th><th align="left">U.A.</th></tr></thead><tbody><tr><td align="left">V.M.</td><td align="left">34%</td><td align="left">100%</td><td align="left">41%</td><td align="left">
<bold>78%</bold>
</td><td align="left">
<bold>69%</bold>
</td><td align="left">27%</td><td align="left">12%</td><td align="left">0%</td><td align="left">2%</td></tr><tr><td align="left">L.N.</td><td align="left">39%</td><td align="left">37%</td><td align="left">100%</td><td align="left">
<bold>73%</bold>
</td><td align="left">
<bold>63%</bold>
</td><td align="left">31%</td><td align="left">10%</td><td align="left">0%</td><td align="left">4%</td></tr><tr><td align="left">R.K.</td><td align="left">72%</td><td align="left">38%</td><td align="left">40%</td><td align="left">100%</td><td align="left">
<bold>77%</bold>
</td><td align="left">20%</td><td align="left">10%</td><td align="left">0%</td><td align="left">1%</td></tr><tr><td align="left">T.V</td><td align="left">56%</td><td align="left">42%</td><td align="left">44%</td><td align="left">
<bold>98%</bold>
</td><td align="left">100%</td><td align="left">0%</td><td align="left">13%</td><td align="left">0%</td><td align="left">0%</td></tr><tr><td align="left">T.S.</td><td align="left">32%</td><td align="left">29%</td><td align="left">37%</td><td align="left">45%</td><td align="left">0%</td><td align="left">100%</td><td align="left">3%</td><td align="left">0%</td><td align="left">0%</td></tr><tr><td align="left">P.E.</td><td align="left">8%</td><td align="left">49%</td><td align="left">46%</td><td align="left">
<bold>91%</bold>
</td><td align="left">
<bold>86%</bold>
</td><td align="left">11%</td><td align="left">100%</td><td align="left">0%</td><td align="left">0%</td></tr><tr><td align="left">N.F.</td><td align="left">1.2%</td><td align="left">0%</td><td align="left">0%</td><td align="left">0%</td><td align="left">0%</td><td align="left">0%</td><td align="left">0%</td><td align="left">100%</td><td align="left">0%</td></tr><tr><td align="left">U.A.</td><td align="left">9%</td><td align="left">8%</td><td align="left">19%</td><td align="left">8%</td><td align="left">0%</td><td align="left">0%</td><td align="left">0%</td><td align="left">0%</td><td align="left">100%</td></tr></tbody></table><table-wrap-foot><p>The table shows the co-occurences of codes among the population, each row and column (2-9) represent a rule: variable and methods (V.M.), line numbers (L.N.), relevant keywords (R.K.), text related to the vulnerability (T.V.), text related to security (T.S.), potential exploit (P.E.), I don&#x02019;t find it (N.F.), and unclear answer (U.A.). The second column shows the percentage of total responses that check a specific rule. Each cell of the table is the percentage of responses for a specific co-occurence rules. For example, 49% of the responses that mention a possible exploit (P.E. row), also mention variables or methods identifiers (V.M. column)</p></table-wrap-foot></table-wrap>
</p><p id="Par130">The difference between the <italic>Text is related to the specific vulnerability</italic> and <italic>Text related to security</italic> is subtle but important. The former code marks justifications where the response is related to the vulnerability in question (e.g. the text is unmistakably about XSS and the vulnerability is about XSS), and it is clear that the participant has knowledge of the task is performing and the vulnerability is looking for. The participants might have still identified the wrong lines according to our ground truth but still had some very precise idea of what was doing. The latter code captures cases in which the participant has the clearly made a mistake as the explanation is not related to the specific vulnerability, but they are still mentioning a security issue, that is <italic>a plausiblevulnerability</italic> given the code fragment that they had, and considering that they could not actually run tests. For example a participant analyzing a DoS might spotted the absence of a finally block in try-catch Java fragment, even though that particular fragment did not correspond to a vulnerability. It shows that even though the participant got the wrong response, they answered at their best capabilities and in a sensible way. The <italic>Potential exploit is mentioned</italic> is used when the justification includes additional information on the malicious action that could lead to a possible attack specific for the vulnerability.</p><p id="Par131">The remaining two codes <italic>I don&#x02019;t find it</italic> and <italic>Unclear answer</italic> are used to distinguish the cases in which no code applies because the participant didn&#x02019;t find it from the case in which no code applies because the response is a gibberish explanation.</p></sec><sec id="FPar27"><title>Findings</title><p id="Par132">Table&#x000a0;<xref rid="Tab9" ref-type="table">9</xref> shows the co-occurences of codes among our population. We can observe that 78% of the participants mentioning variables and methods names, they also mention keywords. For example one participant when motivating the answer for the XSS vulnerability, wrote: <italic>The servletRelativeAction parameter is retrieved from user input (i.e., it&#x02019;s a request parameter) and is used to build a URL. For instance, if the user submits a malicious input like " &#x00026;gt; &#x00026;lt;script&#x00026;gt;alert(&#x02019;XSS&#x02019;) &#x00026;lt;/script&#x00026;gt;, it can cause a XSS vulnerability.</italic> When referring to variables and methods, 41% also mention line numbers, for example one participant wrote: <italic>109 - the variable pos in the while loop is obtained from the header which can be modified by the user and exploited; 187 - again an array is created using the pos variable; 228 - the same variable in 187 is used to modify another array here</italic>, referring to the path traversal vulnerability.</p><p id="Par133">In Table&#x000a0;<xref rid="Tab10" ref-type="table">10</xref> we show the number of responses categorized by the number of words used, and &#x0201c;quality code&#x0201d; checked (i.e. all codes excluding <italic>I don&#x02019;t find it</italic> and <italic>unclear answer</italic>). We can observe that a total 78% of explantions were 10 words or longer, and over 30% of the explanations were longer than 30 words. Over 80% of explanations had two or more quality codes (e.g. mentioned vulnerable lines and related security keywords) and more than 40% of the explanations had more than 3 quality codes.</p><p>
<table-wrap id="Tab10"><label>Table 10</label><caption><p>Quality indicators across responses</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">#Word</th><th align="left">#Responses</th><th align="left"/><th align="left">#Quality Code</th><th align="left">#Responses</th><th align="left"/></tr></thead><tbody><tr><td align="left">&#x0003c;10</td><td align="left">100</td><td align="left">22%</td><td align="left">No code</td><td align="left">35</td><td align="left">8%</td></tr><tr><td align="left">10-19</td><td align="left">121</td><td align="left">26%</td><td align="left">1 code</td><td align="left">49</td><td align="left">11%</td></tr><tr><td align="left">20-29</td><td align="left">95</td><td align="left">21%</td><td align="left">2 codes</td><td align="left">159</td><td align="left">35%</td></tr><tr><td align="left">30-39</td><td align="left">94</td><td align="left">21%</td><td align="left">3 codes</td><td align="left">145</td><td align="left">32%</td></tr><tr><td align="left">40+</td><td align="left">46</td><td align="left">10%</td><td align="left">4+ codes</td><td align="left">68</td><td align="left">14%</td></tr><tr><td align="left">Total</td><td align="left">456</td><td align="left"/><td align="left">Total</td><td align="left">456</td><td align="left"/></tr></tbody></table><table-wrap-foot><p>The first column lists a group of number of words intervals, and the second column is the total number of responses for each category #Words. The third column is the percentage among the total. The fourth column describes the category of &#x0201c;quality codes&#x0201d; found in a response. The quality code categories do not include the codes <italic>I don&#x02019;t find it</italic> and <italic>Unclear answer</italic>. In the fifth column we report the total of responses for each code quality, and in the last column the percentage among the total</p></table-wrap-foot></table-wrap>
</p></sec></sec><sec id="Sec21"><title>Perception analysis</title><p id="Par135">We performed a perception analysis to assess the quality of the results and to ensure that the experiment did not suffer from internal validity issues. In particular, we asked whether the participants (1) had a clear understanding of the experiment tasks, (2) had enough time to complete the experiment, and (3) the training was sufficient to carry out the tasks.</p><p id="Par136">To collect the variables <italic>Knowledge of Java</italic> and <italic>Knowledge of Security Vulnerabilities</italic> we used a scale from 1 to 4. The lowest value is &#x0201c;participant does not have any experience", followed by &#x0201c;participant has some knowledge from a university course", then &#x0201c;participant did few projects (or an internship)", up to the highest value which is &#x0201c;participant did several projects outside of university context".</p><p id="Par137">To collect perception information about the time, and the training material provided we used Likert scale from 1 (strongly disagree) to 5 (strongly agree)&#x000a0;(Joshi et&#x000a0;al. <xref ref-type="bibr" rid="CR40">2015</xref>). We have not relied on comparing participant background knowledge with the perception questions, instead we have investigated the impact of background knowledge on the results.</p><p id="Par138">Finally, we gave the participants the opportunity, through an open box question, to leave any comment or feedback they had in general about the experiment.</p><p id="Par139">We also collected general opinions on the experiment. Most of the participants agreed (61%) and strongly agreed (21%) that they understood the task they had to perform for the experiment. A few percent strongly disagreed (2%) and disagreed (4%) that the explanation of the experiment was clear. Few participants (12%) neither agreed nor disagreed. For example, a participant correctly detected the vulnerable lines for the CVE-2012-2733 providing a proper justification: <italic>&#x0201c;The loop is controlled by the length of the headers, can lead to a DoS&#x0201d;</italic>, which is in line with the answer given by another participant: <italic>&#x0201c;The loop for reading the header depends on the how many headers are there in user&#x02019;s data. A huge amount of headers can bring down the server&#x0201d;</italic>. Another participant reported the right justification after correctly detecting the vulnerable lines for the CVE-2008-2370 on the slice file: <italic>&#x0201c;normalize checks if "/../" appears at the beginning of the string but it doesn&#x02019;t check if "/../" appears in other parts of the string, which could lead to a path traversal. Line 76 normalize is called and line 95 returns an object based on an unsafe path&#x0201d;</italic></p><p id="Par140">The participants agreed (52%) and strongly agreed (24%) that they had enough time to perform the experiment. Only 1% strongly disagreed, and 4% disagreed that the time was not enough. Finally, 19% of the participants neither agreed nor disagreed.</p><p id="Par141">Some participants suggested that more detailed training could be beneficial, and more examples could be provided. While 28% either agreed or strongly agreed that the training was sufficient, 36% of the participants neither agreed nor disagreed. One of the participants declared that <italic>&#x0201c;I believe that more examples should have been given, since in the explanations we only got very low-level examples. They were not enough to get a good enough understanding of the type of vulnerabilities we would get.&#x0201d;</italic>; Another one suggested <italic>&#x0201c;Java docs could have been useful (for example trim, lastIndexOf...) just to be sure about the code behavior.&#x0201d;</italic>, which is inline with another participants opinion: <italic>&#x0201c;Running the code would be helpful. Otherwise access to java documentation.&#x0201d;</italic>.</p></sec><sec id="Sec22"><title>Discussions and implications</title><p id="Par142">In real-world scenarios, code inspectors often approach a codebase without the certainty that vulnerabilities are present, and the challenge lies in both detecting and precisely locating any potential weaknesses, and actually understanding what the problem is. The study&#x02019;s approach, where the existence of a vulnerability is a given, could have influenced participants&#x02019; behavior and perceptions, potentially making them more alert and focused solely on pinpointing its location. However, with our experiment we have been able to separate the problems in two parts, and focus only on the challenge of understanding where weakness locally is. We wanted to understand whether simplifying the code by removing the irrelevant lines would help code reviewers to identify vulnerabilities (assuming to have the perfect line identification algorithm).</p><p id="Par143">Another fundamental point that we wanted to investigate was also whether the influence of the participants&#x02019; background (e.g. knowledge of Java, knowledge of vulnerability detection) have a significant impact on the results that we obtained. We performed a Chi-squared test to check the correlation between the number of TPs and both the Java Knowledge and Vulnerability Detection. However, none of them resulted to be significant.</p><p id="Par144">Despite the results obtained with the Chi-squared test, we decided to exclude the participants without knowledge of Java, as we thought that it is a minimum requirement to understand the code and perform the tasks. Therefore, as we already mentioned in Section&#x000a0;<xref rid="Sec15" ref-type="sec">5</xref>, we analyzed the data and reported the results excluding the participants with no experience in Java. However, we also performed a general analysis including the students without experience in Java. The results do not statistically differ from the ones reported in Section&#x000a0;<xref rid="Sec18" ref-type="sec">5.3</xref> and Table&#x000a0;<xref rid="Tab6" ref-type="table">6</xref>. There is a small difference with the results from the ones of Table&#x000a0;<xref rid="Tab7" ref-type="table">7</xref>. When including people with no experience in Java, the two sample groups do not result equivalent for the vulnerability path. However, it is a small difference as the value for the lower bond is <inline-formula id="IEq182"><alternatives><tex-math id="d33e6137">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$MWU = 2531, p = 0.076$$\end{document}</tex-math><mml:math id="d33e6142"><mml:mrow><mml:mi>M</mml:mi><mml:mi>W</mml:mi><mml:mi>U</mml:mi><mml:mo>=</mml:mo><mml:mn>2531</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>0.076</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq182.gif"/></alternatives></inline-formula> and <inline-formula id="IEq183"><alternatives><tex-math id="d33e6156">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$MWU = 2081, p = 0.0013$$\end{document}</tex-math><mml:math id="d33e6161"><mml:mrow><mml:mi>M</mml:mi><mml:mi>W</mml:mi><mml:mi>U</mml:mi><mml:mo>=</mml:mo><mml:mn>2081</mml:mn><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>0.0013</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq183.gif"/></alternatives></inline-formula> for the upper bound.</p><p id="Par145">The findings in Section&#x000a0;<xref rid="Sec17" ref-type="sec">5.2</xref> suggest that summary indicators (such as Precision, Recall and Jaccard index) that are reliable when the numerator and denominator are large numbers derived from large samples, may be unreliable when dealing with smaller samples, which is commonly the case for vulnerability code inspections performed by human assessors. In such context, counting lines that identify a <italic>region</italic> as TPs may be more representative. In future experiments, researchers may opt for a base decision rule.</p><p id="Par146">From the results that we reported in Section&#x000a0;<xref rid="Sec18" ref-type="sec">5.3</xref> we observed different outcomes for <inline-formula id="IEq184"><alternatives><tex-math id="d33e6187">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e6192"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq184.gif"/></alternatives></inline-formula> and <inline-formula id="IEq185"><alternatives><tex-math id="d33e6199">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e6204"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq185.gif"/></alternatives></inline-formula>. In both cases, the Chi-squared test is statistical significant when comparing the overall TPs for the two sample groups (original vs slice). The results suggest that more vulnerabilities have been identified when inspecting the sliced files. As there is a large number of <inline-formula id="IEq186"><alternatives><tex-math id="d33e6211">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP = 0$$\end{document}</tex-math><mml:math id="d33e6216"><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq186.gif"/></alternatives></inline-formula>, we decided to make a comparison of the data, considering only the data points with <inline-formula id="IEq187"><alternatives><tex-math id="d33e6224">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$TP &#x0003e; 0$$\end{document}</tex-math><mml:math id="d33e6229"><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq187.gif"/></alternatives></inline-formula>, and in this case, the findings between <inline-formula id="IEq188"><alternatives><tex-math id="d33e6238">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e6243"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq188.gif"/></alternatives></inline-formula> and <inline-formula id="IEq189"><alternatives><tex-math id="d33e6250">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e6255"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq189.gif"/></alternatives></inline-formula> differ. In the first case (<inline-formula id="IEq190"><alternatives><tex-math id="d33e6262">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e6267"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq190.gif"/></alternatives></inline-formula>) which correspond to the scenario of matching the exact ground truth vulnerable lines, the TOST test results significant, therefore, the two sample groups (original vs slice) are equivalent. This result shows that it is easier to identify a vulnerability when inspecting a sliced file, however, when we analyze only the data points for which at least one vulnerability has been detected, slicing does not help to identify more vulnerabilities. A possible explanation is that for a human assessor matching the exact lines of the ground truth is harder. Instead, when we consider the scenario of identifying the vulnerable area (<inline-formula id="IEq191"><alternatives><tex-math id="d33e6274">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e6279"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq191.gif"/></alternatives></inline-formula>), the two sample groups do not result equivalent. This indicates that more vulnerabilities are detected when inspecting the sliced files, compared to the full files. This finding is expected, as it should be easier for a human assessor to identify the vulnerability when inspecting fewer lines of code.</p><p id="Par147">In Section&#x000a0;<xref rid="Sec19" ref-type="sec">5.4</xref> we analyzed the data to determine if there is any difference in the number of TPs among the different type of vulnerabilities between the two different treatments (original vs slice). We performed four TOST tests to compare the two different treatments (one for each vulnerability type), and for <inline-formula id="IEq192"><alternatives><tex-math id="d33e6291">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e6296"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq192.gif"/></alternatives></inline-formula> we observed that the two sample groups differ only for the user vulnerability. Instead, for the other vulnerabilities there is an equivalence. We think this result can be explained by the fact that the user vulnerability is easier to be identified, especially when inspecting few lines of code, as it characterized by a specific pattern. We performed the same statistical tests with <inline-formula id="IEq193"><alternatives><tex-math id="d33e6303">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e6308"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq193.gif"/></alternatives></inline-formula> and in this case we observed an equivalence between the two sample groups only for the DoS vulnerability. This is an expected result it seems obvious that is easier to identify the vulnerable area when inspecting less line of code, expect for the DoS vulnerability which it might be harder to be identified from the participants.</p></sec><sec id="Sec23"><title>Threats to validity</title><sec id="Sec24"><title>Population</title><sec id="FPar28"><title>Threat</title><p id="Par148">We acknowledge that the background and practices of the participants may impact the experiment&#x02019;s results. Still, several studies with promising results involving students have been performed&#x000a0; (Chong et&#x000a0;al. <xref ref-type="bibr" rid="CR19">2021</xref>; Naiakshina et&#x000a0;al. <xref ref-type="bibr" rid="CR49">2017</xref>, <xref ref-type="bibr" rid="CR50">2018</xref>; Rong et&#x000a0;al. <xref ref-type="bibr" rid="CR59">2012</xref>). Indeed, the study performed by Salman et&#x000a0;al. (<xref ref-type="bibr" rid="CR63">2015</xref>) compared the performances between students and professional to investigate how well students represent professionals as experimental subjects in SE research. When approaching something new for the first time, the performance is similar for both subject groups so results might not be transferable to people with significant code inspection expertise (but they might not need slicing anyhow). Tahaei and Vaniea (<xref ref-type="bibr" rid="CR77">2022</xref>) performed an experiment to explore the programming skills, privacy and security attitudes, and secure development self-efficacy of participants from a CS student mailing list and four crowdsourcing platforms (Appen, Clickworker, MTurk, and Prolific). The results show that 89% of CS students answered all programming skill questions correctly compared to 27% of crowdsourcing participants.</p></sec><sec id="FPar29"><title>Mitigation</title><p id="Par149">Due to our study population, the findings of this paper are limited to the educational context, and may not be representative of all real-world scenarios. Replicating the same study with experienced professionals could lead to different results due to their background, or experience. Therefore, more studies should be performed to get closer to reality.</p></sec></sec><sec id="Sec25"><title>Contamination by results from previous year</title><sec id="FPar30"><title>Threat</title><p id="Par150">Through the years that we performed the experiments we used the same vulnerabilities dataset. This choice might arise a contamination effect on participants of year N by the results from year N-1.</p></sec><sec id="FPar31"><title>Mitigation</title><p id="Par151">As the successful execution of the experiment does not affect the grade of the students to pass the course, the students are not incentivized in sharing the results between them. Moreover when the students were asked to analyze the data of their fellows, we made available their data, but also the data from the previous years. Also, we did not observe a significant improvement of the results through the years, therefore, we think that the participants are not affected by the results from the previous years.</p></sec></sec><sec id="Sec26"><title>Usage of checklists</title><sec id="FPar32"><title>Threat</title><p id="Par152">Checklists may lead to a fixation effect&#x000a0;(Sio et&#x000a0;al. <xref ref-type="bibr" rid="CR67">2015</xref>), inducing the participant to focus on specific patterns to identify vulnerabilities, with the risk of having negative results.</p></sec><sec id="FPar33"><title>Mitigation</title><p id="Par153">We have provided general guidelines and made sure these were clear to the participants to avoid such effects.</p></sec></sec><sec id="Sec27"><title>Realism</title><sec id="FPar34"><title>Threat</title><p id="Par154">The study&#x02019;s approach, where the existence of a vulnerability is a given, could have influenced participants&#x02019; behavior and perceptions, potentially making them more alert and focused solely on pinpointing its location.</p></sec><sec id="FPar35"><title>Mitigation</title><p id="Par155">As our goal was to investigate the effectiveness of method-level slicing in code review to identify vulnerabilities, we think that this threat does not influence the results obtained. Moreover, the student did not have prior knowledge that two files were a slice of code. They performed the experiment with the only purpose of identifying the vulnerabilities. This design has been chosen also to provide a fair evaluation in a class setting.</p></sec></sec><sec id="Sec28"><title>Generalizability of the results</title><sec id="FPar36"><title>Threat</title><p id="Par156">The restricted selection of the vulnerabilities may affect the generalizability of the results as we selected four specific types. In addition, we consider the risk of our results generalizing beyond the adopted slicing algorithm and code project.</p></sec><sec id="FPar37"><title>Mitigation</title><p id="Par157">To reduce the impact of this threat we selected the most common type of vulnerabilities at the time of study conceptualization. In the future more experiments with different vulnerabilities, slicing algorithms, and code projects can be performed to further analyze and improve the generalizability of the results. Moreover, we could try to add more example with multiple vulnerable location in the files to very if there is a difference when identifying the vulnerabilities.</p></sec></sec><sec id="Sec29"><title>Choice of slicing algorithm and defining the ground truth</title><sec id="FPar38"><title>Threat</title><p id="Par158">In our design we provide the &#x02018;perfect&#x02019; seed lines to the slicing algorithm, therefore, the participants do not have to create the sliced code, even though in a real world scenarios developers compute the slices by themselves by identifying the suspicious zones. We use thin slicing&#x000a0;(Sridharan et&#x000a0;al. <xref ref-type="bibr" rid="CR74">2007</xref>) as implemented by Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) to extend the SZZ algorithm for vulnerability analysis&#x000a0;(Bao et&#x000a0;al. <xref ref-type="bibr" rid="CR10">2022</xref>). However, one of the main challenges we faced was identifying the seed to produce the sliced files from the algorithm by Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) used as a screening test for vulnerable commits. Hence, the identification of the &#x02018;perfect&#x02019; seed might be a confounding factor.</p></sec><sec id="FPar39"><title>Mitigation</title><p id="Par159">Two security experts collaborated together to define the ground truth and define the seed. In addition, the security experts made sure the slicing algorithm preserved the vulnerable lines identified when producing the slices. A similar approach is used in Bui et&#x000a0;al. (<xref ref-type="bibr" rid="CR15">2024</xref>) to identify the vulnerable lines that has to be fixed. The approach used in Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>), given a known vulnerability that is already fixed, helps developers to know whether their code is affected and what they need to change accordingly. We chose this algorithm because it is lightweight and does not produce executable slices of code, which was not necessary to perform the experiment. Other tools like JoanAudit&#x000a0;(Thom&#x000e9; et&#x000a0;al. <xref ref-type="bibr" rid="CR80">2017</xref>) simply creates an HTML report to guide security auditors audit the source code.</p></sec></sec></sec><sec id="Sec30"><title>Conclusions and future work</title><p id="Par160">In this paper, we presented a controlled experiment to investigate whether slicing intervention supports developers in detecting security vulnerabilities during code inspection.</p><p id="Par161">Our population was composed of 264 master&#x02019;s computer science students who had to identify four different types of vulnerabilities that we selected among the OWASP Top 10 (path, user, XSS, DoS). With a balanced design, six different treatments that differed in the pair <italic>(Type of Vulnerability, Original/Sliced code)</italic> were presented to the participants. To create the sliced files we used the algorithm by Dashevskyi et&#x000a0;al. (<xref ref-type="bibr" rid="CR22">2018</xref>) used as a screening test for vulnerable commits. We also designed a methodology to define whether considering a participant&#x02019;s response correct by exploring different notions of neighborhood to define the correctly identified lines.</p><p id="Par162">By using a notion of <inline-formula id="IEq194"><alternatives><tex-math id="d33e6434">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta $$\end{document}</tex-math><mml:math id="d33e6439"><mml:mi>&#x003b4;</mml:mi></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq194.gif"/></alternatives></inline-formula> neighborhood we analyzed the data for <inline-formula id="IEq195"><alternatives><tex-math id="d33e6443">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e6448"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq195.gif"/></alternatives></inline-formula> which corresponds to the case of exactly identifying the vulnerable lines, and for <inline-formula id="IEq196"><alternatives><tex-math id="d33e6455">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e6460"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq196.gif"/></alternatives></inline-formula> which represents the case of identifying the vulnerable area on the context size of the command git&#x000a0; diff. In both cases we found that slicing helps in in &#x02018;finding something&#x02019; as opposed to &#x02018;finding nothing&#x02019;. However, for the case of <inline-formula id="IEq197"><alternatives><tex-math id="d33e6470">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 0$$\end{document}</tex-math><mml:math id="d33e6475"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq197.gif"/></alternatives></inline-formula>, we also found that once &#x02018;some&#x02019; correct lines have been identified, slicing makes no significant difference in the number of correctly identified fragments, expect for the user vulnerability. Instead, for the case of <inline-formula id="IEq198"><alternatives><tex-math id="d33e6483">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\delta = 3$$\end{document}</tex-math><mml:math id="d33e6488"><mml:mrow><mml:mi>&#x003b4;</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="10664_2025_10636_Article_IEq198.gif"/></alternatives></inline-formula> there is a difference as we would expect since analyzing less line of code should make easier to identify the vulnerability.</p><p id="Par163">More experiments with more vulnerability types and files are needed to determine whether this result is due to the different types or just our choices (e.g. our choice of using Java as the language of choice). We acknowledge this study is performed in a research context, and the study&#x02019;s population is master&#x02019;s student, however, we believe these results are promising, and open new exploring directions to further analyze the implications reported in this paper.</p><p id="Par164">Such experiment could be also replicated in other contexts as within companies with professional developers to investigate slicing intervention in another context rather than research, and make this study also applicable to the reality and generalize the results obtained. For example, practitioners could use git diff, but, since secure development practices vary in organizations, determining a good decision rule might require considering the security code review process at the company, and sound-boarding the rule with several domain experts, as suggested by Braz et&#x000a0;al. (<xref ref-type="bibr" rid="CR14">2022</xref>). In addition, since code reviewers tend to find more vulnerabilities compared to developers (in a study of Yu et&#x000a0;al. <xref ref-type="bibr" rid="CR92">2023</xref>, only 12% were found by developers and 88% by reviewers), in scenarios where developers are "finding nothing", slicing might help. Finally, some vulnerabilities might be easier to identify as they are characterized by a pattern, therefore in this case practitioners should not encounter too many difficulties when performing code review. For the other vulnerabilities that are harder to identify, companies should invest in slicing tools and training to support code reviewers and developers.</p></sec></body><back><fn-group><fn id="Fn1"><label>1</label><p id="Par6"><ext-link ext-link-type="uri" xlink:href="https://owasp.org/www-project-top-ten/2017/Top_10">https://owasp.org/www-project-top-ten/2017/Top_10</ext-link></p></fn><fn id="Fn2"><label>2</label><p id="Par55"><ext-link ext-link-type="uri" xlink:href="https://www.secura.com/services/people/training-courses/secure-programming-training">https://www.secura.com/services/people/training-courses/secure-programming-training</ext-link></p></fn><fn id="Fn3"><label>3</label><p id="Par88"><ext-link ext-link-type="uri" xlink:href="https://owasp.org/www-project-top-ten/2017/Top_10">https://owasp.org/www-project-top-ten/2017/Top_10</ext-link></p></fn><fn id="Fn4"><label>4</label><p id="Par105"><ext-link ext-link-type="uri" xlink:href="https://git-scm.com/docs/git-diff">https://git-scm.com/docs/git-diff</ext-link></p></fn><fn><p><bold>Publisher's Note</bold></p><p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></fn></fn-group><ack><title>Acknowledgements</title><p>This work has been partly supported by the European Union H2020 Program under the Grant 952647 (AssureMOSS) and the Horizon Europe Program under grant (Sec4AI4Sec) and the Dutch Research Council (NWO) under the grant NWA.1215.18.006 (Theseus) and grant KIC1.VE01.20.004 (HEWSTI). We would like to thank Stanislav Dashevskyi (Forescout) and Giorgio di Tizio (Airbus) for their insights and help in running some of the experiments, and Sarah van Gerwen for checking the coding for the qualitative analysis of the participants responses.</p></ack><notes notes-type="author-contribution"><title>Author Contributions</title><p><italic>Conceptualization:</italic> AP, FM; <italic>Methodology:</italic> FM, AP; <italic>Software:</italic> na; <italic>Validation:</italic> AP, FM, KT; <italic>Formal analysis:</italic> AP, FM; <italic>Investigation:</italic> AP; <italic>Resources:</italic> na; <italic>Data Curation:</italic> AP; <italic>Writing - Original Draft:</italic> AP, FM; <italic>Writing - Review &#x00026; Editing:</italic> AP, KT, FM; <italic>Visualization:</italic> AP; <italic>Supervision:</italic> KT, FM; <italic>Project administration:</italic> FM; <italic>Funding acquisition:</italic> FM;</p></notes><notes><title>Declarations</title><notes id="FPar40" notes-type="COI-statement"><title>Conflicts of Interest</title><p id="Par167">The authors declared that they have no conflict of interest.</p></notes></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><mixed-citation publication-type="other">Abreu R.,&#x000a0;Zoeteweij P., Van&#x000a0;Gemund AJ (2006) An evaluation of similarity coefficients for software fault localization. In: 2006 12th Pacific Rim International Symposium on Dependable Computing (PRDC&#x02019;06), pages 39&#x02013;46. IEEE</mixed-citation></ref><ref id="CR2"><citation-alternatives><element-citation id="ec-CR2" publication-type="journal"><person-group person-group-type="author"><name><surname>Agresti</surname><given-names>A</given-names></name><name><surname>Coull</surname><given-names>BA</given-names></name></person-group><article-title>Approximate is better than &#x0201c;exact&#x0201d; for interval estimation of binomial proportions</article-title><source>Am Stat</source><year>1998</year><volume>52</volume><issue>2</issue><fpage>119</fpage><lpage>126</lpage></element-citation><mixed-citation id="mc-CR2" publication-type="journal">Agresti A, Coull BA (1998) Approximate is better than &#x0201c;exact&#x02019;&#x02019; for interval estimation of binomial proportions. Am Stat 52(2):119&#x02013;126</mixed-citation></citation-alternatives></ref><ref id="CR3"><mixed-citation publication-type="other">Alaboudi A, LaToza TD (2020) Using hypotheses as a debugging aid. In: Proc. IEEE VL/HCC&#x02019;20, pages 1&#x02013;9. IEEE</mixed-citation></ref><ref id="CR4"><citation-alternatives><element-citation id="ec-CR4" publication-type="journal"><person-group person-group-type="author"><name><surname>Allodi</surname><given-names>L</given-names></name><name><surname>Cremonini</surname><given-names>M</given-names></name><name><surname>Massacci</surname><given-names>F</given-names></name><name><surname>Shim</surname><given-names>W</given-names></name></person-group><article-title>Measuring the accuracy of software vulnerability assessments: experiments with students and professionals</article-title><source>Empir Softw Eng</source><year>2020</year><volume>25</volume><issue>2</issue><fpage>1063</fpage><lpage>1094</lpage></element-citation><mixed-citation id="mc-CR4" publication-type="journal">Allodi L, Cremonini M, Massacci F, Shim W (2020) Measuring the accuracy of software vulnerability assessments: experiments with students and professionals. Empir Softw Eng 25(2):1063&#x02013;1094</mixed-citation></citation-alternatives></ref><ref id="CR5"><mixed-citation publication-type="other">Ang A,&#x000a0;Perez A,&#x000a0;Van&#x000a0;Deursen A,&#x000a0;Abreu R (2017) Revisiting the practical use of automated software fault localization techniques. In Proc. ISSREW&#x02019;17, pages 175&#x02013;182. IEEE</mixed-citation></ref><ref id="CR6"><mixed-citation publication-type="other">Aurora&#x000a0;Papotti KT, Fabio&#x000a0;Massacci (2023) Replication package for the experiments on the effects of program slicing for vulnerability detection during code inspection. The clickable <ext-link ext-link-type="uri" xlink:href="https://anonymous.4open.science/r/Finding-Vulnerabilities-Replication-Package-F1F2/">link</ext-link> can be used to access the dataset anonymously</mixed-citation></ref><ref id="CR7"><mixed-citation publication-type="other">Ayewah N,&#x000a0;Pugh W (2008) A report on a survey and study of static analysis users. In: Proc. DEFECTS&#x02019;08, pages 1&#x02013;5</mixed-citation></ref><ref id="CR8"><citation-alternatives><element-citation id="ec-CR8" publication-type="journal"><person-group person-group-type="author"><name><surname>Ayewah</surname><given-names>N</given-names></name><name><surname>Pugh</surname><given-names>W</given-names></name><name><surname>Hovemeyer</surname><given-names>D</given-names></name><name><surname>Morgenthaler</surname><given-names>JD</given-names></name><name><surname>Penix</surname><given-names>J</given-names></name></person-group><article-title>Using static analysis to find bugs</article-title><source>IEEE Softw</source><year>2008</year><volume>25</volume><issue>5</issue><fpage>22</fpage><lpage>29</lpage></element-citation><mixed-citation id="mc-CR8" publication-type="journal">Ayewah N, Pugh W, Hovemeyer D, Morgenthaler JD, Penix J (2008) Using static analysis to find bugs. IEEE Softw 25(5):22&#x02013;29</mixed-citation></citation-alternatives></ref><ref id="CR9"><mixed-citation publication-type="other">Bacchelli A,&#x000a0;Bird C (2013) Expectations, outcomes, and challenges of modern code review. In: Proc. IEEE/ACM ICSE&#x02019;13, pages 712&#x02013;721. IEEE</mixed-citation></ref><ref id="CR10"><mixed-citation publication-type="other">Bao L,&#x000a0;Xia X, Hassan AE,&#x000a0;Yang X (2022) V-szz: automatic identification of version ranges affected by cve vulnerabilities. In: Proc. IEEE/ACM ICSE&#x02019;22, pages 2352&#x02013;2364</mixed-citation></ref><ref id="CR11"><mixed-citation publication-type="other">Baum T,&#x000a0;Liskin O,&#x000a0;Niklas K,&#x000a0;Schneider K (2016) Factors influencing code review processes in industry. In: Proc. ACM SIGSOFT FSE&#x02019;16, pages 85&#x02013;96</mixed-citation></ref><ref id="CR12"><mixed-citation publication-type="other">Beller M,&#x000a0;Spruit N,&#x000a0;Spinellis D,&#x000a0;Zaidman A (2018) On the dichotomy of debugging behavior among programmers. In: Proc. IEEE/ACM ICSE&#x02019;18, pages 572&#x02013;583</mixed-citation></ref><ref id="CR13"><mixed-citation publication-type="other">B&#x000f6;hme M, Soremekun EO,&#x000a0;Chattopadhyay S,&#x000a0;Ugherughe E,&#x000a0;Zeller A (2017) Where is the bug and how is it fixed? an experiment with practitioners. In: Proc. ACM ESEC/FSE&#x02019;17, pages 117&#x02013;128</mixed-citation></ref><ref id="CR14"><mixed-citation publication-type="other">Braz L,&#x000a0;Aeberhard C,&#x000a0;&#x000c7;alikli G,&#x000a0;Bacchelli A (2022) Less is more: Supporting developers in vulnerability detection during code review. In: Proc. IEEE/ACM ICSE&#x02019;22, pages 1317&#x02013;1329</mixed-citation></ref><ref id="CR15"><citation-alternatives><element-citation id="ec-CR15" publication-type="journal"><person-group person-group-type="author"><name><surname>Bui</surname><given-names>Q-C</given-names></name><name><surname>Paramitha</surname><given-names>R</given-names></name><name><surname>Vu</surname><given-names>D-L</given-names></name><name><surname>Massacci</surname><given-names>F</given-names></name><name><surname>Scandariato</surname><given-names>R</given-names></name></person-group><article-title>Apr4vul: an empirical study of automatic program repair techniques on real-world java vulnerabilities</article-title><source>Empir Softw Eng</source><year>2024</year><volume>29</volume><issue>1</issue><fpage>18</fpage></element-citation><mixed-citation id="mc-CR15" publication-type="journal">Bui Q-C, Paramitha R, Vu D-L, Massacci F, Scandariato R (2024) Apr4vul: an empirical study of automatic program repair techniques on real-world java vulnerabilities. Empir Softw Eng 29(1):18</mixed-citation></citation-alternatives></ref><ref id="CR16"><mixed-citation publication-type="other">Cadariu M,&#x000a0;Bouwers E,&#x000a0;Visser J,&#x000a0;van Deursen A (2015) Tracking known security vulnerabilities in proprietary software systems. In: 2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER), pages 516&#x02013;519</mixed-citation></ref><ref id="CR17"><mixed-citation publication-type="other">Cambronero JP,&#x000a0;Shen J,&#x000a0;Cito J,&#x000a0;Glassman E,&#x000a0;Rinard M (2019) Characterizing developer use of automatically generated patches. In: Proc. IEEE VL/HCC&#x02019;19, pages 181&#x02013;185. IEEE</mixed-citation></ref><ref id="CR18"><citation-alternatives><element-citation id="ec-CR18" publication-type="journal"><person-group person-group-type="author"><name><surname>Chakraborty</surname><given-names>S</given-names></name><name><surname>Krishna</surname><given-names>R</given-names></name><name><surname>Ding</surname><given-names>Y</given-names></name><name><surname>Ray</surname><given-names>B</given-names></name></person-group><article-title>Deep learning based vulnerability detection: Are we there yet?</article-title><source>IEEE Trans Software Eng</source><year>2022</year><volume>48</volume><issue>9</issue><fpage>3280</fpage><lpage>3296</lpage></element-citation><mixed-citation id="mc-CR18" publication-type="journal">Chakraborty S, Krishna R, Ding Y, Ray B (2022) Deep learning based vulnerability detection: Are we there yet? IEEE Trans Software Eng 48(9):3280&#x02013;3296</mixed-citation></citation-alternatives></ref><ref id="CR19"><mixed-citation publication-type="other">Chong CY,&#x000a0;Thongtanunam P,&#x000a0;Tantithamthavorn C (2021) Assessing the students&#x02019; understanding and their mistakes in code review checklists: an experience report of 1,791 code review checklist questions from 394 students. In: Proc. IEEE/ACM ICSE-SEET&#x02019;21, pages 20&#x02013;29. IEEE</mixed-citation></ref><ref id="CR20"><mixed-citation publication-type="other">Cohen J (2010) Modern code review. Making Software: What Really Works, and Why We Believe It, pages 329&#x02013;336, 2010</mixed-citation></ref><ref id="CR21"><citation-alternatives><element-citation id="ec-CR21" publication-type="journal"><person-group person-group-type="author"><name><surname>Crum</surname><given-names>WR</given-names></name><name><surname>Camara</surname><given-names>O</given-names></name><name><surname>Hill</surname><given-names>DL</given-names></name></person-group><article-title>Generalized overlap measures for evaluation and validation in medical image analysis</article-title><source>IEEE Trans Med Imaging</source><year>2006</year><volume>25</volume><issue>11</issue><fpage>1451</fpage><lpage>1461</lpage><pub-id pub-id-type="pmid">17117774</pub-id>
</element-citation><mixed-citation id="mc-CR21" publication-type="journal">Crum WR, Camara O, Hill DL (2006) Generalized overlap measures for evaluation and validation in medical image analysis. IEEE Trans Med Imaging 25(11):1451&#x02013;1461<pub-id pub-id-type="pmid">17117774</pub-id>
</mixed-citation></citation-alternatives></ref><ref id="CR22"><citation-alternatives><element-citation id="ec-CR22" publication-type="journal"><person-group person-group-type="author"><name><surname>Dashevskyi</surname><given-names>S</given-names></name><name><surname>Brucker</surname><given-names>AD</given-names></name><name><surname>Massacci</surname><given-names>F</given-names></name></person-group><article-title>A screening test for disclosed vulnerabilities in foss components</article-title><source>IEEE Trans Software Eng</source><year>2018</year><volume>45</volume><issue>10</issue><fpage>945</fpage><lpage>966</lpage></element-citation><mixed-citation id="mc-CR22" publication-type="journal">Dashevskyi S, Brucker AD, Massacci F (2018) A screening test for disclosed vulnerabilities in foss components. IEEE Trans Software Eng 45(10):945&#x02013;966</mixed-citation></citation-alternatives></ref><ref id="CR23"><mixed-citation publication-type="other">Di&#x000a0;Penta M, Stirewalt RK,&#x000a0;Kraemer E (2007) Designing your next empirical study on program comprehension. In: Proc. ICPC&#x02019;07, pages 281&#x02013;285. IEEEx</mixed-citation></ref><ref id="CR24"><citation-alternatives><element-citation id="ec-CR24" publication-type="journal"><person-group person-group-type="author"><name><surname>Dunsmore</surname><given-names>A</given-names></name><name><surname>Roper</surname><given-names>M</given-names></name></person-group><article-title>A comparative evaluation of program comprehension measures</article-title><source>The Journal of Systems and Software</source><year>2000</year><volume>52</volume><issue>3</issue><fpage>121</fpage><lpage>129</lpage></element-citation><mixed-citation id="mc-CR24" publication-type="journal">Dunsmore A, Roper M (2000) A comparative evaluation of program comprehension measures. The Journal of Systems and Software 52(3):121&#x02013;129</mixed-citation></citation-alternatives></ref><ref id="CR25"><mixed-citation publication-type="other">Edmundson A,&#x000a0;Holtkamp B,&#x000a0;Rivera E,&#x000a0;Finifter M,&#x000a0;Mettler A,&#x000a0;Wagner D (2013) An empirical study on the effectiveness of security code review. In: Proc. ESSoS&#x02019;13, pages 197&#x02013;212. Springer</mixed-citation></ref><ref id="CR26"><mixed-citation publication-type="other">Feigenspan J,&#x000a0;Apel S,&#x000a0;Liebig J,&#x000a0;Kastner C (2011) Exploring software measures to assess program comprehension. In: Proc. ESEM&#x02019;11, pages 127&#x02013;136. IEEE</mixed-citation></ref><ref id="CR27"><mixed-citation publication-type="other">Food and Drug Administration (2001) Guidance for industry: Statistical approaches to establishing bioequivalence</mixed-citation></ref><ref id="CR28"><mixed-citation publication-type="other">Fry ZP,&#x000a0;Landau B,&#x000a0;Weimer W (2012) A human study of patch maintainability. In: Proc. ACM SIGSOFT ISSTA&#x02019;12, pages 177&#x02013;187, 2012</mixed-citation></ref><ref id="CR29"><mixed-citation publication-type="other">Fu M,&#x000a0;Tantithamthavorn C (2022) Linevul: A transformer-based line-level vulnerability prediction. In: Proceedings of the 19th International Conference on Mining Software Repositories, pages 608&#x02013;620x</mixed-citation></ref><ref id="CR30"><mixed-citation publication-type="other">Gon&#x000e7;alves PW,&#x000a0;Fregnan E,&#x000a0;Baum T,&#x000a0;Schneider K,&#x000a0;Bacchelli A (2020) Do explicit review strategies improve code review performance? In: Proc. IEEE/ACM MSR&#x02019;20, pages 606&#x02013;610</mixed-citation></ref><ref id="CR31"><mixed-citation publication-type="other">Gramatica MD,&#x000a0;Labunets K,&#x000a0;Massacci F,&#x000a0;Paci F,&#x000a0;Tedeschi A (2015) The role of catalogues of threats and security controls in security risk assessment: an empirical study with atm professionals. In: Proc. REFSQ&#x02019;15, pages 98&#x02013;114. Springer</mixed-citation></ref><ref id="CR32"><citation-alternatives><element-citation id="ec-CR32" publication-type="journal"><person-group person-group-type="author"><name><surname>Green</surname><given-names>M</given-names></name><name><surname>Smith</surname><given-names>M</given-names></name></person-group><article-title>Developers are not the enemy!: The need for usable security apis</article-title><source>IEEE Security &#x00026; Privacy</source><year>2016</year><volume>14</volume><issue>5</issue><fpage>40</fpage><lpage>46</lpage></element-citation><mixed-citation id="mc-CR32" publication-type="journal">Green M, Smith M (2016) Developers are not the enemy!: The need for usable security apis. IEEE Security &#x00026; Privacy 14(5):40&#x02013;46</mixed-citation></citation-alternatives></ref><ref id="CR33"><citation-alternatives><element-citation id="ec-CR33" publication-type="journal"><person-group person-group-type="author"><name><surname>Gregory</surname><given-names>RW</given-names></name><name><surname>Keil</surname><given-names>M</given-names></name><name><surname>Muntermann</surname><given-names>J</given-names></name><name><surname>M&#x000e4;hring</surname><given-names>M</given-names></name></person-group><article-title>Paradoxes and the nature of ambidexterity in it transformation programs</article-title><source>Inf Syst Res</source><year>2015</year><volume>26</volume><issue>1</issue><fpage>57</fpage><lpage>80</lpage></element-citation><mixed-citation id="mc-CR33" publication-type="journal">Gregory RW, Keil M, Muntermann J, M&#x000e4;hring M (2015) Paradoxes and the nature of ambidexterity in it transformation programs. Inf Syst Res 26(1):57&#x02013;80</mixed-citation></citation-alternatives></ref><ref id="CR34"><mixed-citation publication-type="other">Guest G (2012) Applied thematic analysis, 2012</mixed-citation></ref><ref id="CR35"><mixed-citation publication-type="other">M.&#x000a0;Harman and R.&#x000a0;Hierons. An overview of program slicing. <italic>software focus</italic>, 2(3):85&#x02013;92, 2001</mixed-citation></ref><ref id="CR36"><mixed-citation publication-type="other">Hin D,&#x000a0;Kan A,&#x000a0;Chen H, Babar MA (2022) Linevd: Statement-level vulnerability detection using graph neural networks. In: Proceedings of the 19th International Conference on Mining Software Repositories, pages 596&#x02013;607</mixed-citation></ref><ref id="CR37"><mixed-citation publication-type="other">Hirsch T,&#x000a0;Hofer B (2021) What we can learn from how programmers debug their code. In: Proc. SER &#x00026;IP&#x02019;21, pages 37&#x02013;40. IEEE</mixed-citation></ref><ref id="CR38"><mixed-citation publication-type="other">Jaber T,&#x000a0;Abdallah M,&#x000a0;Al-thunibat A (2020) A proposed code inspection model using program slicing technique. In: 2020 IEEE 5th International Conference on Computing Communication and Automation (ICCCA), pages 275&#x02013;279. IEEE</mixed-citation></ref><ref id="CR39"><mixed-citation publication-type="other">Jones JA, Harrold MJ (2005) Empirical evaluation of the tarantula automatic fault-localization technique. In: Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering, pages 273&#x02013;282</mixed-citation></ref><ref id="CR40"><citation-alternatives><element-citation id="ec-CR40" publication-type="journal"><person-group person-group-type="author"><name><surname>Joshi</surname><given-names>A</given-names></name><name><surname>Kale</surname><given-names>S</given-names></name><name><surname>Chandel</surname><given-names>S</given-names></name><name><surname>Pal</surname><given-names>DK</given-names></name></person-group><article-title>Likert scale: Explored and explained</article-title><source>British journal of applied science &#x00026; technology</source><year>2015</year><volume>7</volume><issue>4</issue><fpage>396</fpage><lpage>403</lpage></element-citation><mixed-citation id="mc-CR40" publication-type="journal">Joshi A, Kale S, Chandel S, Pal DK (2015) Likert scale: Explored and explained. British journal of applied science &#x00026; technology 7(4):396&#x02013;403</mixed-citation></citation-alternatives></ref><ref id="CR41"><citation-alternatives><element-citation id="ec-CR41" publication-type="journal"><person-group person-group-type="author"><name><surname>Kollanus</surname><given-names>S</given-names></name><name><surname>Koskinen</surname><given-names>J</given-names></name></person-group><article-title>Survey of software inspection research</article-title><source>The Open Software Engineering Journal</source><year>2009</year><volume>3</volume><issue>1</issue><fpage>15</fpage><lpage>34</lpage></element-citation><mixed-citation id="mc-CR41" publication-type="journal">Kollanus S, Koskinen J (2009) Survey of software inspection research. The Open Software Engineering Journal 3(1):15&#x02013;34</mixed-citation></citation-alternatives></ref><ref id="CR42"><citation-alternatives><element-citation id="ec-CR42" publication-type="journal"><person-group person-group-type="author"><name><surname>Lachenbruch</surname><given-names>PA</given-names></name></person-group><article-title>Analysis of data with excess zeros</article-title><source>Stat Methods Med Res</source><year>2002</year><volume>11</volume><issue>4</issue><fpage>297</fpage><lpage>302</lpage><pub-id pub-id-type="pmid">12197297</pub-id>
</element-citation><mixed-citation id="mc-CR42" publication-type="journal">Lachenbruch PA (2002) Analysis of data with excess zeros. Stat Methods Med Res 11(4):297&#x02013;302<pub-id pub-id-type="pmid">12197297</pub-id>
</mixed-citation></citation-alternatives></ref><ref id="CR43"><mixed-citation publication-type="other">Li X,&#x000a0;Li W,&#x000a0;Zhang Y,&#x000a0;Zhang L (2019) Deepfl: Integrating multiple fault diagnosis dimensions for deep fault localization. In: Proceedings of the 28th ACM SIGSOFT international symposium on software testing and analysis, pages 169&#x02013;180</mixed-citation></ref><ref id="CR44"><mixed-citation publication-type="other">Li X,&#x000a0;Zhang L (2017) Transforming programs and tests in tandem for fault localization. Proceedings of the ACM on Programming Languages 1(OOPSLA):1&#x02013;30</mixed-citation></ref><ref id="CR45"><mixed-citation publication-type="other">Li Y,&#x000a0;Wang S,&#x000a0;Nguyen T (2021) Fault localization with code coverage representation learning. In: 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE), pages 661&#x02013;673. IEEE</mixed-citation></ref><ref id="CR46"><citation-alternatives><element-citation id="ec-CR46" publication-type="journal"><person-group person-group-type="author"><name><surname>Massacci</surname><given-names>F</given-names></name><name><surname>Papotti</surname><given-names>A</given-names></name><name><surname>Paramitha</surname><given-names>R</given-names></name></person-group><article-title>Addressing combinatorial experiments and scarcity of subjects by provably orthogonal and crossover experimental designs</article-title><source>J Syst Softw</source><year>2024</year><volume>211</volume><fpage>111990</fpage></element-citation><mixed-citation id="mc-CR46" publication-type="journal">Massacci F, Papotti A, Paramitha R (2024) Addressing combinatorial experiments and scarcity of subjects by provably orthogonal and crossover experimental designs. J Syst Softw 211:111990</mixed-citation></citation-alternatives></ref><ref id="CR47"><mixed-citation publication-type="other">Meng X&#x000a0;Wang, X,&#x000a0;Zhang H,&#x000a0;Sun H,&#x000a0;Liu X (2022) Improving fault localization and program repair with deep semantic features and transferred knowledge. In: Proceedings of the 44th International Conference on Software Engineering, pages 1169&#x02013;1180</mixed-citation></ref><ref id="CR48"><citation-alternatives><element-citation id="ec-CR48" publication-type="journal"><person-group person-group-type="author"><name><surname>Meyners</surname><given-names>M</given-names></name></person-group><article-title>Equivalence tests-a review</article-title><source>Food Qual Prefer</source><year>2012</year><volume>26</volume><issue>2</issue><fpage>231</fpage><lpage>245</lpage></element-citation><mixed-citation id="mc-CR48" publication-type="journal">Meyners M (2012) Equivalence tests-a review. Food Qual Prefer 26(2):231&#x02013;245</mixed-citation></citation-alternatives></ref><ref id="CR49"><mixed-citation publication-type="other">Naiakshina A,&#x000a0;Danilova A,&#x000a0;Tiefenau C,&#x000a0;Herzog M,&#x000a0;Dechand S,&#x000a0;Smith M (2017) Why do developers get password storage wrong? a qualitative usability study. In: Proc. ACM SIGSAC CCS&#x02019;17, pages 311&#x02013;328</mixed-citation></ref><ref id="CR50"><mixed-citation publication-type="other">Naiakshina A,&#x000a0;Danilova A,&#x000a0;Tiefenau C,&#x000a0;Smith M (2018) Deception task design in developer password studies: Exploring a student sample. In: Proc. USENIX SOUPS&#x02019;18, pages 297&#x02013;313</mixed-citation></ref><ref id="CR51"><citation-alternatives><element-citation id="ec-CR51" publication-type="journal"><person-group person-group-type="author"><name><surname>Nguyen</surname><given-names>VH</given-names></name><name><surname>Dashevskyi</surname><given-names>S</given-names></name><name><surname>Massacci</surname><given-names>F</given-names></name></person-group><article-title>An automatic method for assessing the versions affected by a vulnerability</article-title><source>Empir Softw Eng</source><year>2016</year><volume>21</volume><fpage>2268</fpage><lpage>2297</lpage></element-citation><mixed-citation id="mc-CR51" publication-type="journal">Nguyen VH, Dashevskyi S, Massacci F (2016) An automatic method for assessing the versions affected by a vulnerability. Empir Softw Eng 21:2268&#x02013;2297</mixed-citation></citation-alternatives></ref><ref id="CR52"><citation-alternatives><element-citation id="ec-CR52" publication-type="journal"><person-group person-group-type="author"><name><surname>Pashchenko</surname><given-names>I</given-names></name><name><surname>Plate</surname><given-names>H</given-names></name><name><surname>Ponta</surname><given-names>SE</given-names></name><name><surname>Sabetta</surname><given-names>A</given-names></name><name><surname>Massacci</surname><given-names>F</given-names></name></person-group><article-title>Vuln4real: A methodology for counting actually vulnerable dependencies</article-title><source>IEEE Trans Software Eng</source><year>2022</year><volume>48</volume><issue>5</issue><fpage>1592</fpage><lpage>1609</lpage></element-citation><mixed-citation id="mc-CR52" publication-type="journal">Pashchenko I, Plate H, Ponta SE, Sabetta A, Massacci F (2022) Vuln4real: A methodology for counting actually vulnerable dependencies. IEEE Trans Software Eng 48(5):1592&#x02013;1609</mixed-citation></citation-alternatives></ref><ref id="CR53"><mixed-citation publication-type="other">Pieczul O,&#x000a0;Foley S, Zurko ME (2017) Developer-centered security and the symmetry of ignorance. In: Proc. NSPW&#x02019;17, pages 46&#x02013;56, 2017</mixed-citation></ref><ref id="CR54"><mixed-citation publication-type="other">Rajlich V, Cowan GS (1997) Towards standard for experiments in program comprehension. In: Proc. IWPC&#x02019;97, pages 160&#x02013;161. IEEE</mixed-citation></ref><ref id="CR55"><mixed-citation publication-type="other">Rajlich V,&#x000a0;Doran J, Gudla RT (1994) Layered explanations of software: A methodology for program comprehension. In: Proc. WPC&#x02019;94, pages 46&#x02013;52. IEEE, 1994</mixed-citation></ref><ref id="CR56"><mixed-citation publication-type="other">Reis S,&#x000a0;Abreu R,&#x000a0;d&#x02019;Amorim M (2019) Demystifying the combination of dynamic slicing and spectrum-based fault localization. In: IJCAI, pages 4760&#x02013;4766</mixed-citation></ref><ref id="CR57"><mixed-citation publication-type="other">Rigby PC,&#x000a0;Bird C (2013) Convergent contemporary software peer review practices. In: Proc. ACM ESEC/FSE&#x02019;13, pages 202&#x02013;212</mixed-citation></ref><ref id="CR58"><citation-alternatives><element-citation id="ec-CR58" publication-type="journal"><person-group person-group-type="author"><name><surname>Rigby</surname><given-names>PC</given-names></name><name><surname>German</surname><given-names>DM</given-names></name><name><surname>Cowen</surname><given-names>L</given-names></name><name><surname>Storey</surname><given-names>M-A</given-names></name></person-group><article-title>Peer review on open-source software projects: Parameters, statistical models, and theory</article-title><source>ACM Transactions on Software Engineering and Methodology (TOSEM)</source><year>2014</year><volume>23</volume><issue>4</issue><fpage>1</fpage><lpage>33</lpage></element-citation><mixed-citation id="mc-CR58" publication-type="journal">Rigby PC, German DM, Cowen L, Storey M-A (2014) Peer review on open-source software projects: Parameters, statistical models, and theory. ACM Transactions on Software Engineering and Methodology (TOSEM) 23(4):1&#x02013;33</mixed-citation></citation-alternatives></ref><ref id="CR59"><mixed-citation publication-type="other">Rong G,&#x000a0;Li J,&#x000a0;Xie M,&#x000a0;Zheng T (2012) The effect of checklist in code review for inexperienced students: An empirical study. In: Proc. IEEE CSEET&#x02019;12, pages 120&#x02013;124. IEEE</mixed-citation></ref><ref id="CR60"><citation-alternatives><element-citation id="ec-CR60" publication-type="journal"><person-group person-group-type="author"><name><surname>Sabetta</surname><given-names>AEA</given-names></name></person-group><article-title>Known vulnerabilities of open source projects: Where are the fixes?</article-title><source>IEEE Security &#x00026; Privacy</source><year>2024</year><volume>22</volume><issue>2</issue><fpage>49</fpage><lpage>59</lpage></element-citation><mixed-citation id="mc-CR60" publication-type="journal">Sabetta AEA (2024) Known vulnerabilities of open source projects: Where are the fixes? IEEE Security &#x00026; Privacy 22(2):49&#x02013;59</mixed-citation></citation-alternatives></ref><ref id="CR61"><mixed-citation publication-type="other">Sadowski C,&#x000a0;S&#x000f6;derberg E,&#x000a0;Church L,&#x000a0;Sipko M,&#x000a0;Bacchelli A (2018) Modern code review: a case study at Google. In: Proc. IEEE/ACM ICSE-SEIP&#x02019;18, pages 181&#x02013;190</mixed-citation></ref><ref id="CR62"><citation-alternatives><element-citation id="ec-CR62" publication-type="journal"><person-group person-group-type="author"><name><surname>Salimi</surname><given-names>S</given-names></name><name><surname>Kharrazi</surname><given-names>M</given-names></name></person-group><article-title>Vulslicer: Vulnerability detection through code slicing</article-title><source>J Syst Softw</source><year>2022</year><volume>193</volume><fpage>111450</fpage></element-citation><mixed-citation id="mc-CR62" publication-type="journal">Salimi S, Kharrazi M (2022) Vulslicer: Vulnerability detection through code slicing. J Syst Softw 193:111450</mixed-citation></citation-alternatives></ref><ref id="CR63"><mixed-citation publication-type="other">Salman I, Misirli AT,&#x000a0;Juristo N (2015) Are students representatives of professionals in software engineering experiments? In: Proc. IEEE/ACM ICSE&#x02019;15, volume&#x000a0;1, pages 666&#x02013;676. IEEE</mixed-citation></ref><ref id="CR64"><citation-alternatives><element-citation id="ec-CR64" publication-type="journal"><person-group person-group-type="author"><name><surname>Scandariato</surname><given-names>R</given-names></name><name><surname>Wuyts</surname><given-names>K</given-names></name><name><surname>Joosen</surname><given-names>W</given-names></name></person-group><article-title>A descriptive study of microsoft&#x02019;s threat modeling technique</article-title><source>Requirements Eng</source><year>2015</year><volume>20</volume><issue>2</issue><fpage>163</fpage><lpage>180</lpage></element-citation><mixed-citation id="mc-CR64" publication-type="journal">Scandariato R, Wuyts K, Joosen W (2015) A descriptive study of microsoft&#x02019;s threat modeling technique. Requirements Eng 20(2):163&#x02013;180</mixed-citation></citation-alternatives></ref><ref id="CR65"><citation-alternatives><element-citation id="ec-CR65" publication-type="journal"><person-group person-group-type="author"><name><surname>Schuirmann</surname><given-names>D</given-names></name></person-group><article-title>On hypothesis-testing to determine if the mean of a normal-distribution is contained in a known interval</article-title><source>Biometrics</source><year>1981</year><volume>37</volume><issue>3</issue><fpage>617</fpage><lpage>617</lpage></element-citation><mixed-citation id="mc-CR65" publication-type="journal">Schuirmann D (1981) On hypothesis-testing to determine if the mean of a normal-distribution is contained in a known interval. Biometrics 37(3):617&#x02013;617</mixed-citation></citation-alternatives></ref><ref id="CR66"><citation-alternatives><element-citation id="ec-CR66" publication-type="journal"><person-group person-group-type="author"><name><surname>Siegmund</surname><given-names>J</given-names></name><name><surname>Schumann</surname><given-names>J</given-names></name></person-group><article-title>Confounding parameters on program comprehension: a literature survey</article-title><source>Empir Softw Eng</source><year>2015</year><volume>20</volume><issue>4</issue><fpage>1159</fpage><lpage>1192</lpage></element-citation><mixed-citation id="mc-CR66" publication-type="journal">Siegmund J, Schumann J (2015) Confounding parameters on program comprehension: a literature survey. Empir Softw Eng 20(4):1159&#x02013;1192</mixed-citation></citation-alternatives></ref><ref id="CR67"><citation-alternatives><element-citation id="ec-CR67" publication-type="journal"><person-group person-group-type="author"><name><surname>Sio</surname><given-names>UN</given-names></name><name><surname>Kotovsky</surname><given-names>K</given-names></name><name><surname>Cagan</surname><given-names>J</given-names></name></person-group><article-title>Fixation or inspiration? a meta-analytic review of the role of examples on design processes</article-title><source>Des Stud</source><year>2015</year><volume>39</volume><fpage>70</fpage><lpage>99</lpage></element-citation><mixed-citation id="mc-CR67" publication-type="journal">Sio UN, Kotovsky K, Cagan J (2015) Fixation or inspiration? a meta-analytic review of the role of examples on design processes. Des Stud 39:70&#x02013;99</mixed-citation></citation-alternatives></ref><ref id="CR68"><citation-alternatives><element-citation id="ec-CR68" publication-type="journal"><person-group person-group-type="author"><name><surname>&#x0015a;liwerski</surname><given-names>J</given-names></name><name><surname>Zimmermann</surname><given-names>T</given-names></name><name><surname>Zeller</surname><given-names>A</given-names></name></person-group><article-title>When do changes induce fixes?</article-title><source>ACM sigsoft software engineering notes</source><year>2005</year><volume>30</volume><issue>4</issue><fpage>1</fpage><lpage>5</lpage></element-citation><mixed-citation id="mc-CR68" publication-type="journal">&#x0015a;liwerski J, Zimmermann T, Zeller A (2005) When do changes induce fixes? ACM sigsoft software engineering notes 30(4):1&#x02013;5</mixed-citation></citation-alternatives></ref><ref id="CR69"><mixed-citation publication-type="other">Smith J,&#x000a0;Johnson B,&#x000a0;Murphy-Hill E,&#x000a0;Chu B, Lipford HR (2015) Questions developers ask while diagnosing potential security vulnerabilities with static analysis. In: Proc. ACM ESEC/FSE&#x02019;15, pages 248&#x02013;259</mixed-citation></ref><ref id="CR70"><citation-alternatives><element-citation id="ec-CR70" publication-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>J</given-names></name><name><surname>Johnson</surname><given-names>B</given-names></name><name><surname>Murphy-Hill</surname><given-names>E</given-names></name><name><surname>Chu</surname><given-names>B</given-names></name><name><surname>Lipford</surname><given-names>HR</given-names></name></person-group><article-title>How developers diagnose potential security vulnerabilities with a static analysis tool</article-title><source>IEEE Trans Software Eng</source><year>2018</year><volume>45</volume><issue>9</issue><fpage>877</fpage><lpage>897</lpage></element-citation><mixed-citation id="mc-CR70" publication-type="journal">Smith J, Johnson B, Murphy-Hill E, Chu B, Lipford HR (2018) How developers diagnose potential security vulnerabilities with a static analysis tool. IEEE Trans Software Eng 45(9):877&#x02013;897</mixed-citation></citation-alternatives></ref><ref id="CR71"><mixed-citation publication-type="other">Sohn J,&#x000a0;Yoo S (2017) Fluccs: Using code and change metrics to improve fault localization. In: Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis, pages 273&#x02013;283</mixed-citation></ref><ref id="CR72"><mixed-citation publication-type="other">Soremekun E,&#x000a0;Kirschner L,&#x000a0;B&#x000f6;hme M,&#x000a0;Papadakis M (2023) Evaluating the impact of experimental assumptions in automated fault localization. In: 2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE), pages 159&#x02013;171. IEEE</mixed-citation></ref><ref id="CR73"><citation-alternatives><element-citation id="ec-CR73" publication-type="journal"><person-group person-group-type="author"><name><surname>Soremekun</surname><given-names>E</given-names></name><name><surname>Kirschner</surname><given-names>L</given-names></name><name><surname>B&#x000f6;hme</surname><given-names>M</given-names></name><name><surname>Zeller</surname><given-names>A</given-names></name></person-group><article-title>Locating faults with program slicing: an empirical analysis</article-title><source>Empir Softw Eng</source><year>2021</year><volume>26</volume><issue>3</issue><fpage>1</fpage><lpage>45</lpage></element-citation><mixed-citation id="mc-CR73" publication-type="journal">Soremekun E, Kirschner L, B&#x000f6;hme M, Zeller A (2021) Locating faults with program slicing: an empirical analysis. Empir Softw Eng 26(3):1&#x02013;45</mixed-citation></citation-alternatives></ref><ref id="CR74"><mixed-citation publication-type="other">Sridharan M, Fink SJ,&#x000a0;Bodik R (2007) Thin slicing. In <italic>Proceedings of the 28th ACM SIGPLAN conference on programming language design and implementation</italic>, pages 112&#x02013;122</mixed-citation></ref><ref id="CR75"><mixed-citation publication-type="other">Sul&#x000ed;r M (2019) Toward a benchmark repository for software maintenance tool evaluations with humans. In: Proc. SPLASH&#x02019;19, pages 7&#x02013;8</mixed-citation></ref><ref id="CR76"><mixed-citation publication-type="other">Tahaei M,&#x000a0;Vaniea K (2019) A survey on developer-centred security. In: Proc. EuroS &#x00026;PW&#x02019;19, pages 129&#x02013;138. IEEE, 2019</mixed-citation></ref><ref id="CR77"><mixed-citation publication-type="other">Tahaei M,&#x000a0;Vaniea K (2022) Recruiting participants with programming skills: A comparison of four crowdsourcing platforms and a cs student mailing list. In: Proceedings of the 2022 CHI Conference on Human Factors in Computing Systems, CHI &#x02019;22</mixed-citation></ref><ref id="CR78"><mixed-citation publication-type="other">Tao Y,&#x000a0;Kim J,&#x000a0;Kim S,&#x000a0;Xu C (2014) Automatically generated patches as debugging aids: a human study. In: Proc. ACM SIGSOFT FSE&#x02019;14, pages 64&#x02013;74</mixed-citation></ref><ref id="CR79"><citation-alternatives><element-citation id="ec-CR79" publication-type="journal"><person-group person-group-type="author"><name><surname>Thom&#x000e9;</surname><given-names>J</given-names></name><name><surname>Shar</surname><given-names>LK</given-names></name><name><surname>Bianculli</surname><given-names>D</given-names></name><name><surname>Briand</surname><given-names>L</given-names></name></person-group><article-title>Security slicing for auditing common injection vulnerabilities</article-title><source>J Syst Softw</source><year>2018</year><volume>137</volume><fpage>766</fpage><lpage>783</lpage></element-citation><mixed-citation id="mc-CR79" publication-type="journal">Thom&#x000e9; J, Shar LK, Bianculli D, Briand L (2018) Security slicing for auditing common injection vulnerabilities. J Syst Softw 137:766&#x02013;783</mixed-citation></citation-alternatives></ref><ref id="CR80"><mixed-citation publication-type="other">Thom&#x000e9; J, Shar LK,&#x000a0;Bianculli D, Briand LC (2017) Joanaudit: A tool for auditing common injection vulnerabilities. In: Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pages 1004&#x02013;1008</mixed-citation></ref><ref id="CR81"><citation-alternatives><element-citation id="ec-CR81" publication-type="journal"><person-group person-group-type="author"><name><surname>Tuma</surname><given-names>K</given-names></name><name><surname>Sandberg</surname><given-names>C</given-names></name><name><surname>Thorsson</surname><given-names>U</given-names></name><name><surname>Widman</surname><given-names>M</given-names></name><name><surname>Herpel</surname><given-names>T</given-names></name><name><surname>Scandariato</surname><given-names>R</given-names></name></person-group><article-title>Finding security threats that matter: Two industrial case studies</article-title><source>J Syst Softw</source><year>2021</year><volume>179</volume><fpage>111003</fpage></element-citation><mixed-citation id="mc-CR81" publication-type="journal">Tuma K, Sandberg C, Thorsson U, Widman M, Herpel T, Scandariato R (2021) Finding security threats that matter: Two industrial case studies. J Syst Softw 179:111003</mixed-citation></citation-alternatives></ref><ref id="CR82"><mixed-citation publication-type="other">Tuma K,&#x000a0;Scandariato R (2018) Two architectural threat analysis techniques compared. In: European Conference on Software Architecture, pages 347&#x02013;363. Springer</mixed-citation></ref><ref id="CR83"><mixed-citation publication-type="other">Uwano H,&#x000a0;Nakamura M,&#x000a0;Monden A, Matsumoto K-i (2006) Analyzing individual performance of source code review using reviewers&#x02019; eye movement. In: Proceedings of the 2006 symposium on Eye tracking research &#x00026; applications, pages 133&#x02013;140</mixed-citation></ref><ref id="CR84"><citation-alternatives><element-citation id="ec-CR84" publication-type="journal"><person-group person-group-type="author"><name><surname>Vegas</surname><given-names>S</given-names></name><name><surname>Apa</surname><given-names>C</given-names></name><name><surname>Juristo</surname><given-names>N</given-names></name></person-group><article-title>Crossover designs in software engineering experiments: Benefits and perils</article-title><source>IEEE Trans Software Eng</source><year>2015</year><volume>42</volume><issue>2</issue><fpage>120</fpage><lpage>135</lpage></element-citation><mixed-citation id="mc-CR84" publication-type="journal">Vegas S, Apa C, Juristo N (2015) Crossover designs in software engineering experiments: Benefits and perils. IEEE Trans Software Eng 42(2):120&#x02013;135</mixed-citation></citation-alternatives></ref><ref id="CR85"><citation-alternatives><element-citation id="ec-CR85" publication-type="journal"><person-group person-group-type="author"><name><surname>Weir</surname><given-names>C</given-names></name><name><surname>Becker</surname><given-names>I</given-names></name><name><surname>Blair</surname><given-names>L</given-names></name></person-group><article-title>Incorporating software security: using developer workshops to engage product managers</article-title><source>Empir Softw Eng</source><year>2023</year><volume>28</volume><issue>2</issue><fpage>21</fpage></element-citation><mixed-citation id="mc-CR85" publication-type="journal">Weir C, Becker I, Blair L (2023) Incorporating software security: using developer workshops to engage product managers. Empir Softw Eng 28(2):21</mixed-citation></citation-alternatives></ref><ref id="CR86"><mixed-citation publication-type="other">Weiser M (1981) Program slicing</mixed-citation></ref><ref id="CR87"><citation-alternatives><element-citation id="ec-CR87" publication-type="journal"><person-group person-group-type="author"><name><surname>Weiser</surname><given-names>M</given-names></name></person-group><article-title>Program slicing</article-title><source>IEEE Trans Software Eng</source><year>1984</year><volume>4</volume><fpage>352</fpage><lpage>357</lpage></element-citation><mixed-citation id="mc-CR87" publication-type="journal">Weiser M (1984) Program slicing. IEEE Trans Software Eng 4:352&#x02013;357</mixed-citation></citation-alternatives></ref><ref id="CR88"><citation-alternatives><element-citation id="ec-CR88" publication-type="journal"><person-group person-group-type="author"><name><surname>Wong</surname><given-names>WE</given-names></name><name><surname>Gao</surname><given-names>R</given-names></name><name><surname>Li</surname><given-names>Y</given-names></name><name><surname>Abreu</surname><given-names>R</given-names></name><name><surname>Wotawa</surname><given-names>F</given-names></name></person-group><article-title>A survey on software fault localization</article-title><source>IEEE Trans Software Eng</source><year>2016</year><volume>42</volume><issue>8</issue><fpage>707</fpage><lpage>740</lpage></element-citation><mixed-citation id="mc-CR88" publication-type="journal">Wong WE, Gao R, Li Y, Abreu R, Wotawa F (2016) A survey on software fault localization. IEEE Trans Software Eng 42(8):707&#x02013;740</mixed-citation></citation-alternatives></ref><ref id="CR89"><mixed-citation publication-type="other">Wurster G, Van&#x000a0;Oorschot PC (2008) The developer is the enemy. In: Proc. NSPW&#x02019;08, pages 89&#x02013;97</mixed-citation></ref><ref id="CR90"><citation-alternatives><element-citation id="ec-CR90" publication-type="journal"><person-group person-group-type="author"><name><surname>Wuyts</surname><given-names>K</given-names></name><name><surname>Scandariato</surname><given-names>R</given-names></name><name><surname>Joosen</surname><given-names>W</given-names></name></person-group><article-title>Empirical evaluation of a privacy-focused threat modeling methodology</article-title><source>J Syst Softw</source><year>2014</year><volume>96</volume><fpage>122</fpage><lpage>138</lpage></element-citation><mixed-citation id="mc-CR90" publication-type="journal">Wuyts K, Scandariato R, Joosen W (2014) Empirical evaluation of a privacy-focused threat modeling methodology. J Syst Softw 96:122&#x02013;138</mixed-citation></citation-alternatives></ref><ref id="CR91"><citation-alternatives><element-citation id="ec-CR91" publication-type="journal"><person-group person-group-type="author"><name><surname>Xu</surname><given-names>B</given-names></name><name><surname>Qian</surname><given-names>J</given-names></name><name><surname>Zhang</surname><given-names>X</given-names></name><name><surname>Wu</surname><given-names>Z</given-names></name><name><surname>Chen</surname><given-names>L</given-names></name></person-group><article-title>A brief survey of program slicing</article-title><source>ACM SIGSOFT Software Engineering Notes</source><year>2005</year><volume>30</volume><issue>2</issue><fpage>1</fpage><lpage>36</lpage></element-citation><mixed-citation id="mc-CR91" publication-type="journal">Xu B, Qian J, Zhang X, Wu Z, Chen L (2005) A brief survey of program slicing. ACM SIGSOFT Software Engineering Notes 30(2):1&#x02013;36</mixed-citation></citation-alternatives></ref><ref id="CR92"><mixed-citation publication-type="other">Yu J,&#x000a0;Fu L,&#x000a0;Liang P,&#x000a0;Tahir A,&#x000a0;Shahin M (2023) Security defect detection via code review: A study of the openstack and qt communities. In: 2023 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), pages 1&#x02013;12. IEEE</mixed-citation></ref><ref id="CR93"><mixed-citation publication-type="other">Yu-Tao H,&#x000a0;Su-Yuan W,&#x000a0;Yue-Ming W,&#x000a0;De-Qing Z,&#x000a0;Wen-ke L,&#x000a0;Hai J (2023) A slice-level vulnerability detection and interpretation method based on graph neural network. Journal of Software 34(6):0&#x02013;0</mixed-citation></ref><ref id="CR94"><mixed-citation publication-type="other">Zhang Q,&#x000a0;Zhao Y,&#x000a0;Sun W,&#x000a0;Fang C,&#x000a0;Wang Z,&#x000a0;Zhang L (2022) Program repair: Automated vs. manual. <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/2203.05166">arXiv:2203.05166</ext-link></mixed-citation></ref><ref id="CR95"><citation-alternatives><element-citation id="ec-CR95" publication-type="journal"><person-group person-group-type="author"><name><surname>Zhou</surname><given-names>C</given-names></name><name><surname>Li</surname><given-names>B</given-names></name><name><surname>Sun</surname><given-names>X</given-names></name><name><surname>Bo</surname><given-names>L</given-names></name></person-group><article-title>Why and what happened? aiding bug comprehension with automated category and causal link identification</article-title><source>Empir Softw Eng</source><year>2021</year><volume>26</volume><issue>6</issue><fpage>1</fpage><lpage>36</lpage></element-citation><mixed-citation id="mc-CR95" publication-type="journal">Zhou C, Li B, Sun X, Bo L (2021) Why and what happened? aiding bug comprehension with automated category and causal link identification. Empir Softw Eng 26(6):1&#x02013;36</mixed-citation></citation-alternatives></ref></ref-list></back></article>